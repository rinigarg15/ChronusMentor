/**
 * Clears the text in the input object if it is the default text.
 */

function clearDefaultText(obj, defaultvalue)
{
  obj = jQuery(obj);

  if (obj.val() == defaultvalue || !obj.val()) {
    obj.removeClass('text-muted').val('');
  }
}

/**
 * If the given input object text is empty, sets it to the default text.
 */
function setDefaultText(obj, defaultvalue)
{
  obj = jQuery(obj);
  if (!obj.val()) {
    obj.addClass('text-muted').val(defaultvalue);
  }
}

/**
 * Returns false if the given element has the default text as its value.
 **/
function validateDefaultTextInForm(elementId, message)
{
  var selector = "#" + elementId;
  var textAreaForm = jQuery(selector);
  if (textAreaForm.val().blank()) {
    if (message === undefined) {
      ChronusValidator.ErrorManager.ShowFieldError(selector);
    }
    else {
      alert(message);
    }
    return false;
  }
  ChronusValidator.ErrorManager.HideFieldError(selector);
}

function validateRoleValueIfField(elementId)
{
    var elementObj = jQuery("#" + elementId);
    if(elementObj.length) {
      return RequiredFields.checkMultiInputCase(elementObj);
    }
    return true;
}

function deletePost(post_id, confirmation_msg) {
    chronusConfirm(confirmation_msg, function() {
       jQuery("#edit_post_" + post_id).submit();
    });
}

function validatePost(post_id, blank_error_msg) {
    if(jQuery('#new_post_body_' + post_id).val().blank()){
        ChronusValidator.ErrorManager.ShowResponseFlash("new_topic", blank_error_msg);
        return false;
    } else {
        ChronusValidator.ErrorManager.ClearResponseFlash("new_topic");
        return true;
    }
}

var CascadingSelect = {
    initialize: function(parentSelector, childSelector, linkAttribute, defaultSelectValue) {
        jQuery(document).ready(function() {
            var backUp = jQuery(childSelector).clone();
            defaultSelectValue = defaultSelectValue || "";
            jQuery(parentSelector).on("change", function(){
                CascadingSelect.updateChildSelectOptions(childSelector, parentSelector, backUp, linkAttribute, defaultSelectValue);
            });
            CascadingSelect.updateChildSelectOptions(childSelector, parentSelector, backUp, linkAttribute, defaultSelectValue);
        });
    },

    updateChildSelectOptions: function(childSelector, parentSelector, backUp, linkAttribute, defaultSelectValue) {
        var child = jQuery(childSelector);
        var parent = jQuery(parentSelector);
        var parentSelectedOption = jQuery("option:selected", parent).val();
        jQuery(childSelector).html(backUp.html());

        jQuery("option", child).each(function() {
            option = jQuery(this);
            isParentOptionDefault = (parentSelectedOption == defaultSelectValue);
            isChildOptionDefault = (option.val() == defaultSelectValue);
            isChildOptionDifferentFromParent = (option.attr(linkAttribute) !== parentSelectedOption);
            if ((isParentOptionDefault || isChildOptionDifferentFromParent) && !isChildOptionDefault) {
                option.remove();
            }
        });
    }
}


/************************ DOM Element utility methods *************************/

// Add our methods to prototype DOM Element
jQuery.extend(Element, {
    /**
     * Fires the event on the DOM element
     *
     * $('some_elem').fireEvent('click');
     *
     * @param {Object} evt the event to fire. Note that we need to pass 'click',
     *                                  and not 'onclick'
     */
    browserFireEvent: function(element, evt){
        if (document.createEvent) {
            var evObj = document.createEvent('MouseEvents');
            evObj.initEvent(evt, true, false);
            element.dispatchEvent(evObj);
        }
        else {
            if (document.createEventObject) {
                element.fireEvent('on' + evt);
            }
        }
    },

    /**
     * This function fetches all elements of a given type,
     * in the document, that have the given id.
     */
    getAllElementsById: function(element, elementId, type){
        var elements = [];
        var all_elements;

        if (type) {
            all_elements = document.getElementsByTagName(type);
        }
        else {
            all_elements = document.getElementsByTagName('*');
        }

        for (var i = 0; i < all_elements.length; i++) {
            if (all_elements[i].id.match(elementId)) {
                elements.push(all_elements[i]);
            }
        }

        return elements;
    }
});

/************************** Error displaying utilities ************************/

var ChronusValidator = {};

ChronusValidator.getInstance = function(){
    if (ChronusValidator.instance == null) {
        this.instance = new ChronusValidator();
    }

    return ChronusValidator.instance;
}

ChronusValidator.ErrorManager = {};

ChronusValidator.ErrorManager.ERROR_BORDER = "2px solid #ed5565";
ChronusValidator.ErrorManager.ERROR_COLOR = "#A00";
ChronusValidator.ErrorManager.NORMAL_BORDER = "1px solid #666666";
ChronusValidator.ErrorManager.AJAX_SUCCESS_MESSAGE = preJsTranslations.baseAppJQuery.successfullySaved;
ChronusValidator.ErrorManager.FORM_ERROR_MESSAGE = preJsTranslations.baseAppJQuery.createFailure;

/**
 * Shows the given reponse in errorDiv, defaulting message to
 * ChronusValidator.ErrorManager.AJAX_SUCCESS_MESSAGE
 *
 * @param {Object} errorDiv the id of the flash div
 * @param {Object} responseText the AJAX response to show in the flash DIV
 * @param {Object} success whether the request was successful
 */
ChronusValidator.ErrorManager.ShowResponseFlash = function(errorDiv, responseText){
  success = arguments[2];
  dontShowResponse = arguments[3];
  noTimeOut = arguments[4]

  if (success) {
    if (!responseText || dontShowResponse) {
      responseText = this.AJAX_SUCCESS_MESSAGE;
    }
    toastr.clear();
    if (noTimeOut){
      toastr.success(responseText, '', {progressBar: true});
    }else{
      toastr.success(responseText, '', {progressBar: true, timeOut: 7000, extendedTimeOut: 2000});
    }
  } else {
    // If the response is too big, dont show it.
    // Just a safeguard from showing exception messages in flash.
    var errorFlashMessage = ""
    if (responseText.length <= 500) {
      errorFlashMessage = responseText;
    } else {
      errorFlashMessage = jsCommonTranslations.problemsPerformingOperation;
    }
    toastr.clear();
    toastr.error(errorFlashMessage);
  }
}

/**
 * Wipes out any message from the given errorDiv
 */
ChronusValidator.ErrorManager.ClearResponseFlash = function(errorDiv){
  errorDivElement = jQuery('#' + errorDiv)
  if (errorDivElement.length == 0) {
    return;
  }
  var notice_msg = errorDivElement.find('span');
  notice_msg.html("");
  errorDivElement.hide();
}

ChronusValidator.ErrorManager.ShowPageFlash = function(success, message){
  flashId = arguments[2];
  noTimeOut = arguments[3];
  if (success) {
    ChronusValidator.ErrorManager.ShowResponseFlash(flashId || "flash_container", message, true, false, noTimeOut);
  } else {
    ChronusValidator.ErrorManager.ShowResponseFlash(flashId || "flash_container", message, false);
  }
}

/**
* Clears the flash message at the top of the page
*/
ChronusValidator.ErrorManager.ClearPageFlash = function(){
  ChronusValidator.ErrorManager.ClearResponseFlash("flash_container");
}

/**
 * Displays/Clears local form error messages.
 *
 * If stausOk, clears errorDiv. Else, shows FORM_ERROR_MESSAGE in errorDiv
 *
 * @param {Object} formOk whether the form fields are error free.
 * @param {Object} errorDiv the id of the flash div
 */
ChronusValidator.ErrorManager.ShowFormError = function(formOk, errorDiv){
    if (formOk) {
        ChronusValidator.ErrorManager.ClearResponseFlash(errorDiv);
    } else {
        ChronusValidator.ErrorManager.ShowResponseFlash(errorDiv, this.FORM_ERROR_MESSAGE);
    }
}

/**
 * Updates the error status field of the given field with the new status
 * and message
 *
 * @param {Object} hasError whether the field value has error
 * @param {Object} fieldElement the element whose status to update
 * @param {Object} statusElement the status element for showing the message
 * @param {Object} errorMessage the message to show on error.
 */
ChronusValidator.ErrorManager.ApplyFieldStatus = function(fieldOk, fieldElement, statusElement, errorMessage){
    fieldElement = jQuery.type(fieldElement) == 'string' ? jQuery('#' + fieldElement) : jQuery(fieldElement);
    statusElement = jQuery.type(statusElement) == 'string' ? jQuery('#' + statusElement) : jQuery(statusElement);
    if (fieldOk) {
        if (statusElement.length) {
            statusElement.html('');
        }
        this.HideFieldError(fieldElement);
    } else {
        if (statusElement.length) {
            statusElement.show();
            statusElement.html(errorMessage);
        }
        this.ShowFieldError(fieldElement);
    }
}

ChronusValidator.ErrorManager.ShowHideFieldError = function(element, showError){
  if(showError){
    ChronusValidator.ErrorManager.ShowFieldError(element);
  }
  else{
    ChronusValidator.ErrorManager.HideFieldError(element);
  }
}

/**
 * Performs error highlightling for the given element. Border property cannot be applied to select tag for IE 7 and less
 */
ChronusValidator.ErrorManager.ShowFieldError = function(element){
  applyOrClearBorder(element, true);
}

/**
 * Clears error hightlight on the element.
 */
ChronusValidator.ErrorManager.HideFieldError = function(element){
  // Setting $(element).style.border = '' does not work in IE. It wipes out
  // the existing border provided by the CSS for the element. We need to
  // set individual attributes of style for removing border STYLE alone that
  // we applied. Border property cannot be applied to select tag for IE 7 and less
  applyOrClearBorder(element, false);
}

function applyOrClearBorder(element, applyBorder) {
  element = jQuery(element);

  cssOptions = applyBorder ? { border: ChronusValidator.ErrorManager.ERROR_BORDER } : { borderColor : "", borderWidth : "", borderStyle : "" };
  if(element.hasClass("select2-container")) {
    element.find(".select2-choices").css(cssOptions);
  }

  if(element.hasClass("cui-fileinput-initialized")) {
    var fileContainer = element.closest(".cjs_file_field_wrapper");
    if(fileContainer.length > 0) {
      var fileContainerWithDeleteCheckBox = fileContainer.find(".cjs_edit_file_upload_toggle");
      var elementToHighlight = (fileContainerWithDeleteCheckBox.length > 0) ? fileContainerWithDeleteCheckBox : fileContainer;
      elementToHighlight.css(cssOptions);
    }
  } else {
    element.css(cssOptions);
  }
}

/**
 * Function to submit sort form
 */
function submitSortForm(value, isGroupsPage){
  var dummy = value.split(",");
  jQuery('#sort_field').val(dummy[0]);
  jQuery('#sort_order').val(dummy[1]);
  jQuery('#sort_form').submit();
}

function submitSortFormAjax(value, isGroupsPage){
  var dummy = value.split(",");
  jQuery('#search_filter_form .sort').val(dummy[0]);
  jQuery('#search_filter_form .order').val(dummy[1]);
  if(isGroupsPage){
    GroupSearch.applyFilters();
  }
  else{
    MentorSearch.applyFilters();
  }
}

function updateSortDetails(value) {
  var tmp = value.split(",");
  jQuery('#search_filter_form .cjs-sort-field').val(tmp[0]);
  jQuery('#search_filter_form .cjs-sort-order').val(tmp[1]);
}

function updateSortForMentorOffersAjax(value) {
  updateSortDetails(value);
  MentorOffers.applyFilters();
}

function updateSortCommon(value) {
  updateSortDetails(value);
  jQuery('#search_filter_form').submit();
}

/**
 * Function to change per page items select
 */
function submitPerPageSelectorForm(value){
  jQuery('#change_items_field').val(value);
  jQuery('#change_items_form').submit();
}

function submitPerPageSelectorFormAjax(value){
  jQuery('#search_filter_form .items_per_page').val(value);
  MentorSearch.applyFilters();
}

/**
 * Function to submit Filter form
 */
function submitFilterForm(value){
    jQuery('#filter_name').val(value);
    jQuery('#filter_form').submit();
}

/**
 * These are the set of functions required in the Customize profile page
 */

var CustomizeMentoringModeSetting = {
  handleModeChage: function(program_id){
    jQuery('.cjs_mentoring_mode_setting_options_'+ program_id).on('change', function() {
      CustomizeMentoringModeSetting.showAppropriateSetting(program_id);
    });
  },

  showAppropriateSetting: function(program_id){
    jQuery('.cjs_mentoring_setting_' + program_id).show();
    jQuery('.cjs_hide_setting_'+ program_id + "_" + jQuery('.cjs_mentoring_mode_setting_options_'+ program_id +':checked').val()).hide();
  }
}

var MatchingSettings = {
  showOfferMentor: function() {
    jQuery("#cjs_offer_mentor_check").on("change", function() {
      if(jQuery(this).is(":checked")) {
        jQuery(".cjs_mentor_offer_settings").show();
      } else {
        jQuery(".cjs_mentor_offer_settings").hide();
      }
      MatchingSettings.showMentorRequestOfferSettings();
    });
  },

  showMentorRequestSettings: function() {
    jQuery(".cjs_mentor_request_check").on("change", function() {
      jQuery(".cjs_mentor_request_check").not(this).prop('checked', false); // Deselect other mentor request style related check boxes.
      jQuery("#cjs_matching_ongoing_advanced_setting").hide();
      var isChecked = jQuery(this).is(":checked");
      var isPreferredMentoringChecked = jQuery(".cjs_preferred_mentor_check").is(":checked");

      jQuery(".cjs_mentor_request_settings").toggle(isChecked);
      jQuery("#cjs_matching_ongoing_advanced_options").toggle(isChecked);
      MatchingSettings.showMentorRequestOfferSettings();
      jQuery(".cjs_preferred_mentoring_related_setting").toggle(isPreferredMentoringChecked);
      if(isPreferredMentoringChecked)
        jQuery("#program_allow_preference_mentor_request_true").click();
    });
  },

  showMentorRequestOfferSettings: function() {
    var isMentorRequestEnabled = jQuery(".cjs_mentor_request_check").is(":checked");
    var isMentorOfferEnabled = jQuery("#cjs_offer_mentor_check").is(":checked");
    var showMentorRequestOfferSettings = isMentorRequestEnabled || (isMentorOfferEnabled && (jQuery(".cjs_mentor_offer_settings").length > 0));

    if(showMentorRequestOfferSettings) {
      jQuery(".cjs_mentor_request_offer_settings").show();
    } else {
      jQuery(".cjs_mentor_request_offer_settings").hide();
    }
  },

  handleAllowMentoringModeChange: function() {
    jQuery('.cjs_mentoring_mode_possibilities').on('change', function() {
      var allSelected = jQuery('.cjs_mentoring_mode_possibilities:checked').length == jQuery('.cjs_mentoring_mode_possibilities').length;
      if(allSelected) {
        jQuery('.cjs_matching_allow_mentoring_mode_change').show();
      } else {
        jQuery('.cjs_matching_allow_mentoring_mode_change').hide();
      }
    });
  },

  showOngoingMentoringSettings: function(){
    jQuery('.cjs_matching_setting_ongoing_mentoring_mode').on('change', function() {
      if(jQuery(this).is(':checked')) {
        jQuery('.cjs_ongoing_matching_setting_details').show();
      } else {
        jQuery('.cjs_ongoing_matching_setting_details').hide();
      }
    });
  },

  showOneTimeMentoringSettings: function(disableOneTimeMsg){
    jQuery('.cjs_matching_setting_one_time_mentoring_mode').on('change', function(){
      if (jQuery(this).is(':checked')){
        jQuery('.cjs_one_time_matching_setting_details').show();
      }
      else{
        var okFunction = function(){ jQuery('.cjs_one_time_matching_setting_details').hide(); };
        if(jQuery(this).data('initially-enabled')) {
          chronusConfirm(
            disableOneTimeMsg,
            okFunction,
            function(){ jQuery('.cjs_matching_setting_one_time_mentoring_mode').prop('checked', true); },
            jsCommonTranslations.popup.yes,
            jsCommonTranslations.popup.no
          );
        } else {
          (okFunction)();
        }
      }
    });
  },

  matchingOngoingAdvanceSetting: function(){
    jQuery(".cjs_matching_ongoing_advanced_setting_toggle").on('click', function() {
      jQuery('#cjs_matching_ongoing_advanced_setting').toggle();
      jQuery('#cjs_matching_ongoing_advanced_options').toggle();
    });
  },

  showOrHideMinPreferenceMentor: function() {
    var showOrHide = jQuery(".cjs_allow_preference_mentor_request:checked").val() == "true";
    jQuery(".cjs_min_preferred_mentors").toggle(showOrHide);
  },

  handleMinPreferenceMentor: function() {
    jQuery(document).ready(function() {
      jQuery(".cjs_allow_preference_mentor_request").on("change", MatchingSettings.showOrHideMinPreferenceMentor);
    });
  },

  showOrHideMaxConnectionForMentee: function(){
    var showOrHide = jQuery(".cjs_max_concurrent_mentors_for_mentee").is(":checked");
    jQuery(".cjs_max_connections_for_mentee").toggle(showOrHide);
  },

  handleMaxConnectionForMentee: function(){
    jQuery(".cjs_max_concurrent_mentors_for_mentee").on("change", function() {
      MatchingSettings.showOrHideMaxConnectionForMentee();
    });
    jQuery(function(){
      MatchingSettings.showOrHideMaxConnectionForMentee();
    });
  }
}

var NumberCounter = {
  initCounter: function(selector, options){
    options = getDefaultVal(options, {})
    var duration = getDefaultVal(options.duration, 1500);
    var numberSuffix = options.showPercentage ? "%" : getDefaultVal(options.numberSuffix, "");
    jQuery(selector).each(function (){
      var originalCount = jQuery(this).text();
      jQuery(this).prop('Counter',0).animate({
        Counter: originalCount
      },{
          duration: duration,
          easing: 'swing',
          step: function (now){
            jQuery(this).text(NumberCounter.getNumber(Math.floor(now), options) + numberSuffix);
          },
          complete: function(){
            jQuery(this).text(NumberCounter.getNumber(originalCount, options) + numberSuffix);
          }
      });
    });
  },

  getNumber: function(number, options){
    options = getDefaultVal(options, {});
    var formattedNumber = options.format ? NumberFormatter.format(number) : number;
    return formattedNumber;
  }
}

var NumberFormatter = {
  format: function(number, options){
    options = getDefaultVal(options, {});
    var numberFormats = [
      {limit: 1000000, constant: jsCommonTranslations.symbolForMillion},
      {limit: 1000, constant: jsCommonTranslations.symbolForThousand}
    ];
    var numberOfDigits = getDefaultVal(options.numberOfDigits, 3);
    for (var i = 0; i < numberFormats.length; i++) {
      if(number >= numberFormats[i].limit){
        var result = number / numberFormats[i].limit;
        var truncateDecimal = (parseInt(result).toString().length >= numberOfDigits);
        number = (truncateDecimal ? result.toFixed(0) : result.toFixed(1)).replace(/\.0$/, '') + numberFormats[i].constant;
        break;
      }
    }
    return number;
  }
}

var CustomizeQuestions = {
    fileType: "5",

    handleOnChangeType: function(selectElement, q_id, noConfirmation, options){
      var originalValue = jQuery(selectElement).data("originalType");
      var currentValue = jQuery(selectElement).val();
      noConfirmation = noConfirmation || !CustomizeQuestions.changeLeadsToAnswerDeletion(parseInt(originalValue), parseInt(currentValue));
      if(options.connectionQuestion){
        CustomizeQuestions.handleConnectionSummaryQuestionCheckBox(selectElement, q_id, options);
      }
      chronusConfirm(jsProfileQuestionTranslation.changingFieldTypeConfirmText, function() {
        CustomizeQuestions.handleChangeType(selectElement, q_id);
      }, function(){
        jQuery(selectElement).val(originalValue);
        CustomizeQuestions.handleChangeType(selectElement, q_id);
        return false;
      }, jsCommonTranslations.popup.yes, jsCommonTranslations.popup.no, noConfirmation);
    },

    handleConnectionSummaryQuestionCheckBox: function(element, q_id, options){
      var currentQuestion = jQuery("#display_question_in_summary_"+q_id);
      if(jQuery(element).val() == CustomizeQuestions.fileType){
        currentQuestion.attr("disabled", true);
        currentQuestion.prop("checked", false);
      }
      else{
        CustomizeQuestions.handleNonFileTypeQuestionCheckBox(currentQuestion, q_id, options);
      }
    },

    handleNonFileTypeQuestionCheckBox: function(currentQuestion, id, options){
      var anotherSummaryQuestionEnabled = false;
      var connectionSummaryQuestionCheckboxes = jQuery(".display_question_in_summary_control").find('input:checkbox').not("#display_question_in_summary_" + id);
      connectionSummaryQuestionCheckboxes.each(function(){
        if (jQuery(this).prop("checked")){
          anotherSummaryQuestionEnabled = true;
          var qId = jQuery(this).attr('id').replace(/display_question_in_summary_/, '');
          var questionText = jQuery("#survey_question_question_text_"+qId).val();
          currentQuestion.attr("disabled", true);
          currentQuestion.prop("checked", false);
          jQuery("#display_question_in_summary_setting_already_enabled_tooltip_"+id).attr('data-original-title', options.optionAlreadyEnabledText + ' "' + questionText + '". ' + options.uncheckOptionText);
          jQuery("#display_question_in_summary_setting_already_enabled_tooltip_"+id).tooltip('enable');
          return false;
        }
      });
      if(!anotherSummaryQuestionEnabled){
        currentQuestion.attr("disabled", options.summary_option_disabled);
        currentQuestion.prop("checked", options.summary_option_checked);
        if(options.questionType == CustomizeQuestions.fileType){
          currentQuestion.attr("disabled", false);
          currentQuestion.prop("checked", false);
        }
      }
    },

    handleChangeType: function(selectElement, q_id){
      CustomizeQuestions.checkMultipeChoice(selectElement, q_id);
      CustomizeQuestions.checkFilterable(q_id);
      if (q_id == 'new') {
          CustomizeQuestions.addFileDescription(selectElement);
      }
    },

    editingDataOfChoiceBasedQuestions: function(questionId){
      jQuery("#edit_common_question_"+ questionId).find(':submit').on('click', function(event) {
        event.preventDefault();
        CustomizeQuestions.handleQuestionDataChange("#edit_common_question_"+questionId, questionId);
      });
    },

    toggleCollapseIcon: function(){
      jQuery(document).on('click', ".cjs_collapse_icon_responses", function(){
        var parentElement = jQuery(this).parent().parent();
        jQuery(this).hide();
        jQuery(parentElement).siblings(".cjs_users_connections_responses").show();
      });
    },

    formsubmit: function(element){
      var elementId = jQuery(element).attr('id');
      jQuery('#' + elementId).submit();
    },

    dataConfirmText: function(rowElement){
      if(rowElement.is(":visible")){
        return jsProfileQuestionTranslation.changingMatrixRowDataConfirmText + " " + jsProfileQuestionTranslation.changingMatrixColumnDataConfirmText;
      }
      else {
        return jsProfileQuestionTranslation.changingMatrixColumnDataConfirmText;
      }
    },

    handleQuestionDataChange: function(element, questionId){
      var rowElement = jQuery(element).find("#matrix_question_rows_list_" + questionId);
      var questionChoicesElement = jQuery(element).find("#common_question_choices_list_" + questionId);
      var noConfirmationChoice = CustomizeQuestions.noRowOrQuestionChoiceUpdated(questionId, questionChoicesElement, "common");
      var noConfirmationRow = CustomizeQuestions.noRowOrQuestionChoiceUpdated(questionId, rowElement, "matrix");
      var noConfirmation = (rowElement.is(":visible") ? (noConfirmationChoice && noConfirmationRow) : noConfirmationChoice);
      chronusConfirm(CustomizeQuestions.dataConfirmText(rowElement), function(){CustomizeQuestions.formsubmit(element); jQuerySortable.enableDraggable(element); }, function(){ return false; }, jsCommonTranslations.popup.yes,jsCommonTranslations.popup.no, noConfirmation);
    },

    noRowOrQuestionChoiceUpdated: function(questionId, rowOrQuestionChoicesElement, questionType) {
      if(!rowOrQuestionChoicesElement.is(":visible"))
        return true
      var choiceUpdated = false;
      if(questionType == "matrix")
        var initialRowOrQuestionChoices = CustomizeQuestionChoices.initialRows[questionId];
      else
        var initialRowOrQuestionChoices = CustomizeQuestionChoices.initialQuestionChoices[questionId];
      rowOrQuestionChoicesElement.find("li").each(function(){
        existingText = initialRowOrQuestionChoices[parseInt(jQuery(this).data('choiceId'))];
        choiceUpdated = choiceUpdated || (existingText !== undefined && existingText !== jQuery(this).find("input[type=text]").val());
      });
      choiceUpdated = choiceUpdated || (Object.keys(initialRowOrQuestionChoices).length > rowOrQuestionChoicesElement.find("li").length);
      return !isObjectEmpty(initialRowOrQuestionChoices) && !choiceUpdated;
    },

    noDataChange: function(element){
      var originalValue = jQuery(element).data("originalType");
      if(originalValue == null){
        return true;
      }
      var currentValue = jQuery(element).val();
      originalValue = originalValue.split(",");
      currentValue = currentValue.split(",");
      originalValue = jQuery.map(originalValue, jQuery.trim);
      currentValue = jQuery.map(currentValue, jQuery.trim);
      var diff = jQuery(originalValue).not(currentValue).get();
      if(diff.length){
        return false;
      }
      return true;
    },

    cancelQuestion: function(thisElement, id, resetHash, partialHash){
      Object.keys(partialHash).forEach(function (elementId) {
        var partial = partialHash[elementId];
        jQuery(elementId).replaceWith(partial);
      });
      Object.keys(resetHash).forEach(function (questionType) {
        var questionChoices = resetHash[questionType];
        CustomizeQuestionChoices.enableChoiceChangedActions(id, questionChoices, questionType);
      });
      jQuery('#common_question_value_' + id).toggle();
      jQuery('#edit_common_question_' + id).toggle();
      jQuerySortable.enableDraggable('#edit_common_question_' + id);
      jQuery("#common_question_text_" + id).val(jQuery("#common_question_original_text_" + id).val());
      jQuery("#common_question_type_" + id).val(jQuery("#common_question_original_type_" + id).val()).trigger('change');
      jQuery("#help_text_" + id).val(jQuery("#help_text_orginal_" + id).val());
      jQuery("#condition_" + id).val(jQuery("#condition_orginal_" + id).val());
    },

    checkMultipeChoice : function(element, id) {
        var elementVal = jQuery(element).val();

        if((elementVal == "2")||(elementVal == "3")||(elementVal == "4")) {
          jQuery('#choices_' + id).css('display', "");
          jQuery('#columns_' + id).css('display', "none");
          jQuery('#choices_' + id).nextAll(".name_type").find('.mandatory_setting').text(surveysTranslations.mandatory_setting_text);
          jQuery('.cjs_question_setting').css('display', "none");

          if(elementVal == "4") {
             jQuery('#choices_' + id).find(".help-block").text(surveysTranslations.rating_hint_text_low_to_high);
          }
          else {
              jQuery('#choices_' + id).find(".help-block").text(surveysTranslations.rating_hint_text);
          }

        }
        else if(elementVal == "7"){
          jQuery('#choices_' + id).css('display', "");
          jQuery('#columns_' + id).css('display', "");
          jQuery('#choices_' + id).nextAll(".name_type").find('.mandatory_setting').
          text(surveysTranslations.mandatory_setting_text_all_rows_must_be_rated);
          jQuery('.cjs_question_setting').css('display', "");
          jQuery('#choices_' + id).find(".help-block").text(surveysTranslations.rating_hint_text_low_to_high);
        }
        else {
          jQuery('#choices_' + id).css('display', "none");
          jQuery('#columns_' + id).css('display', "none");
          jQuery('#choices_' + id).nextAll(".name_type").find('.mandatory_setting').text(surveysTranslations.mandatory_setting_text);
          jQuery('.cjs_question_setting').css('display', "none");
        }

        if (elementVal == "2" || elementVal == "3") {
          jQuery("#other_option_edit_" + id).show();
          jQuery("#cjs_bulk_add_wrapper_" + id).show();
        }
        else {
          jQuery("#other_option_edit_" + id).hide();
          jQuery("#cjs_bulk_add_wrapper_" + id).hide();
        }
    },

    addFileDescription: function(element, q_id, section_id) {
      var uploadText = jsCommonTranslations.fileUploadText;
      var elementVal = jQuery(element).val();
      //Uploadfile type question
      if (typeof(q_id) == "undefined"){
        var helpTextElement = jQuery("#help_text_new");
      } else{
        var helpTextElement = jQuery('#help_text_' + section_id  + '_' + q_id);
      }
      if(elementVal == CustomizeQuestions.fileType){
        helpTextElement.val(uploadText);
      }
      else{
        helpTextElement.val('');
      }
    },

    showOrHideBulkAdd: function(questionId){
      var elementVal = jQuery("#common_question_type_" + questionId).val();
      if(elementVal == "2" || elementVal == "3")
        jQuery("#cjs_bulk_add_wrapper_" + questionId).show();
      else
        jQuery("#cjs_bulk_add_wrapper_" + questionId).hide();
    },

    checkFilterable :function(id){
      var filterElement = jQuery('#question_filterable_'+id);
      var filterSpan = jQuery('#question_filterable_text_'+id);
      var quesType = jQuery('#common_question_type_'+id);
      var privateElement = jQuery('#question_private_' + id);

      if(filterElement){
        if(privateElement){
          filterElement.disabled = (privateElement.val() != "0")
        }
        filterElement.disabled = filterElement.disabled || (quesType.val() == CustomizeQuestions.fileType);
        filterElement.checked =filterElement.disabled ? false : filterElement.checked;
        filterSpan.className = filterElement.disabled ? 'disabled' : "";
      }
    },

    checkPrivate : function(id){
      this.checkFilterable(id);
    },

    changeLeadsToAnswerDeletion: function(from, to) {
      if (from == 0 || from == 1 || from == 4 || from == 5 || from == 6 || from == 7) {
        if (to == 2 || to == 3) {
          // Text to choice
          return true;
        }
      } else if (from == 3 && to == 2) {
        // Multi choice to single choice
        return true;
      }

      return false;
    },

    editOtherOptionSingleChoice: function(id) {
      if(jQuery("#common_answers_"+id).length) {
        CustomizeQuestions.editSingleChoice("common_answers_",id)
      }
      else if(jQuery("#profile_answers_"+id).length) {
        CustomizeQuestions.editSingleChoice("profile_answers_",id)
      }
    },

    editSingleChoice: function(id_prefix, id) {
     if(jQuery("#"+id_prefix+id).val() == "other") {
       CustomizeQuestions.showOtherOptionText(id);
     }
     else {
       CustomizeQuestions.hideOtherOptionText(id);
       CustomizeQuestions.resetValue(id_prefix,id);
     }
    },

    editOtherOptionMultiChoice: function(id) {
      if(jQuery("#common_answers_"+id).length) {
        CustomizeQuestions.editMultiChoice("common_answers_",id)
      }
      else if(jQuery("#profile_answers_"+id).length) {
        CustomizeQuestions.editMultiChoice("profile_answers_",id)
      }
    },

    editMultiChoice: function(id_prefix, id) {
      if(jQuery("#"+id_prefix+id+"_other").is(':checked')) {
        jQuery("#"+id_prefix+id+"_other").closest('label').addClass(' pull-left has-next-1 ');
        CustomizeQuestions.showOtherOptionText(id);
      }
      else {
        jQuery("#"+id_prefix+id+"_other").closest('label').removeClass(' pull-left has-next-1 ');
        CustomizeQuestions.hideOtherOptionText(id);
      }
    },

    editOrderedOptionsChoice: function(id, index) {
      if(jQuery("#profile_answers_"+id+"_"+index).find('option:selected').val() == "other") {
       jQuery("#profile_answers_"+id+"_"+index).addClass(" has-next");
       jQuery("#other_option_"+id+"_"+index).addClass(" inline").show();
       jQuery("#other_option_"+id+"_"+index + " input[type='text']").focus();
      }
      else {
       jQuery("#profile_answers_"+id+"_"+index).removeClass(" has-next");
       jQuery("#other_option_"+id+"_"+index).removeClass(" inline").hide();
      }
    },

    updateAnswerSingleChoice: function(id)  {
      if(jQuery("#common_answers_"+id).length) {
        CustomizeQuestions.updateAnswerValueSingleChoice("common_answers_", id);
      }
      else if(jQuery("#profile_answers_"+id).length) {
        CustomizeQuestions.updateAnswerValueSingleChoice("profile_answers_", id);
      }
    },

    updateAnswerValueSingleChoice: function(id_prefix, id) {
      if(jQuery("#preview_"+id).val() == "") {
        jQuery("#"+id_prefix+id).find('option:selected').val("other");
      }
      else {
        jQuery("#"+id_prefix+id).find('option:selected').val(jQuery("#preview_"+id).val());
      }
    },

    updateAnswerValueOrderedChoice: function(id, index, scope) {
      if(jQuery("#preview_"+id+"_"+index).val() == "") {
        jQuery("#profile_answers_"+id+"_"+index).find('option:selected').val("other");
        if(index == 0){
          CustomizeProfileQuestions.handleTextValidation(id, scope);
        }
      }
      else {
        jQuery("#profile_answers_"+id+"_"+index).find('option:selected').val(jQuery("#preview_"+id+"_"+index).val());
      }
    },

     updateAnswerMultiChoice: function(id)  {
       if(jQuery("#common_answers_"+id).length) {
         CustomizeQuestions.updateAnswerValueMultiChoice("common_answers_", id);
       }
       else if(jQuery("#profile_answers_"+id).length) {
         CustomizeQuestions.updateAnswerValueMultiChoice("profile_answers_", id);
       }
    },

    updateAnswerValueMultiChoice: function(id_prefix, id) {
      jQuery("#"+id_prefix+id + " input:checked[id='"+id_prefix+id +"_other']").val(jQuery("#preview_"+id).val());
    },

    resetValue: function(id_prefix, id) {
      jQuery("#"+id_prefix+id + " option.other").val("other");
      jQuery("#preview_"+id).val("");
    },

    resetValueOrderedChoice: function(id, index) {
      jQuery("#profile_answers_"+id+"_"+index + " option.other").val("other");
      jQuery("#preview_"+id+"_"+index).val("");
    },

    showOtherOptionText: function(id) {
      jQuery("#other_option_"+id).addClass('inline').show();
      jQuery("#other_option_"+id + " input[type='text']").focus();
    },

    hideOtherOptionText: function(id) {
      jQuery("#other_option_"+id).removeClass('inline').hide();
    },

    handleOrderedSelectChange: function(selectBoxElement, id, index, scope) {
      CustomizeQuestions.resetValueOrderedChoice(id, index);
      CustomizeProfileQuestions.disableSelectedOptions(selectBoxElement, "select");
      CustomizeQuestions.editOrderedOptionsChoice(id, index);
      CustomizeProfileQuestions.handleTextValidation(id, scope);
    },

    removeEduExpFields: function(element, edu_or_exp_class, oneRequiredMsg, confirmMsg) {
      var box = jQuery(element).parents(edu_or_exp_class);
      var emptyMessage = jQuery(element).closest(".panel").find(".cjs_empty_message")
      if(box.hasClass("cjs_required") && box.parent().find(".cjs_inner_rounded_section").size() <= 1) {
        alert(oneRequiredMsg);
        // This popup comes behind enrollment popup which has z-index 16001 so increasing the z-index of this alert.
        jQuery('.ui-widget').css('z-index', 17000);
        return false;
      } else {
        chronusConfirm(confirmMsg, function() {
          if(box.siblings(edu_or_exp_class).length == 0){
            box.remove();
            emptyMessage.show();
          }
          else {
            box.remove();
          }
        });
      }
    },

    sizingMatrixRatingReportingTable: function(element){
      var parentWidth = element.width();
      var widthOfFirstCell = element.find(".matrix_table_row").first().find("td").first().width();

      var availableWidth = parentWidth - widthOfFirstCell;
      var noOfcolumns = element.find(".matrix_table_row").first().find("td").size()-1;
      var columnWidth = availableWidth / noOfcolumns;
      var newWidthCells = element.find(".matrix_table_row").find("td").filter(".text-center").css('width',columnWidth);
    },

    findingAllMatrixReportingTables: function(){
      var matrixRatingTables =  jQuery('.matrix_report_table');
        matrixRatingTables.each(function() {
            CustomizeQuestions.sizingMatrixRatingReportingTable(jQuery(this));
        });
    },

    sendOnloadMatrixRatingTableSizingRequest: function(){
      jQuery(document).ready(function(){
        CustomizeQuestions.findingAllMatrixReportingTables();
      });
    },

    resizingWindow: function(){
      jQuery(window).on('resize', function() {
         CustomizeQuestions.findingAllMatrixReportingTables();
       });
    },

    hideSideBarMembersEditIfEmpty: function(){
      if(jQuery('#SidebarRightContainer #profile_side_bar .right_pane').size() >= 1 && jQuery('#SidebarRightContainer #profile_side_bar .right_pane div:visible').size() == 0){
        jQuery('#mainbar').switchClass("col-md-8", "col-md-12");
      }
    },

    initNotApplicableQuestionsSidebar: function() {
      jQuery(document).on('click', ".cjs_see_hidden_answers", function(){
        jQuery('.cjs_hidden_answers, .cjs_see_less_answers').show();
        jQuery(this).hide();
      });

      jQuery(document).on('click', ".cjs_see_less_answers", function(){
        jQuery('.cjs_hidden_answers, .cjs_see_less_answers').hide();
        jQuery('.cjs_see_hidden_answers').show();
      });

      jQuery(document).on('click', ".cjs_hide_complete_profile", function(){
        jQueryBlind('#profile_complete_sidebar');
        setTimeout(function(){CustomizeQuestions.hideSideBarMembersEditIfEmpty();}, 1010);
      });

      jQuery(document).on('click', ".cjs_skip", function(){
        var question_id = jQuery(this).data('question-id');
        var url = jQuery(this).data('url');
        var item_id = question_id != undefined ? question_id : '';
        var not_applicable_item = jQuery("#not_applicable_item_" + item_id);

        jQuery(this).hide();
        not_applicable_item.removeClass('cjs_hover_toggle');
        not_applicable_item.find('.cjs_undo_skip').show();
        not_applicable_item.find(".cjs_not_applicable_question").addClass('text-muted todo-completed');

        setTimeout(function(){
          if(not_applicable_item.find('.cjs_undo_skip span').is(':visible')) {
            jQuery.ajax({
              url: url,
              type: "patch",
              beforeSend: function() {
                jQuery("#not_applicable_item_" + item_id).hide();
                jQuery("#question_" + question_id).find('.incomplete_field').removeClass('bg-darkerhighlight incomplete_field');
                jQuery('.cjs_visible_answers').append(jQuery(".cjs_hidden_answers li:first"));
              }
            })
          }},
        2000);
      });

      jQuery(document).on('click', ".cjs_undo_skip", function(){
        var question_id = jQuery(this).data('question-id');
        var not_applicable_item = jQuery("#not_applicable_item_" + (question_id != undefined ? question_id : ''));

        jQuery(this).hide();
        // Added settimeout because so that by the time the reuest sent by ajax will be sent
        setTimeout(function(){
          not_applicable_item.find('.cjs_skip').show();
          not_applicable_item.addClass('cjs_hover_toggle');
        }, 2000);
        not_applicable_item.find(".cjs_not_applicable_question").removeClass('text-muted todo-completed');
      });
    },

    resetConnectionSummaryQuestionCheckBoxes: function(id, optionAlreadyEnabledText, questionText, uncheckOptionText, summaryQuestionPresent){
      var currentQuestion = jQuery("#display_question_in_summary_"+id);
      var connectionSummaryQuestionCheckboxes = jQuery(".display_question_in_summary_control").find('input:checkbox').not("#display_question_in_summary_" + id);
      if(currentQuestion.prop("checked")){
        connectionSummaryQuestionCheckboxes.each(function(){
          var qId = jQuery(this).attr('id').replace(/display_question_in_summary_/, '');
          jQuery("#display_question_in_summary_"+qId).attr("disabled", true);
          jQuery("#display_question_in_summary_setting_already_enabled_tooltip_"+qId).attr('data-original-title', optionAlreadyEnabledText + ' "' + questionText + '". ' + uncheckOptionText);
          jQuery("#display_question_in_summary_setting_already_enabled_tooltip_"+qId).tooltip('enable');
        });
      }
      else if(!summaryQuestionPresent){
        connectionSummaryQuestionCheckboxes.each(function(){
          var qId = jQuery(this).attr('id').replace(/display_question_in_summary_/, '');
          if(jQuery("#common_question_type_"+ qId).val() == CustomizeQuestions.fileType){
            jQuery("#display_question_in_summary_setting_already_enabled_tooltip_"+qId).tooltip('disable');
            return true;
          }
          jQuery("#display_question_in_summary_"+qId).attr("disabled", false);
          jQuery("#display_question_in_summary_setting_already_enabled_tooltip_"+qId).tooltip('disable');
        });
      }
    },

    handleConnectionQuestionDelete: function(id, summaryPresent){
      var currentQuestion = jQuery("#display_question_in_summary_"+id);
      var connectionSummaryQuestionCheckboxes = jQuery(".display_question_in_summary_control").find('input:checkbox').not("#display_question_in_summary_" + id);
      if(summaryPresent){
        connectionSummaryQuestionCheckboxes.each(function(){
          var qId = jQuery(this).attr('id').replace(/display_question_in_summary_/, '');
          jQuery("#display_question_in_summary_"+qId).attr("disabled", false);
          jQuery("#display_question_in_summary_setting_already_enabled_tooltip_"+qId).tooltip('disable');
        });
      }
    }
}


var Section = {
    validateForm: function(flash_id,title_id,errorMsg){
          var error = !RequiredFields.checkNonMultiInputCase(jQuery("#"+title_id));
          if(error){
            ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, errorMsg);
            return false;
          } else {
            ChronusValidator.ErrorManager.ClearResponseFlash(flash_id);
            jQuery('#loading_image').show();
            return true;
          }
    }
}

function disableProfileUpdatePrompt(url) {
    jQuery.ajax(url, {
        success: function(t) {
            jQuery("#profile_update").hide();
        },
        method: 'get'
    });
}

function hideMatchUnavailableFlash() {
  jQuery("#match_unavailable_flash").hide();
}

function validateGreaterThanZero(element){
    element = jQuery(element)
    if(!parseInt(element.val()) || (parseInt(element.val()) <= 0)){
        alert(jsCommonTranslations.valueGreaterThanZero);
        return false;
    }
    return true;
}

/**
 * This function sets are used for validations of required fields in user profile custom questions page
 *
 * questionsIds: Array of the required field ids
 */
var RequiredFields = {
    fieldIds: [],
    scopedFieldIds: {},

    addScopedField: function(scope, fieldId) {
      RequiredFields.scopedFieldIds[scope] = RequiredFields.scopedFieldIds[scope] || [];
      RequiredFields.scopedFieldIds[scope].push(fieldId);
    },

    removeScopedField: function(scope, fieldId) {
      RequiredFields.scopedFieldIds[scope] = RequiredFields.scopedFieldIds[scope] || [];
      var index = RequiredFields.scopedFieldIds[scope].indexOf(fieldId)
      if (index != -1) {
        RequiredFields.scopedFieldIds[scope].splice(index, 1);
      }
    },

    getFieldsarray: function(scope){
      var fieldsArray = [], visibleFieldsArray = [];
      if (scope) {
        fieldsArray = RequiredFields.scopedFieldIds[scope] || [];
      }
      else {
        fieldsArray = RequiredFields.fieldIds;
      }
      jQuery.each(fieldsArray, function(idx, elementId) {
        var selector = "#" + elementId + ":visible, ." + elementId + ":visible";
        if(jQuery(selector).length > 0) visibleFieldsArray.push(elementId);
      });
      return visibleFieldsArray;
    },

// additonalArgs contains the element and success-failure callbacks
// arguments[1](additionalArgs) determines if to show flash or not
// arguments[2] is the id of the flash container
// arguments[3] can be the flash message instead of the generalized one
    validate: function(scope, additionalArgs){
      var fieldsArray = this.getFieldsarray(scope);
      var flag = true;
      var is_edu_valid = EditUser.validateEducation(jQuery('.inner_rounded_section .education'));
      var exp_valid_check = EditUser.validateExperience(jQuery('.inner_rounded_section .experience'));
      var is_publication_valid = EditUser.validatePublication(jQuery('.inner_rounded_section .publication'));
      var is_manager_valid = EditUser.validateManager(jQuery('.inner_rounded_section .manager'));
      for(i = 0; i < fieldsArray.length; i++){
        var currentElement = jQuery('#' + fieldsArray[i]);
        var newflag = null;
        if(currentElement != null) {
          if(!currentElement.val()){
            if(fieldsArray[i].match(/^edu_cur_list/))
            {
              newflag = RequiredFields.checkEducationValid(fieldsArray[i]);
              newflag = newflag && RequiredFields.checkEducationExperienceExist(fieldsArray[i], currentElement);
            } else if(fieldsArray[i].match(/^exp_cur_list/)){
              newflag = RequiredFields.checkExperienceValid(fieldsArray[i]);
              newflag = newflag && RequiredFields.checkEducationExperienceExist(fieldsArray[i], currentElement);
            } else if(fieldsArray[i].match(/^publication_cur_list/)){
              newflag = RequiredFields.checkPublicationValid(fieldsArray[i]);
              newflag = newflag && RequiredFields.checkEducationExperienceExist(fieldsArray[i], currentElement);
            } else if(fieldsArray[i].match(/^manager_cur_list/)){
              newflag = RequiredFields.checkManagerValid(fieldsArray[i]);
            } else if(fieldsArray[i].match(/^matrix_answers/)){
              newflag = RequiredFields.checkMatrixAnswerValid(fieldsArray[i]);
            } else
              newflag = RequiredFields.checkMultiInputCase(currentElement);
          } else {
            newflag = RequiredFields.checkNonMultiInputCase(currentElement);
          }
        }
        flag = flag && newflag;
      }

      flag = flag && is_edu_valid && is_publication_valid && is_manager_valid && exp_valid_check.valid;
      var doNotShowPageFlash = arguments[1];
      var flashId = arguments[2];
      var errorMessage = arguments[3];
      if (!doNotShowPageFlash) {
        if (!flag) {
          if( exp_valid_check.flash_message )
            ChronusValidator.ErrorManager.ShowPageFlash(flag, exp_valid_check.flash_message, flashId)
          else
            ChronusValidator.ErrorManager.ShowPageFlash(flag, errorMessage || jsCommonTranslations.requiredFieldMissing, flashId)
        }
        else {
          ChronusValidator.ErrorManager.ClearPageFlash();
        }
      }
      if(flag) {
        if (arguments.length > 1 && additionalArgs.successCb)
          additionalArgs.successCb(additionalArgs.ele);
      }
      else {
        if (arguments.length > 1 && additionalArgs.failureCb)
          additionalArgs.failureCb(additionalArgs.ele);
      }

      return flag;
    },

    validateForum: function(flashId){
      jQuery(".cjs_forun_submit").click(function() {
        return RequiredFields.validate(false, false, flashId);
      });
    },

    checkEducationExperienceExist: function(element, currentElement){
        if ((jQuery("#"+element + " .inner_rounded_section").length)){
            ChronusValidator.ErrorManager.HideFieldError(currentElement);
            return true;
        }
        else{
            ChronusValidator.ErrorManager.ShowFieldError(currentElement);
            return false;
        }
    },

    checkEducationValid:function(element){
        var educations;
        educations = jQuery("#"+element);
        var valid = false;
        for(j = 0; j < educations.length; j ++) {
            var education = jQuery(educations[j]);
            // Check whether validation is required (at least one field should be filled)
            var school_name = education.find('.school_name').val();
            var degree = education.find('.degree').val();
            var major = education.find('.major').val();
            var graduation_year = education.find('.graduation_year').val();

            if(!(degree.blank() && major.blank() && graduation_year.blank() && school_name.blank()))
                valid = true;
        }

        if(valid)
            ChronusValidator.ErrorManager.HideFieldError(educations.find(jQuery('.inner_rounded_section')));
        else
            ChronusValidator.ErrorManager.ShowFieldError(educations.find(jQuery('.inner_rounded_section')));
        return valid;
    },

    checkExperienceValid:function(element){
        var experiences;
        experiences = jQuery("#"+element);
        var valid = false;
        for(j = 0; j < experiences.length; j ++) {
            var experience = jQuery(experiences[j]);
            // Check whether validation is required (at least one field should be filled)
            var company = experience.find('.company').val();
            var job_title = experience.find('.job_title').val();
            var start_year = experience.find('.start_year').val();
            var end_year = experience.find('.end_year').val();

            if(!(job_title.blank() && start_year.blank() && end_year.blank() && company.blank()))
                valid = true;
        }

        if(valid)
            ChronusValidator.ErrorManager.HideFieldError(experiences.find(jQuery('.inner_rounded_section')));
        else
            ChronusValidator.ErrorManager.ShowFieldError(experiences.find(jQuery('.inner_rounded_section')));
        return valid;
    },

    checkPublicationValid:function(element){
        var publications = jQuery("#"+element);
        var valid = false;
        publications.each(function() {
          if(!jQuery(this).find('.title').val().blank() ) {
            valid = true;
          }
        });

        if(valid) {
          ChronusValidator.ErrorManager.HideFieldError(publications.find(jQuery('.inner_rounded_section')));
        }
        else {
          ChronusValidator.ErrorManager.ShowFieldError(publications.find(jQuery('.inner_rounded_section')));
        }
        return valid;
    },

    checkManagerValid:function(element){
      var manager = jQuery("#"+element);
      var valid = true;
      manager.find('input').each(function() {
        if(jQuery(this).val().blank() ) {
          valid = false;
        }
      });

      if(valid) {
        ChronusValidator.ErrorManager.HideFieldError(manager.find(jQuery('.inner_rounded_section')));
      }
      else {
        ChronusValidator.ErrorManager.ShowFieldError(manager.find(jQuery('.inner_rounded_section')));
      }
      return valid;
    },

    checkNonMultiInputCase: function(element){
      element = jQuery(element);
      if((element.val().blank() || element.val() == arguments[1])) {
        ChronusValidator.ErrorManager.ShowFieldError(element);
        return false;
      } else {
        ChronusValidator.ErrorManager.HideFieldError(element);
        return true;
      }
      return !element.val().blank();
    },

  checkMatrixAnswerValid: function(element){
    var questionContainer = jQuery("." + element + ":visible");
    var ratedRowsCount = questionContainer.find("input[type='radio']:checked").length;
    var totalRowsCount = questionContainer.find(".cjs_rating_question_label").length;

    if(ratedRowsCount == totalRowsCount){
      ChronusValidator.ErrorManager.HideFieldError(questionContainer);
      return true;
    }else{
      ChronusValidator.ErrorManager.ShowFieldError(questionContainer);
      return false;
    }
  },

  checkMultiInputCase: function(element){
    element = jQuery(element);
    var ele_id = element.attr('id');
    var checkBoxElements = jQuery("div#" + ele_id + " input[type='checkbox']");
    var radioButtonElements = jQuery("div#" + ele_id + " input[type='radio']");
    if(checkBoxElements.length){
      return this.checkMultiSelectCase(element, checkBoxElements);
    } else if (radioButtonElements.length) {
      return this.checkMultiSelectCase(element, radioButtonElements);
    } else {
      var inputBoxElements = jQuery("div#" + ele_id + " input[type='text']");
      return this.checkMultiTextCase(element, inputBoxElements);
    }
  },

  checkMultiTextCase: function(element, inputElements){
    element = jQuery(element);
    var atleastOneFilled = false;

    for(j = 0; j < inputElements.length; j++){
      atleastOneFilled = atleastOneFilled || !jQuery(inputElements[j]).val().blank();
    }

    if(atleastOneFilled){
      ChronusValidator.ErrorManager.HideFieldError(element);
    }
    else{
      ChronusValidator.ErrorManager.ShowFieldError(element);
    }

    return atleastOneFilled;
  },

  validateFile: function(scope, additionalArgs){
      var fieldsArray = this.getFieldsarray(scope);
      var flag = true;
      for(i = 0; i < fieldsArray.length; i++){
        var currentElement = jQuery('#' + fieldsArray[i]);
        var newflag = null;
        var ele_id = currentElement.attr('id');
        if(currentElement != null && jQuery("input#" + ele_id).attr('type') == "file") {
          if(!currentElement.val()){
              var fileElements = jQuery("input#" + ele_id);
              var fileOrdered = true
              newflag = RequiredFields.checkMultiFileCase(currentElement, fileElements);
          }
        }
        flag = flag && newflag;
      }

      var doNotShowPageFlash = arguments[1];
      var flashId = arguments[2];
      var errorMessage = arguments[3];
      if (!doNotShowPageFlash) {
        if (!flag && fileOrdered) {
            ChronusValidator.ErrorManager.ShowPageFlash(flag, errorMessage || jsCommonTranslations.requiredFieldMissing, flashId)
        }
        else {
          ChronusValidator.ErrorManager.ClearPageFlash();
        }
      }
      if(flag) {
        if (arguments.length > 1 && additionalArgs.successCb)
          additionalArgs.successCb(additionalArgs.ele);
      }
      else {
        if (arguments.length > 1 && additionalArgs.failureCb)
          additionalArgs.failureCb(additionalArgs.ele);
      }

      return flag;
    },


  checkMultiFileCase: function(element, inputElements){
    element = jQuery(element);
    var atleastOneFilled = false;

    for(j = 0; j < inputElements.length; j++){
      atleastOneFilled = atleastOneFilled || !jQuery(inputElements[j]).val().blank();
    }

    if(atleastOneFilled){
      ChronusValidator.ErrorManager.HideFieldError(element);
    }
    else{
      ChronusValidator.ErrorManager.ShowFieldError(element.parents().first());
    }

    return atleastOneFilled;
  },

  checkMultiSelectCase: function(element, inputElements){
        element = jQuery(element);
        var atleastOneChecked = false;

        for(j = 0; j < inputElements.length && !atleastOneChecked; j++){
           atleastOneChecked = atleastOneChecked || jQuery(inputElements[j]).is(':checked');
        }

        if(atleastOneChecked){
            ChronusValidator.ErrorManager.HideFieldError(element);
        }else{
            ChronusValidator.ErrorManager.ShowFieldError(element);
        }

        return atleastOneChecked;
    },

    clearError: function(id) {
      var field = jQuery('#' + id);
      ChronusValidator.ErrorManager.HideFieldError(field);
      field.val("");
    },

    // Just a convenience method for readability
    checkText: function(id) {
      return RequiredFields.checkNonMultiInputCase(id);
    }
}

var GroupUpdate = {
  selectedUserIds: [],

  initializeSelect2: function(oneToMany, wrapper, class_name){
    GroupUpdate.selectedUserIds = [];
    GroupUpdate.initializePlugin(oneToMany, wrapper, class_name);
    GroupUpdate.bindAccessibilityAttributes(wrapper);
  },

  bindAccessibilityAttributes: function(wrapper){
    if(wrapper == null)
      wrapper = ""
    jQuery(wrapper + " .select2-container").each(function(){
      var container = jQuery(this);
      var bubbleInput = container.find("ul input.select2-input");
      var regularDropDownSearch = container.find("div.select2-search input.select2-input");
      var controlLabel = container.closest(".form-group").find("label.control-label");
      if (controlLabel.length == 0){
        controlLabel = container.closest("form").find(".s2id_autogen_label");
      }
      var select2Id;
      if(bubbleInput.length > 0){
        select2Id = bubbleInput.attr("id");
        controlLabel.attr("for", select2Id);
      }
      else if(regularDropDownSearch.length > 0){
        select2Id = container.find(".select2-focusser.select2-offscreen").attr("id");
        controlLabel.attr("for", select2Id);
        var select2SearchId  = "chronus-select2-dropdown-input-search-custom-" + Math.floor(Math.random()*100000);
        regularDropDownSearch.attr("id", select2SearchId);
        container.append(jQuery("<label>", {
          "for": select2SearchId,
          "html": jsCommonTranslations.searchUsers,
          "class": "sr-only"
        }));
      }
    });
  },

  initializePlugin: function(oneToMany, wrapper, class_name){
    if(wrapper == null)
      wrapper = ""
    class_name = class_name || ".cjs-members-select2";
    jQuery(wrapper + class_name ).each(function(){
      var select2Element = jQuery(this);
      select2Element.select2({
        multiple: oneToMany,
        id: function(object){
          return object.nameEmail;
        },
        ajax: {
          url: select2Element.data("url"),
          data: function(term, page){
            return {
              search: term,
              page: page,
              userIdsToIgnore: GroupUpdate.selectedUserIds
            };
          },
          results: function(data, page){
            var moreResultsAvailable = (page * parseInt("<%= SELECT2_PER_PAGE_LIMIT %>")) < data.total_count;
            return {
              results: data.users,
              more: moreResultsAvailable
            };
          }
        },
        formatResult: function(result, container){
          removeFastClickForSelect2(container);
          return result.nameEmailForDisplay;
        },
        formatSelection: function(result){
          return result.nameEmailForDisplay;
        },
        initSelection: function(element, callback){
          var data = [];
          var initialValues = element.data("initial-values");
          jQuery(initialValues).each(function(index, content) {
            GroupUpdate.selectedUserIds.push(content.userId);
            data.push(content);
          });
          callback(oneToMany ? data : data[0]);
        }
      });
      jQuery(select2Element).on("select2-selecting", function(event){
        GroupUpdate.selectedUserIds.push(event.object.userId);
      });
      jQuery(select2Element).on("select2-removing", function(event){
        GroupUpdate.selectedUserIds = jQuery.grep(GroupUpdate.selectedUserIds, function(value){
          return value != event.choice.userId;
        });
      });
    });
  }
}

var GroupSelect2 = {
  initializePlugin: function(groupSelectedText, groupNotSelectedText){
    var select2Element = jQuery(".cjs-groups-select2");
    GroupSelect2.selectedGroupId = null;
    select2Element.select2({
      dropdownCssClass: "cui-progressive-select2-dropdown",
      multiple: false,
      id: function(object){
        return object.name;
      },
      ajax: {
        url: select2Element.data("url"),
        data: function(term, page){
          return {
            search: term,
            page: page,
            groupIdToIgnore: GroupSelect2.selectedGroupId
          };
        },
        results: function(data, page){
          return {
            results: data.groups,
            more: (page * parseInt("<%= SELECT2_PER_PAGE_LIMIT %>")) < data.total_count
          };
        }
      },
      formatResult: function(result, container){
        removeFastClickForSelect2(container);
        return result.name;
      },
      formatSelection: function(result){
        if(GroupSelect2.selectedGroupId != undefined)
          return groupSelectedText;
        return groupNotSelectedText;
      },
      initSelection: function(element, callback){
        callback(element.data("initial-value") || "");
      }
    });
    jQuery(select2Element).on("select2-selecting", function(event){
      GroupSelect2.selectedGroupId = event.object.groupId;
      jQuery.ajax({
        url: select2Element.data("onSelectUrl"),
        data: { group_id:  GroupSelect2.selectedGroupId, user_ids: GroupUpdate.selectedUserIds }
      });
    });
  }
}

var FavoritePreference = {
  initializeFavoriteRating: function(id, showLoader){
    var element = jQuery('.mentor_favorite_' + id);
    var score = element.find('.favorite_preference_score_' + id).val();
    var url = element.find('.favorite_preference_url_' + id).val();
    var type = element.find('.favorite_preference_method_type_' + id).val();
    var hint = element.find('.favorite_preference_hint_' + id).val();
    element.raty({
      numberMax : 1,
      hints: [hint],
      size: 26,
      score: score,
      path: '/assets/',
      starOn: 'star.png',
      starOff: 'star-off.png',
      click: function(score, evt) {
        FavoritePreference.reAnimate(element, "bounceIn", 1100);
        if(showLoader == "true"){
          jQuery("#loading_results").show();
        }
        jQuery.ajax({
          url: url,
          type: type
        });
      }
    });
  },

  reAnimate: function(element, animationClass, timeOut){
    if(timeOut == undefined){
      timeOut = 1100;
    }
    element.addClass(animationClass);
    setTimeout(function () { 
      element.removeClass(animationClass);
    }, timeOut);
  },

  showDelayedPopup: function(url){
    setTimeout(function(){
      jQueryShowQtip('#inner_content', 850, url,'',{modal: true});
    }, 500);
  },

  showDelayedMeetingPopup: function(url){
    closeQtip();
    setTimeout(function(){
      Meetings.renderMiniPopup(url);
    }, 500);
  },

  showDelayedGroupPopup: function(url){
    closeQtip();
    FavoritePreference.showDelayedPopup(url);
  }
}

var GuidancePopup = {
  animateGuidancePopup: function(){
    setTimeout(function () { 
      jQuery(".cjs_first_tip").slideDown(750,function(){
        jQuery(".cjs_slots_tip").slideDown(750,function(){
          if(jQuery(".cjs_favorites_tip").length == 0){
            jQuery(".cjs_get_started_and_close_button").slideDown(750);
          }
          jQuery(".cjs_favorites_tip").slideDown(750, function(){
            jQuery(".cjs_get_started_and_close_button").slideDown(750);
          });
        });
      });
    }, 750);
  },

  showGuidancePopup: function(path, messageTag){
    jQuery("#modal_show_guidance_popup").modal('show');
    GuidancePopup.animateGuidancePopup();
    TourFeature.trackTourTaken(path, messageTag);
  }
}


var IgnorePreference = {
  ignoreProfile: function(id){
    jQuery(document).off("click", ".mentor_ignore_" + id);
    jQuery(document).on("click", ".mentor_ignore_" + id, function(event){
      var element = jQuery(this);
      IgnorePreference.triggerIgnoreProfile(element, id)
    });
  },

  ignoreProfileInside: function(parentSelector, id){
    jQuery(parentSelector).on("click", ".mentor_ignore_" + id, function(event){
      var element = jQuery(this);
      IgnorePreference.triggerIgnoreProfile(element, id)
    });
  },

  triggerIgnoreProfile: function(element, id){
    var url = element.find('.ignore_preference_url_' + id).val();
    var type = element.find('.ignore_preference_method_type_' + id).val();
    jQuery.ajax({
      url: url,
      type: type
    });
  },

  setStyle: function(){
    if(jQuery(".cjs_profile_summary").hasClass("affix")){
      var offsetHeight = jQuery("#chronus_header_wrapper")[0].getBoundingClientRect().height
      if(typeof(jQuery(".cui_wob_banner")[0]) != 'undefined'){
        offsetHeight += jQuery(".cui_wob_banner")[0].getBoundingClientRect().height;
      }
      var element = jQuery(".cjs_profile_summary");
      var width = jQuery("#title_box").width();
      var left = jQuery("#sidebarLeft:visible").width();
      element.removeClass("no-padding");
      element.css('top', offsetHeight + 'px');
      element.outerWidth(width, true);
      element.css({left: left});
      IgnorePreference.hideContainerDetails();
    }
  },

  initalizeSticky: function(){
    var offsetHeight = jQuery("#chronus_header_wrapper")[0].getBoundingClientRect().height
    if(typeof(jQuery(".cui_wob_banner")[0]) != 'undefined'){
      offsetHeight += jQuery(".cui_wob_banner")[0].getBoundingClientRect().height;
    }
    var offsetTop = jQuery('.cjs_profile_summary').offset().top - offsetHeight;
    var originalWidth = jQuery('.cjs_profile_summary').width();
    var originalLeft = jQuery('.cjs_profile_summary').css("left");
    var top = jQuery('.cjs_profile_summary').css('top');
    var width = jQuery("#title_box").width();
    var left = jQuery("#sidebarLeft:visible").width();
    jQuery('.cjs_profile_summary').affix({
      offset: {
        top: offsetTop
      }
    });
    jQuery(".cjs_profile_summary").on("affix.bs.affix", function(){
      jQuery(this).css('top', offsetHeight + 'px');
      jQuery(this).outerWidth(width, true);
      jQuery(this).css({left: left});
      jQuery(this).removeClass("no-padding");
      IgnorePreference.hideContainerDetails();
    });
    jQuery(".cjs_profile_summary").on("affixed-top.bs.affix", function(){
      jQuery(this).css('top', top);
      jQuery(this).outerWidth(originalWidth, true);
      jQuery(this).css({left: originalLeft});
      jQuery(this).addClass("no-padding");
      IgnorePreference.showContainerDetails();
    });
  },

  hideContainerDetails: function(){
    jQuery(".hide_in_affixed_container").hide();
    if (jQuery("#profile_pic_to_change").hasClass("image_with_initial_dimensions_large"))
    {
      jQuery("#profile_pic_to_change").addClass("image_with_initial_dimensions_medium m-t-sm").removeClass("image_with_initial_dimensions_large");
    }
    else{
      jQuery("#profile_pic_to_change").addClass("cui_large_to_medium");
    }
    jQuery(".cjs_profile_summary_action_buttons").addClass("m-t-sm");
    jQuery(".cjs_profile_other_summary").addClass("m-t-sm");
    jQuery(".cjs_profile_summary_action_buttons.col-xs-12").find(".cjs_connect_button").removeClass("col-xs-12").addClass("col-xs-5 pull-right");
    jQuery(".cjs_profile_summary_action_buttons.col-xs-12").find(".cjs_profile_ignore_button").removeClass("col-xs-12").addClass("col-xs-5 pull-left");
  },

  showContainerDetails: function(){
    jQuery(".hide_in_affixed_container").show();
    if (jQuery("#profile_pic_to_change").hasClass("image_with_initial_dimensions_medium"))
    {
      jQuery("#profile_pic_to_change").removeClass("image_with_initial_dimensions_medium").addClass("image_with_initial_dimensions_large m-t-sm");
    }
    else{
      jQuery("#profile_pic_to_change").removeClass("cui_large_to_medium");
    }
    jQuery(".cjs_profile_summary_action_buttons").removeClass("m-t-sm");
    jQuery(".cjs_profile_other_summary").removeClass("m-t-sm");
    jQuery(".cjs_profile_summary_action_buttons.col-xs-12").find(".cjs_connect_button").addClass("col-xs-12").removeClass("col-xs-5 pull-right");
    jQuery(".cjs_profile_summary_action_buttons.col-xs-12").find(".cjs_profile_ignore_button").addClass("col-xs-12").removeClass("col-xs-5 pull-left");
  }
}

/* Groups#show */
var GroupsShow = {
  // Date upper limit for task due.
  DATE_LIMIT: new Date('Jan 01, 2030'),
  GA_DISMISS_PARAM: "dismiss",
  GA_SUBMIT_PARAM: "submit",
  GA_DRAFT_PARAM: "draft",
  GA_CONNECTION_SURVEY_CATEGORY: "Connection Survey",
  GA_MEETING_SURVEY_CATEGORY: "Meeting Feedback Survey",
  GA_OPT_LABEL: "Source",


  renderPopup: function(url){
    jQueryShowQtip('#inner_content', 850, url,'',{modal: true, largeModal: true});
  },

  getSurveyEventCategory: function(isMeetingSurvey){
    if(isMeetingSurvey){
      return GroupsShow.GA_MEETING_SURVEY_CATEGORY;
    }
    else{
      return GroupsShow.GA_CONNECTION_SURVEY_CATEGORY;
    }
  },

  trackDismissSurveyPopup: function(eventSource, sourceLabel, isMeetingSurvey){
    jQuery(".cjs_dismiss_survey_popup").on('click', function(event){
      event.preventDefault();
      chrGoogleAnalytics.addEvent(GroupsShow.getSurveyEventCategory(isMeetingSurvey), GroupsShow.GA_DISMISS_PARAM, sourceLabel, eventSource);
      closeQtip();
    });
  },

  trackSurveyAnswerSubmit: function(eventSource, sourceLabel, isMeetingSurvey){
    jQuery(document).on("submit", "#survey_answers_form", function(){
      var eventAction = GroupsShow.GA_SUBMIT_PARAM;
      if(jQuery('#cjs_draft_survey').val() == "true"){
        eventAction = GroupsShow.GA_DRAFT_PARAM;
      }

      if(eventAction == GroupsShow.GA_DRAFT_PARAM || (RequiredFields.validate('survey_answers') && eventAction == GroupsShow.GA_SUBMIT_PARAM)){
        chrGoogleAnalytics.addEvent(GroupsShow.getSurveyEventCategory(isMeetingSurvey), eventAction, sourceLabel, eventSource);
      }
    });
  },

  PrivateNote: {
    toggleEdit: function(note_id) {
      if (jQuery('#edit_note_' + note_id).is(':visible')) {
        jQuery('#show_note_' + note_id).show();
        jQuery('#edit_note_' + note_id).hide();
      }
      else {
        jQuery('#show_note_' + note_id).hide();
        jQuery('#edit_note_' + note_id).show();
      }

      jQuery('#edit_note_form_' + note_id)[0].reset();
    },

    toggleEditAttachment: function(note_id) {
      if (jQuery('#remove_attachment_' + note_id).length) {
        if (jQuery('#remove_attachment_' + note_id).is(':checked')) {
          jQuery('#remove_attachment_box_' + note_id).hide();
          jQuery('#new_attachment_' + note_id).show();
        }
        else {
          jQuery('#remove_attachment_box_' + note_id).show();
          jQuery('#new_attachment_' + note_id).hide();
        }
      }
    },

    toggleAddEditAttachment: function(note_id) {
      if(jQuery("#attach_panel_" + note_id).is(":hidden")){
        jQuery("#new_attachment_" + note_id).css('color', '#999999');
        jQuery("#attach_panel_" + note_id).show();
      }
      else{
        GroupsShow.PrivateNote.cancelEditAttachment(note_id);
      }
    },

    cancelEditAttachment: function(note_id) {
      /* This hack to clear the input field in IE. element.clear() won't work */
      jQuery("#new_attachment_" + note_id).html(jQuery("#new_attachment_" + note_id).html());
      jQuery("#attach_panel_" + note_id).hide();
      jQuery("#new_attachment_" + note_id).css('color', '');
    },

    toggleAttachmentPanel: function() {
      if(jQuery("#pn_attach_panel").is(":visible")){
        GroupsShow.PrivateNote.hideNewAttachmentPanel();
      }
      else{
        jQuery("#pn_new_attachment").css('color', '#999999');
        jQuery("#pn_attach_panel").show();
      }
    },

    hideNewAttachmentPanel: function() {
      jQuery("#pn_attach_panel").hide();
      jQuery("#pn_new_attachment").css('color', '');
    }
  },

  validateEditMeetingDate: function() {
    var due_date_id = 'edit_meeting_form_date'
    var flash_id = 'meeting_edit_flash'
    if((!jQuery('#' + due_date_id).val()) || (jQuery('#' + due_date_id).val() == 'When')) {
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, meetingTranslations.invalidDate);
      return false;
    } else if(new Date(jQuery('#' + due_date_id).val()) > GroupsShow.DATE_LIMIT) {
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, meetingTranslations.dueDateOutOfRange);
      return false;
    }
  },

  validateTitleLogoForm: function(errorMessage) {
    jQuery("#edit_group_title_logo").submit(function(){
      var flash_id = "edit_title_logo_flash"

      var error = !RequiredFields.checkNonMultiInputCase(jQuery("#group_name"));
      if(error){
        ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, errorMessage);
        return false;
      } else {
        ChronusValidator.ErrorManager.ClearResponseFlash(flash_id);
        jQuery('#loading_image').show();
        return true;
      }
    });
  },

  sendOnloadRaRequest: function(requestUrl){
    jQuery(document).ready(function(){
      jQuery.ajax({
        url: requestUrl
      });
    });
  },

  loadEditNotificationPopup: function() {
    var url = jQuery("#cjs_notif_settings").attr("notif_popup_url");
    jQueryShowQtip("#group", 500, url, "", {modal: true});
  }
}

var GroupsIndex = {
  toggleReason: function(groupId) {
    VIEW_DETAILS = 'view details';
    HIDE_DETAILS = 'hide details';

    if (jQuery('#view_reason_' + groupId).html(VIEW_DETAILS)) {
      jQuery('#view_reason_' + groupId).html(HIDE_DETAILS);
    } else {
      jQuery('#view_reason_' + groupId).html(VIEW_DETAILS);
    }

    jQuery('#reason_row_' + groupId).toggle();
  }
}

/**
* This function is used to validate whether the reason is empty or not
*/
var ReasonForReject = {
  validate: function(id){
    return (RequiredFields.checkNonMultiInputCase(jQuery('#' + id)));
  },
  clear: function(id) {
    RequiredFields.clearError(id);
  }
}

/* This function is to validate whether the mentoring period is empty or not */
var RenewalMentoringPeriod = {
  validate: function(reason_id, expiry_date_id, message, flashId){
    var reason_element = jQuery('#' + reason_id);
    var expiry_date_element = jQuery('#' + expiry_date_id);
    ChronusValidator.ErrorManager.ApplyFieldStatus(!reason_element.val().blank(), reason_element);
    ChronusValidator.ErrorManager.ApplyFieldStatus(!expiry_date_element.val().blank(), expiry_date_element);
    return (!reason_element.val().blank() && DateValidator.validateDate(expiry_date_id, flashId, true));
  },
  clear: function(reason_id, expiry_date_id, defaultExpDate, flashId) {
    RequiredFields.clearError(reason_id);
    jQuery('#'+reason_id).val('')
    RequiredFields.clearError(expiry_date_id);
    jQuery('#'+expiry_date_id).val(defaultExpDate);
    ChronusValidator.ErrorManager.ClearResponseFlash(flashId);
  }
}

/**
 * JS related to edit picture page.
 */
var EditPicture = {
    /**
   * Toggles the upload picture method between local image and remote url.
   *
   * @param choice 0 refers to local picture upload, and 1 to
   * @param view  whether the current page is 'Add mentor profile' or edit picture
   *              page.
   */
    togglePicUploadMethod : function(choice, view) {
        if(choice == 0) {
            jQuery('#local_image').show();
            jQuery('#remote_image').hide();
            jQuery('#profile_picture_image_url').val('');
        } else {
            jQuery('#remote_image').show();
            jQuery('#local_image').hide();
            jQuery('#profile_picture_image').val('');
        }
    },

    validate: function(uploadPictureOrLinkText) {
        if (!jQuery("#profile_picture_image").val() && !jQuery("#profile_picture_image_url").val()) {
            ChronusValidator.ErrorManager.ShowFieldError(jQuery("#profile_picture_image"));
            ChronusValidator.ErrorManager.ShowFieldError(jQuery("#profile_picture_image_url"));
            ChronusValidator.ErrorManager.ShowPageFlash(false, uploadPictureOrLinkText);
            return false;
        }
    }
}

var QaAnswer = {
  validateAndPost : function(message) {
    jQuery(".cjs_new_qa_answer_form").on("submit", function(){
      var contentElement = jQuery(this).find(".cjs_qa_answer_content");
      if(!RequiredFields.checkNonMultiInputCase(contentElement)){
        ChronusValidator.ErrorManager.ShowResponseFlash("cjs_qa_answer_flash", message);
        return false;
      }
      return true;
    });
  },

  markHelpful: function(url, loaderContent, id){
    var buttonId = "#qa_answer_helpful_action_" + id;

    jQuery.ajax({
      url: url,
      type: 'POST',
      beforeSend: function(){
        jQuery(buttonId).html(loaderContent);
      }
    });
  },

  openAddNewQuestionPopup: function(){
    jQuery(".cjs_ask_question_button").click();
  }
}

function hideIfExists(id){
    jQuery('#' + id).hide();
}

function removeIfExists(id){
    if(jQuery('#' + id).length){
        jQuery('#' + id).remove();
    }
}

var QuestionForm = {
  validateSummary: function(message){
    jQuery(".cjs_new_qa_question_form").on("submit", function(){
      var questionSummary = jQuery(this).find(".cjs_new_qa_question_summary");

      if(!RequiredFields.checkNonMultiInputCase(questionSummary)){
        ChronusValidator.ErrorManager.ShowResponseFlash("cjs_new_qa_question_flash", message);
        return false;
      }
      return true;
    });
  }
}

var Article = {
  closeNewListItemPanel: function() {
    jQuery(document).on("click", ".cjs_close_icon", function(){
      jQuery(this).parent().closest('.article_list_item').remove();
      if (jQuery(".article_list_item").length == 0) {
        jQuery("#empty_list").show();
      }
    });
  },

  setStatus: function(status) {
    jQuery('#article_content_status').val(status);
    return true;
  }
}

/**
 * This function checks whether the given mail id has a proper format or not.
 * @param {Object} emailId - The mail id that needs to be checked whether it has a proper format.
 * It only allows a set of domain names that include:
 * com|org|net|edu|gov|mil|biz|info|mobi|name|aero|jobs|museum|host|int|coop|travel
 * Output is a bool.
 * While updating this regex for validation, please also update the backend side validation code, regex for which, can be found
 * in in appconstants.rb under the module RegexConstants and authentication.rb
 */
function validateDomainPartSyntax(domain)
{
  var domainParts = domain.toLocaleLowerCase().split('.');
  if (domainParts.length <=1)
    return false;
  for(var i = 0; i < domainParts.length; i++ ){
    var domainPart = domainParts[i];
    if (!domainPart || !/^[a-z0-9-]+$/.test(domainPart) || domainPart[0] == '-' || domainPart[domainPart.length - 1] == '-'){
      return false;
    }
  }
  var topLevelDomain = domainParts[domainParts.length - 1];
  if (topLevelDomain.length < 2 || !/[a-z\-]/.test(topLevelDomain))
    return false;
  return true;
}

function verifyEmailFormat(emailId) {
  emailId = String(emailId).trim();
  var atIndex = emailId.lastIndexOf('@');
  if (atIndex == -1)
    return false;
  var domain = emailId.substring(atIndex + 1);
  var local = emailId.substring(0, atIndex);
  if (!domain || !local || domain.length > '<%= EmailValidation::DOMAIN_LENGTH_LIMIT %>' || local.length > '<%= EmailValidation::LOCAL_LENGTH_LIMIT %>')
    return false;
  return validateLocalPartSyntax(local) && validateDomainPartSyntax(domain);
}

function validateLocalPartSyntax(local){
  var in_quoted_pair = false;
  var in_quoted_string = false;
  for(var i = 0; i < local.length; i ++){
    var charCode = local.charCodeAt(i);
    if (in_quoted_pair){
      in_quoted_pair = false;
      continue;
    }
    if (charCode == 92 && i < local.length - 1){
      if(!in_quoted_string){
        return false;
      }
      in_quoted_pair = true;
      continue;
    }
    if (charCode == 34){
      in_quoted_string = !in_quoted_string;
      continue;
    }
    if (/[a-z0-9]/i.test(local[i]) || /[\!\#\$\%\&\'\*\-\/\=\?\+\-\^\_\`\{\|\}\~]/.test(local[i]))
      continue;
    if (charCode == 46){
      if (i == 0 || i == local.length - 1)
        return false;
      if (local.charCodeAt(i+1) != 46)
        continue;
    }
    return false;
  }
  if (in_quoted_string)
    return false;
  return true;
}

var NewMember = {

  openRequiredFieldSectionHeaders: function(scope){
    if (jQuery('#user_member_last_name').val() && jQuery('#user_member_first_name').val()) {
      var requiredFields = RequiredFields.scopedFieldIds[scope];
      if(requiredFields){
        for(var i=0; i<requiredFields.length; i++){
          var fieldSectionContentDomId = jQuery("#" + requiredFields[i]).closest(".well.merge-top.no-margin.no-border").attr("id");
          var wordsListInSectionContentId = fieldSectionContentDomId.split("_");
          wordsListInSectionContentId.pop();
          var fieldSectionHeaderIdPrefix = wordsListInSectionContentId.join("_") + "_";
          wordsListInSectionContentId.push("header");
          var fieldSectionHeaderId = wordsListInSectionContentId.join("_");

          ChronusEffect.ExpandSection(fieldSectionHeaderIdPrefix, [], false, true);
          if(jQuery("#" + fieldSectionHeaderId).hasClass("cjs_last_section_header") && jQuery("#" + fieldSectionContentDomId).css('display') != "none"){
            jQuery("#" + fieldSectionHeaderId).parent().removeClass("unstacked");
          }
        }
      }
    }
  },

  validateEduExpSection: function() {
      var educations_valid = EditUser.validateEducation(jQuery('.inner_rounded_section .education'));
      var experiences_validity_check = EditUser.validateExperience(jQuery('.inner_rounded_section .experience'));
      var publication_valid = EditUser.validatePublication(jQuery('.inner_rounded_section .publication'));
      var manager_valid = EditUser.validateManager(jQuery('.inner_rounded_section .manager'));

      var is_valid = educations_valid && publication_valid && manager_valid && experiences_validity_check.valid;

      if(is_valid) {
        ChronusValidator.ErrorManager.ClearPageFlash();
      } else {
        if (experiences_validity_check.flash_message)
          ChronusValidator.ErrorManager.ShowPageFlash(false, experiences_validity_check.flash_message);
        else
          ChronusValidator.ErrorManager.ShowPageFlash(false, jsCommonTranslations.fillAppropriateValues);
          scroll(0,0);
      }

      return is_valid;
    },

    /**
    * This function performs client-side validation of the 'Add Mentor Profile'
    * page.
    */
    validate: function(existingMember){
        var status = true;
        var experiences_valid_check;
        var role = jQuery('.cjs_role_name_check_box:checked').map(function() {return this.value;}).get().join(",")

        if(!existingMember){
          if (!jQuery('#user_member_last_name').val()) {
              status = false;
              ChronusValidator.ErrorManager.ApplyFieldStatus(false, jQuery('#user_member_last_name'));
          } else {
              ChronusValidator.ErrorManager.ApplyFieldStatus(true, jQuery('#user_member_last_name'));
          }

          if (!jQuery('#user_member_first_name').val()) {
              status = false;
              ChronusValidator.ErrorManager.ApplyFieldStatus(false, jQuery('#user_member_first_name'));
          } else {
              ChronusValidator.ErrorManager.ApplyFieldStatus(true, jQuery('#user_member_first_name'));
          }
        }

        status = status && RequiredFields.validate(role, false);

        if (status) {
            jQuery('#loading_image').show();
        }else {
          ChronusValidator.ErrorManager.ShowPageFlash(status, jsCommonTranslations.fillAppropriateValues);
          scroll(0,0);
        }

        return status;
    },

    handleAddUserClickOnNext: function(newmembershipUrl, emailvalidationUrl, separator) {
      jQuery("#cjs_add_user_next").on('click', function() {
        var emailId = jQuery(".cjs_add_user_email").get(0).value.trim();
        var selectedRoles = collectVals(jQuery(".cjs_role_name_check_box:checked")).join(separator);
        ChronusValidator.ErrorManager.ClearPageFlash();
        if (emailId != '' && selectedRoles != ''){
          jQuery.ajax({
            url: emailvalidationUrl,
            data: {'email': emailId},
            success: function(status){
              if(status["is_valid"]){
                jQuery.ajax({
                  url: newmembershipUrl,
                  data: {'role': selectedRoles, 'email': emailId},
                  beforeSend: function(){
                    jQuery('#more_fields_loading').show();
                  },
                  complete: function(){
                    jQuery('#more_fields_loading').hide();
                  }
                });
              }
              else{
                ChronusValidator.ErrorManager.ShowPageFlash(false, status["flash_message"]);
              }
            }
          });
        }
        else{
          ChronusValidator.ErrorManager.ShowPageFlash(false, jsCommonTranslations.requiredFieldMissing);
        }
      })
    },

    handleClearEmail: function(is_email_filled){
      if(is_email_filled){
        jQuery(".cjs_add_user_email").attr("disabled", true);
        jQuery(".cjs_email_field_container").removeClass("add_user_email_input_field_without_cancel");
        jQuery(".cjs_email_field_container").addClass("add_user_email_input_field_with_cancel");
        jQuery("span.cjs_clear_email").removeClass("hide");
        jQuery(".cjs_clear_email").css("background-color", jQuery(".cjs_add_user_email").css("background-color"));
        jQuery(".cjs_add_user_initial_form").hide();
      }
    },

    handleRoleChange: function(newmembershipUrl, separator) {
      jQuery(".cjs_role_name_check_box").on('change', function() {
        if(jQuery(".cjs_add_user_email").prop("disabled")){
          var emailId = jQuery(".cjs_add_user_email").get(0).value.trim();
          var selectedRoles = collectVals(jQuery(".cjs_role_name_check_box:checked")).join(separator);
          jQuery.ajax({
              url: newmembershipUrl,
              data: {'role': selectedRoles, 'email': emailId},
              beforeSend: function(){
                  jQuery('#more_fields_loading').show();
              },
              complete: function(){
                  jQuery('#more_fields_loading').hide();
              }
          });
        }
      })
    }
}

var NewForumPost = {
  validateForm: function(errorMessage) {
    jQuery(".cjs_new_post_form").on("submit", function() {
      var postBody = jQuery(this).find(".cjs_new_post_body");

      if(RequiredFields.checkNonMultiInputCase(postBody)) {
        ChronusValidator.ErrorManager.ClearResponseFlash("");
        jQuery("#loading_results").show();
        return true;
      } else {
        ChronusValidator.ErrorManager.ShowResponseFlash("", errorMessage);
        return false;
      }
    });
  }
}

var NewForumTopic = {
  validateForm: function(form_class, id, cke_id) {
    jQuery("." + form_class).on("submit", function() {
      var isTitlePresent = RequiredFields.checkNonMultiInputCase(jQuery(this).find(".cjs_new_topic_title"));
      var isBodyPresent = (CKEDITOR.instances[id].getData().replace(/<br \/>\n$/, '').length > 0);
      var bodyEditor = jQuery(this).find(cke_id);

      if(isBodyPresent) {
        ValidateRequiredFields.hideFieldError(bodyEditor);
      } else {
        ValidateRequiredFields.showFieldError(bodyEditor);
      }
      var isValid = isTitlePresent && isBodyPresent;
      if(isValid)
        jQuery("#loading_results").show();
      return isValid;
    });
  },

  addTopicForm: function(id){
    jQuery(document).on("click", ".cjs-new-topic-link-"+id, function(){
      jQuery("#cjs_new_topic_modal_"+id).modal("show");
    });
  }
}

var NewReply = {
  toggleAttachmentPanel: function(id){
    var replyMessageForm = jQuery("#reply_message_" + id);
    var newAttachmentLink = replyMessageForm.find("#new_attachment");
    var attachmentPanel = replyMessageForm.find("#attach_panel");

    if(attachmentPanel.is(":hidden")){
      newAttachmentLink.addClass("muted");
      attachmentPanel.show();
    }
    else{
      attachmentPanel.hide();
      newAttachmentLink.removeClass("muted");
    }
  }
}

var Forum = {
  openTopicInSidePane: function(id){
    jQuery(document).ready(function(){
      jQuery('#cjs_topics_list .topic_' + id).click();
    });
  }
}

var NewScrap = {
  initialize: function(id){
    scrapForm = jQuery("#cjs_new_ajax_message_form");
    newScrapLink = jQuery(".cjs-new-scrap-link-"+id);
    attachmentLink = scrapForm.find(".cjs-scrap-attachment-link");
    attachmentPanel = scrapForm.find(".cjs-scrap-attach-panel");

    jQuery(document).ready(function(){
      NewScrap.addScrapForm(id);
      NewScrap.validateScrapForm();
    });
  },

  validateScrapForm: function(){
    jQuery("#cjs_new_ajax_message_form").on("submit", function(){
      var subject = scrapForm.find("#scrap_subject");
      var content = scrapForm.find("#scrap_content");
      var subjectCheck = RequiredFields.checkNonMultiInputCase(subject);
      var contentCheck = RequiredFields.checkNonMultiInputCase(content);
      var isValid = subjectCheck && contentCheck;
      if(isValid)
        jQuery("#loading_results").show();
      return isValid;
    });
  },

  addScrapForm: function(id){
    jQuery(document).on("click", ".cjs-new-scrap-link-"+id, function(){
      jQuery("#cjs_new_message_modal_"+id).modal("show");
    });
  },

  resetScrapForm: function(){
    var attachScrap = attachmentPanel.find("#scrap_attachment");
    var messageBox = scrapForm.find(".cjs-message-box");

    attachScrap.replaceWith(attachScrap.clone(true));
    messageBox.val("");
    messageBox.css("height", "");
    jQuery("#cjs_scrap_error_message").hide();
    scrapForm.find(".remove-file").click();
  }
}

var OrganizationSetupSettings = {
  orgSetupSolutionPackOptions: function(solution_pack){
    jQuery('#creation_way_' + solution_pack).on('change', function(){
      if (jQuery('#creation_way_' + solution_pack).is(":checked"))
      {
        jQuery('#profile_questions_import').hide();
        jQuery('.cui_file_chooser').show();
        jQuery('#cjs_program_engagement_type').hide();
        jQuery('#cjs_custom_term_container_org_setup').hide();
      }
    });
  },

  orgSetupManualOptions: function(manual){
    jQuery('#creation_way_' + manual).on('change', function(){
      if (jQuery('#creation_way_' + manual).is(":checked"))
      {
        jQuery('.cui_file_chooser').hide();
        jQuery('#profile_questions_import').show();
        subscription = jQuery('#program_organization_subscription_type').val();
        if (subscription != '0'){
          jQuery('#cjs_program_engagement_type').show();
        }
        jQuery('#cjs_custom_term_container_org_setup').show();
      }
    });
  },

  handleRegionSelection: function(){
    jQuery("#region").change(function(){
      var subdomains = jQuery(this).data("subdomain-mapping");
      var errorMessages = jQuery(this).data("error-message-mapping");
      var selectedRegion = jQuery(this).val();
      var displayMessages = jQuery(this).data("display-message-mapping");
      if(selectedRegion.blank())
        return false;
      if(subdomains[selectedRegion] == window.location.hostname){
        toastr.clear();
        jQuery("#modal_select_region").modal("hide");
        jQuery("#cjs_selected_region_alert").html(displayMessages[selectedRegion]).show();
      }
      else
        ChronusValidator.ErrorManager.ShowPageFlash(false, errorMessages[selectedRegion]);
    });
  }
}

var ProgramSettings = {

  useChronusDefaultColor: function(){
    var element = jQuery('.cui_email_theme_override')
    var emailThemePreviousColor = element.val();
    jQuery('.cui-use-chronus-default').on('change', function(){
      if (jQuery(this).is(":checked")){
        emailThemePreviousColor = element.val()
        ProgramSettings.useChronusDefaultColorSetColor(element, '<%= EmailTheme::DEFAULT_PRIMARY_COLOR %>')
      }
      else{
        if (element.val() == '<%= EmailTheme::DEFAULT_PRIMARY_COLOR %>'){
          ProgramSettings.useChronusDefaultColorSetColor(element, emailThemePreviousColor)
        }
      }
    });
  },

  useChronusDefaultColorSetColor: function(element, color){
    element.val(color)
    element.parent().find('.minicolors-swatch').find('.minicolors-swatch-color').css('background-color', color)
  },

  setupPageSolutionPackOptions: function(solution_pack){
    jQuery('#creation_way_' + solution_pack).on('change', function(){
      if (jQuery('#creation_way_' + solution_pack).is(":checked"))
      {
        jQuery('.cui_file_chooser').show();
        jQuery('.cui_choose_engagement_type').hide();
        ProgramSettings.hideCareerBasedSettings();
      }
    });
  },

  setupPageManualOptions: function(manual){
    jQuery('#creation_way_' + manual).on('change', function(){
      if (jQuery('#creation_way_' + manual).is(":checked"))
      {
        jQuery('.cui_choose_engagement_type').show();
        jQuery('.cui_file_chooser').hide();
      }
    });
  },

  selectSetupOptions: function(){
    jQuery(document).ready(function() {
      if(jQuery("input[name=creation_way]").length == 1){
        jQuery("input[name=creation_way]")[0].click();
      }
    });
  },

  subscriptionChange: function(hideFor){
    jQuery('#program_organization_subscription_type').on('change', function(){
      ProgramSettings.showEngagementTypeBasedOnSubscription(hideFor);
    });
  },

  showEngagementTypeBasedOnSubscription: function(hideFor){
    subscription = jQuery('#program_organization_subscription_type').val();
    if ((subscription == hideFor) || jQuery('#creation_way_2').is(":checked")){
      jQuery('#cjs_program_engagement_type').hide();
    }
    else{
      jQuery('#cjs_program_engagement_type').show();
    }
  },

  showCareerBasedOptions: function(hideFor){
    jQuery('.cjs_engagement_type').on('change', function(){
      if (jQuery(this).val() == hideFor){
        jQuery('.cjs_career_mentoring_options').hide();
        ProgramSettings.hideCareerBasedSettings();
      }
      else{
        jQuery('.cjs_career_mentoring_options').show();
        if (jQuery('.cjs_select_ongoing_mentoring').is(":checked")){
          ProgramSettings.showCareerBasedSettings();
        }
      }
    });
  },

  ongoingDetailedSetting: function(){
    jQuery('.cjs_select_ongoing_mentoring').on('change', function(){
      if (jQuery(this).is(":checked")) {
        ProgramSettings.showCareerBasedSettings();
      }
      else{
        ProgramSettings.hideCareerBasedSettings();
      }
    });
  },

  showCareerBasedSettings: function() {
    jQuery('#career_based_project_specific_settings').slideDown();
  },

  hideCareerBasedSettings: function() {
    jQuery('#career_based_project_specific_settings').slideUp();
  },

  handleMentorRequestStyleFirstTime: function(){
    jQuery('#cjs_mentee_can_request_mentor').on('change', function(){
      if(jQuery(this).is(":checked")){
        jQuery('.cjs_mentee_requests_mentor').show();
      }
      else{
        jQuery('.cjs_mentee_requests_mentor').hide();
      }
    });
  },

  confirmToggleRequestStyle: function(ele_id, mentor_style_set, confirmMsg) {
    if (mentor_style_set == 'true')
      {
        chronusConfirm(confirmMsg);
      }
  },

  toggleProposeSettingCheckboxTree: function(hasProposedGroups){
    jQuery(".cjs_group_proposals_parent").click(function() {
      var elements = jQuery(this).closest('.controls').find(".cjs_group_proposals_child");
      if(this.checked){
        jQuery(elements).attr("checked", false);
        if(hasProposedGroups){
          var element = jQuery(this).closest('.controls').find(".cjs_group_proposals_child.cjs_approval_needed");
        }
        else{
          var element = jQuery(this).closest('.controls').find(".cjs_group_proposals_child.cjs_no_approval_needed");
        }
        jQuery(element).attr("checked", this.checked);
      }
      else{
       jQuery(elements).attr("checked", false);
      }
    });

    jQuery(".cjs_group_proposals_child").click(function() {
      element = jQuery(this).closest('.controls').find(".cjs_group_proposals_parent");
      jQuery(element).attr("checked", true);
    });
  },

  toggleCheckboxTree: function(){
    jQuery(".cjs_program_membership_setting_parrent").click(function() {
      jQuery(this).closest('.controls').find(".cjs_program_membership_setting_child").attr("checked", this.checked);
    });

    jQuery(".cjs_program_membership_setting_child").click(function() {
      var rootElement = jQuery(this).closest('.controls');
      var childernPresent = rootElement.find('.cjs_program_membership_setting_child:checked').length > 0
      rootElement.find(".cjs_program_membership_setting_parrent").attr("checked", childernPresent);
    });

    jQuery(".cjs_apply_to_join_parent").click(function() {
      elements = jQuery(this).closest('.controls').find(".cjs_apply_to_join_child");
      if(this.checked){
        jQuery(elements).attr("checked", false);
        element = elements[0];
        jQuery(element).attr("checked", this.checked);
      }
      else{
       jQuery(elements).attr("checked", false);
      }
      ProgramSettings.showMultipleRolesOptionMethod();
    });

    jQuery(".cjs_apply_to_join_child").click(function() {
      var rootElement = jQuery(this).closest('.controls');
      var childernPresent = rootElement.find('.cjs_apply_to_join_child:checked').length > 0;
      rootElement.find(".cjs_apply_to_join_parent").attr("checked", childernPresent);
      ProgramSettings.showMultipleRolesOptionMethod();
    });
  },

  showMultipleRolesOption: function(){
    jQuery(".cjs_apply_to_join_child").on('click', function() {
      ProgramSettings.showMultipleRolesOptionMethod();
    });
  },

  showMultipleRolesOptionMethod: function(){
    var applyToJoinSelectedRolesCount = jQuery('.cjs_apply_to_join_child.cjs_membership_request:checked').length;
    var JoinDirectlyEligibilitySelectedRolesCount = jQuery('.cjs_apply_to_join_child.cjs_join_directly_with_eligibility:checked').length;
    var JoinDirectlySelectedRolesCount = jQuery('.cjs_apply_to_join_child.cjs_join_directly:checked').length;
    var JoinDirectlySsoSelectedRolesCount = jQuery('.cjs_apply_to_join_child.cjs_join_directly_sso:checked').length;
    if(applyToJoinSelectedRolesCount > 1 || JoinDirectlyEligibilitySelectedRolesCount > 1 || (JoinDirectlySsoSelectedRolesCount + JoinDirectlySelectedRolesCount) > 1){
      jQuery('#program_show_multiple_role_option').show();
    }
    else{
        jQuery('#program_show_multiple_role_option').hide();
    }
  },

  ConnectionLimitOption: function(){
    jQuery(document).on("click", ".cjs_connection_limit_actions", function(){
      var actionType = jQuery(this).data('action-type');
      jQuery('#program_apply_to_all_mentors').prop('checked', actionType);
      jQuery('#cjs_connection_limit_form').submit();
    });
  },

  ConnectionLimitPopup: function(event){
    jQuery(document).on("click", ".cjs_connection_limit_submit", function(){
      var data = jQuery('#program_default_max_connections_limit').data('value');
      var default_data = jQuery('#program_default_max_connections_limit').val();
      if(data == default_data){
        jQuery('#cjs_connection_limit_form').submit();
        return false;
      }
      else
      {
        jQuery('#modal_connection_limit_popup').modal('show');
        return false;
      }
    });
  },

  SlotConfigSetting: {
    setAllHiddenFieldValuesOnSubmit: function(){
      jQuery(document).on("click", ".cjs_slot_config_submit", function() {
        jQuery(".cjs_slot_config_container").each(function() {
          ProgramSettings.SlotConfigSetting.setHiddenFieldValue(jQuery(this));
        });
      });
    },

    setHiddenFieldValue: function (parentElement) {
      isConfigEnabled = parentElement.find(".cjs_slot_config_enabled input:checkbox").is(':checked');
      isConfigRequired = parentElement.find(".cjs_slot_config_required input:checkbox").is(':checked');
      slotConfigValue = isConfigEnabled ? (isConfigRequired ? "<%= RoleConstants::SlotConfig::REQUIRED %>" : "<%= RoleConstants::SlotConfig::OPTIONAL %>") : "0";
      parentElement.find(".cjs_hidden_slot_config").val(slotConfigValue);
    }
  },

  selectFeedbackSurvey: function(){
    jQuery(document).on("change", "#program_feedback_survey_id", function(){
      if(jQuery(this).val() == "new"){
        chrGoogleAnalytics.addEvent(SurveysGoogleAnalytics.GA_CATEGORY, SurveysGoogleAnalytics.GA_ACTION_NEW);
        window.location.href = jQuery(this).data("url");
        jQuery(this).val("");
      }
    });
  },

  handleAutoTerminateSetting: function(){
    var autoTerminateSelector = jQuery("#auto_terminate_id .cjs_auto_terminate_selector");
    var autoTerminateCheckBox = jQuery("#auto_terminate_id .cjs_auto_terminate_checkbox");
    autoTerminateCheckBox.on("click", function(){
      jQuery(this).is(":checked") ? autoTerminateSelector.show() : autoTerminateSelector.hide();
      autoTerminateSelector.prop("disabled", !jQuery(this).is(":checked"));
    });
  },

  handleClosureReasonsForm: function(){
    jQuery(document).on("click", ".cjs_add_new_closure_reason .cjs_remove_new_closure_reason", function(){
      jQuery(this).closest('.cjs_add_new_closure_reason').remove();
    });

    jQuery(document).on("blur", "#closure_reasons .cjs_group_closure_reason_text", function(){
      var closureReasonTextField = jQuery(this);
      var oldText = closureReasonTextField.data('value');
      var message = closureReasonTextField.data('message');
      var currentText = closureReasonTextField.val();
      if(!!message && currentText != oldText){
        chronusConfirm(message, function(){
          return false;
        }, function(){
          closureReasonTextField.val(oldText);
        })
      }
    });
  },

  handleSoftDeleteOnClosureReasons: function(id, message){
    var closureReasons = jQuery('#closure_reasons');
    var closureReasonFields = closureReasons.find("#cjs_group_closure_reason_" + id);
    var closureReasonDeleted = closureReasons.find("#cjs_group_closure_reason_is_deleted_" + id);
    chronusConfirm(message, function(){
      closureReasonFields.hide();
      closureReasonDeleted.val(true);
    }, function(){
      return false;
    })
  },

  handleAddNewReason: function(newClosureReason){
    var closureReasons = jQuery('#cjs_new_closure_reason');
    closureReasons.append(newClosureReason);
    var newClosureReasons = closureReasons.find(".cjs_add_new_closure_reason");
    jQuery.each(newClosureReasons, function(index, newReason){
      var newClosureReasonTextField = jQuery(newReason).find(".cjs_new_group_closure_reason");
      var newClosureReasonLabel = jQuery(newReason).find(".cjs_new_group_closure_reason_label");
      var newClosureReasonIsCompleted = jQuery(newReason).find(".cjs_new_group_closure_reason_completed");
      newClosureReasonTextField.attr('name', 'new_group_closure_reasons['+index+'][reason]');
      newClosureReasonIsCompleted.attr('name', 'new_group_closure_reasons['+index+'][is_completed]');
      newClosureReasonLabel.attr('for', 'new_group_closure_reasons['+index+'][reason]');
      newClosureReasonTextField.attr('id', 'new_group_closure_reasons['+index+'][reason]');
    });
  },

  showOngoingEngagementAdvancedOptions: function(){
    var engagementSettingsForm = jQuery('#cjs_edit_engagement_settings_form');
    var onGoingAdvancedOptions = engagementSettingsForm.find(".cjs_ongoing_advanced_options");
    var onGoingAdvanceOptionsForm = engagementSettingsForm.find(".cjs_ongoing_advanced_options_form");
    onGoingAdvancedOptions.on('click', function(){
      onGoingAdvancedOptions.hide();
      onGoingAdvanceOptionsForm.show();
    });
  },

  roleDescriptionEdit: function(roleName) {
    jQuery("#role_description_block_" + roleName).hide();
    jQuery("#role_description_edit_block_" + roleName).show();
    CkeditorConfig.initCkeditor("#program_role_description_" + roleName, {height: "100px", width: "640px"}, CkeditorConfig.minimalCkOptions());
  },

  membershipEligibilityAdvanceSetting: function(){
    jQuery(".cjs_membership_eligibility_advanced_setting_toggle").on('click', function() {
      jQuery('#cjs_membership_eligibility_advanced_setting').toggle();
      jQuery('#cjs_membership_eligibility_advanced_options').toggle();
    });
  }
}

var MentorSearch = {
  initializeNoMentorsResetFilters: function(){
    jQuery('.no_mentors').on('click', '.cjs-no-mentors-reset-filters', function(){
      MentorSearch.clearAllFilters();
    });
  },

  clearAllFilters: function(){
    var formState = BBQPlugin.buildFromState('');
    jQuery.bbq.pushState(formState);
  },

  handleAvailabilityFilter: function(filterFieldId) {
    jQuery(document).find('input[name=calendar_availability_default]').val('false');
    BBQPlugin.toggleStatusFilter(filterFieldId);
  },

  showLoading: function() {
    jQuery('#loading_results').show();
  },

  updatetAllChoices: function(questionId, isSelected) {
    questionPrefix = 'sfpq_' + questionId;

    // Get all choices for this question.
    allChoices = Element.getAllElementsById(
    'filter_pane', "^" + questionPrefix + "_.*", 'input');

    for (i = 0; i < allChoices.length; i++) {
      allChoices[i].checked = isSelected;
    }

    MentorSearch.applyFilters();
  },

  selectAllChoices: function(questionId) {
    MentorSearch.updatetAllChoices(questionId, true);
  },

  deSelectAllChoices: function(questionId) {
    MentorSearch.updatetAllChoices(questionId, false);
  },

  /*
   * Applies the currently selected filters
   */
  applyFilters: function(relevanceSortView) {
    isProgramOutcomesReportSearch = typeof isProgramOutcomesReportSearch !== 'undefined' ? isProgramOutcomesReportSearch : false;
    if(isProgramOutcomesReportSearch) {
      applyProfileFiltersOnOutcomesReport(true);
    } else {
      if(jQuery('#search_filter_form .page').length == 1) {
        if(jQuery('#search_filter_form .reset_page').val() == "true") {
          jQuery('#search_filter_form .page').val(1);
        } else {
          jQuery('#search_filter_form .reset_page').val(true);
        }
      }
      BBQPlugin.jQueryCreateBbqHash(relevanceSortView);
      return false;
    }
  },

  /**
   * Callback on selecting a location from autocomplete list.
   * Copies the selected location to $('search_filters_location_name').
   */
  updateSelectedLocation : function(element, selectedLocationItem) {
    jQuery('#search_filters_location_' + jQuery(element).attr('element_id') + '_name').val(selectedLocationItem["label"]);
  },

  /** Text fields in the filters section that have default text. We clear/set
   * the default text by looking up the elements in this array
   */
  textFilters: [],

  clearAllDefaultTexts: function() {
    for (i = 0; i < MentorSearch.textFilters.length; i++) {
      clearDefaultText(MentorSearch.textFilters[i][0], MentorSearch.textFilters[i][1]);
    }
  },

  setAllDefaultTexts: function() {
    for (i = 0; i < MentorSearch.textFilters.length; i++) {
      setDefaultText(MentorSearch.textFilters[i][0], MentorSearch.textFilters[i][1]);
    }
  },

  registerTextFilter: function(fieldElement, defaultText) {
    MentorSearch.textFilters.push([jQuery('#' + fieldElement), defaultText]);
  },

  /**
   *Clears the filter with the given <code>resetSuffix</code>
   */
  clearFilter: function(resetSuffix) {
    jQuery('#reset_filter_' + resetSuffix).trigger('click');
  }
}


function registerForGeneralSettingsCkeditorValidations(editor, proceedCallback, options){
  var allowTags = options ? options.allowTags : false;
  if (!allowTags) {
    CkeditorConfig.generalSettingsShowTagsWarning(editor);
  }
  if (allowTags || (CkeditorConfig.getCkeditorTags(editor.getData()).length == 0)) {
    InsecureContentHelper.generalSettingsShowCkeditorInsecureWarning(editor, proceedCallback);
  }
}

var BrowserWarning = {
  discardChanges: function(modalId) {
    var editor = CKEDITOR.instances['browser_warning_text'];
    if(editor) {
      editor.setData(jQuery('#program_organization_browser_warning').val());
    }
    jQuery("#cjs_add_browser_warning_link_popup").modal("hide");
  },

  update: function(editText) {
    var editor = CKEDITOR.instances['browser_warning_text'];
    registerForGeneralSettingsCkeditorValidations(editor, function(){
      var content = editor.getData();
      document.getElementById('cur_browser_warning').innerHTML = content; //Add the content to the tag using Javascript so that unsafe html scripts are not executed
      jQuery('#program_organization_browser_warning').val(content);
      BrowserWarning.show(editText);
      jQuery("#cjs_add_browser_warning_link_popup").modal("hide");
    });
  },

  show: function(editText) {
    jQuery('#no_browser_warning').hide();
    jQuery('#add_browser_warning_link').html(editText);
    jQuery('#cur_browser_warning').show();
    jQuery('#remove_browser_warning_link').show();
  }
}

var ProgramAgreement = {

  discardChanges: function() {
    var editor = CKEDITOR.instances['agreement_text'];
    if(editor) {
      editor.setData(jQuery('#program_organization_agreement').val());
    }
  },

  update: function(editText) {
    var editor = CKEDITOR.instances['agreement_text'];
    registerForGeneralSettingsCkeditorValidations(editor, function(){
      var content = editor.getData();
      document.getElementById('cur_agreement').innerHTML = content; //Add the content to the tag using Javascript so that unsafe html scripts are not executed
      jQuery('#program_organization_agreement').val(content);
      ProgramAgreement.show(editText);
      jQuery("#modal_add_agreement_link").modal('hide');
    });
  },

  show: function(editText) {
    jQuery('#no_agreement').hide();
    jQuery('#add_agreement_link').html(editText);
    jQuery('#cur_agreement').show();
    jQuery('#remove_agreement_link').show();
  },

  remove: function(confirmMsg, addText) {
    chronusConfirm(confirmMsg, function() {
      jQuery('#no_agreement').show();
      jQuery('#add_agreement_link').html(addText);
      jQuery('#cur_agreement').hide();
      jQuery('#remove_agreement_link').hide();

      jQuery('#cur_agreement').html('');
      jQuery('#program_organization_agreement').val('');
    });
  }
}

var ProgramPrivacy = {
  discardChanges: function() {
    var privacyeditor = CKEDITOR.instances['privacy_text'];
    if(privacyeditor) {
      privacyeditor.setData(jQuery('#program_organization_privacy').val());
    }
  },

  update: function(editText) {
    var privacyeditor = CKEDITOR.instances['privacy_text'];
    registerForGeneralSettingsCkeditorValidations(privacyeditor, function(){
      var content = privacyeditor.getData();
      document.getElementById('cur_privacy').innerHTML = content; //Add the content to the tag using Javascript so that unsafe html scripts are not executed
      jQuery('#program_organization_privacy').val(content);
      ProgramPrivacy.show(editText);
      jQuery("#modal_add_privacy_link").modal("hide");
    });
  },

  show: function(editText) {
    jQuery('#no_privacy').hide();
    jQuery('#add_privacy_link').html(editText);
    jQuery('#cur_privacy').show();
    jQuery('#remove_privacy_link').show();
  },

  remove: function(confirmMsg, addText) {
    chronusConfirm(confirmMsg, function() {
      jQuery('#no_privacy').show();
      jQuery('#add_privacy_link').html(addText);
      jQuery('#cur_privacy').hide();
      jQuery('#remove_privacy_link').hide();

      jQuery('#cur_privacy').html('');
      jQuery('#program_organization_privacy').val('');
    });
  }
}

var GADimensions = {};

var DimensionMapping = {};

/* From Apollo */
var Analytics = {
  /* An arraw of Regex of urls no to track */
  _SKIP_AJAX_TRAC_PATTERNS:  [
    /\/locations\.js/ /*Location Autocomplete*/
  ],

  URL_QUERY_DELIMITOR: "?",
  QUERY_PARAM_DELIMITOR: "&",
  KEY_VALUE_DELIMITOR: "=",
  GA_WHITELISTED_KEYS: ["src", "filter", "filter[]", "sub_src", "ei_src", "tab", "lst", "src1", "roles", "roles[]", "view", "sort", "sort[]", "order", "section", "section_index", "set_locale", "target_user_type", "show", "pageSize", "per_page", "mode", "status"],
  GA_WHITELISTED_VALUES: ["true", "false", "0", "1", "mentor", "student", "admin", "mentors", "students"],
  ID_REPLACE_VALUE: "ID",
  PARAM_VALUE: "PV",
  PI_ROUTES_REGEX: "(members|users)/",
  PI_IDS_REGEX: "(member_id|user_id)=",

  _trackPrototypeAjax: function(request){
    if (request && request.url) {
      Analytics._trackAjax(request.url);
      request._creationTime = (new Date()).getTime();
    }
  },

  _trackAjax: function(url) {
    /* Skip all ajax for which we don't need any tracking. */
    for (i = 0; i < Analytics._SKIP_AJAX_TRAC_PATTERNS.length; i++) {
      if (url.match(Analytics._SKIP_AJAX_TRAC_PATTERNS[i])) {
        return;
      }
    }

    url = Analytics.getPageUrlForGA(url);
    Analytics.gaTrack(url + "#AJAX");
  },

  /* Google Analytics track */
  gaTrack: function(tag) {
    if(typeof(ga) === typeof(Function) && tag) {
      jQuery.each(GADimensions, function(key, value) {
        ga('set', key, value);
      });
      ga('set', 'anonymizeIp', true);
      return ga('send', 'pageview', tag);
    }
    return false;
  },

  setGADimensionMapping: function(dimensionMapping) {
    DimensionMapping = dimensionMapping;
  },

  setGADimensions: function(dimensionHash) {
    var prefix = "dimension";
    jQuery.each(dimensionHash, function(key, value) {
      GADimensions[prefix + DimensionMapping[key]] = value;
    });
  },

  replacePiIdsInUrl: function(pageUrl){
    var regex = new RegExp("(" + Analytics.PI_ROUTES_REGEX + "|" + Analytics.PI_IDS_REGEX + ")[0-9]+", "g");
    return pageUrl.replace(regex, "$1"+ Analytics.ID_REPLACE_VALUE);
  },

  getDecodedQueryString: function(queryString){
    if(queryString.charAt(0) == "?")
      queryString = queryString.substr(1);

    return decodeURIComponent(queryString);
  },

  canIncludeQueryParam: function(queryParam){
    return queryParam.length == 2 && (Analytics.GA_WHITELISTED_KEYS.indexOf(queryParam[0].trim()) > -1 || Analytics.GA_WHITELISTED_VALUES.indexOf(queryParam[1].trim()) > -1 );
  },

  getWhiteListedQueryString: function(queryString){
    if(queryString === undefined)
      return "";

    var decodedQueryString = Analytics.getDecodedQueryString(queryString);
    var queries = decodedQueryString.split(Analytics.QUERY_PARAM_DELIMITOR);
    var filteredQueryString = [];

    queries.forEach(function(query){
      var temp = query.split(Analytics.KEY_VALUE_DELIMITOR);
      if(Analytics.canIncludeQueryParam(temp))
        filteredQueryString.push(temp.join(Analytics.KEY_VALUE_DELIMITOR));
      else if(temp.length == 2){
        if(temp[0] && temp[1].trim())
          filteredQueryString.push(temp[0] + Analytics.KEY_VALUE_DELIMITOR + Analytics.PARAM_VALUE);
        else if(temp[0])
          filteredQueryString.push(temp[0] + Analytics.KEY_VALUE_DELIMITOR);
      }
      else
        filteredQueryString.push(temp[0]);
    });
    return filteredQueryString.length > 0 ? (Analytics.URL_QUERY_DELIMITOR + filteredQueryString.join(Analytics.QUERY_PARAM_DELIMITOR)) : "";
  },

  getPageUrlForGA: function(url){
    var baseUrl = window.location.protocol +  "//" + window.location.host + "/";
    if (url.match(baseUrl)) {
      url = url.replace(baseUrl, "/");
    }
    var splittedUrl = url.split(Analytics.URL_QUERY_DELIMITOR);
    var pathName = splittedUrl[0];
    var queryString = Analytics.getWhiteListedQueryString(splittedUrl[1]);
    var pageUrl = pathName + queryString;
    return Analytics.replacePiIdsInUrl(pageUrl);
  }
}

var Survey = {
  initializeNewForm: function(){
    jQuery(function(){
      Survey.handleTypeChange();
      jQuery("#survey_type").on("change", Survey.handleTypeChange);
      jQuery("#show_additional_option").on('click', Survey.showAdditionalOptions);
    });
  },

  showAdditionalOptions: function(){
    jQuery(".advanced_options_div").hide();
    jQuery(".show_additional_option_div").hide();
    jQuery(".cjs_show_advanced_options").show();
  },

  initializeEditAnswersForm: function(){
    jQuery(function(){
      jQuery(document).on('click', '.cjs-survey-form-submit-validation', function(){
        success = RequiredFields.validate('survey_answers');
        if(success)
          jQuery('#survey_answers_form').submit();
      });
    });
  },

  setDraftTrue: function() {
    jQuery(document).on('click', '#cjs_survey_save_draft_btn', function() {
      jQuery('#cjs_draft_survey').val(true);
      jQuery('#survey_answers_form').submit();
    })
  },

  handleTypeChange: function(){
    var surveyType = jQuery("#survey_type").val();
    var help_text_element = jQuery("#survey_type").next();
    if(surveyType.blank()) return false;
    else {
      if(surveyType == "<%= EngagementSurvey.name %>"){
        help_text_element.text(surveysTranslations.engagement_help_text);
        jQuery("#program_survey_options").slideUp();
        jQuery("#engagement_survey_options").show();
        var srl_index = jQuery.inArray("survey_role_list", RequiredFields.fieldIds);
        if (srl_index != -1){
          RequiredFields.fieldIds.splice(srl_index, 1);
        }
      }else{
        help_text_element.text(surveysTranslations.program_help_text);
        RequiredFields.fieldIds.push('survey_role_list');
        jQuery("#program_survey_options").slideDown();
        jQuery("#engagement_survey_options").hide();
        jQuery("#survey_progress_report").attr("checked", false);
      }
    }
  },

  handleMatrixForcedRanking: function(){
    jQuery(".cjs_forced_matrix_rating_radio").on("click", function(){
      if(jQuery(this).is(':checked')){
        var questionContainer = jQuery(this).closest(".cjs_matrix_rating_container");
        var ratedValue = jQuery(this).val();
        var allRatingValueRadio = questionContainer.find(":radio[value='" + ratedValue + "']:checked");
        allRatingValueRadio.prop("checked", false);
        jQuery(this).prop("checked", true);
      }
    });
  }
}

var ProgramEdit = {
  Features : {
    toggleState: function(checkboxItem) {
      checkbox = jQuery(checkboxItem);
      var state = checkbox.is(':checked');
      checkbox.attr('checked', !state);
    }
  }
}

var RadioFilter = {
  reloadPage: function(loading_id, targetURL) {
    jQuery('#' + loading_id).show();
    window.top.location = targetURL;
  }
}

var AssignMentor = {
  selectAnotherMentor: function(requestId) {
    jQuery('#select_connection_' + requestId).hide();
    jQuery('#assignment_popup_' + requestId).show();
  },

  clearErrorFlash: function(requestId){
    jQuery('#group_error_'+requestId).html("");
    jQuery('#group_error_'+requestId).hide();
  }
}

var AssignMatchedMentor = {
  showGroupCreationForm: function(mentorId, groupId, disableMentoringModel) {
    hideIfExists('select_wrapper_'+ mentorId);
    jQuery('#create_wrapper_'+ mentorId).show();
    jQuery('div#create_wrapper_' + mentorId + ' form input[name=group_id]')[0].value = groupId || "";
    var mentoringModelDropDown = jQuery("select#assign_mentoring_model");
    if(mentoringModelDropDown.length > 0){
      var mentoringModelControlWithHelpText = mentoringModelDropDown.closest("form").find(".cjs_mentoring_model");
      if(disableMentoringModel){
        mentoringModelDropDown.attr("disabled", true);
        mentoringModelControlWithHelpText.hide();
      }
      else{
        mentoringModelDropDown.attr("disabled", false);
        mentoringModelControlWithHelpText.show();
      }
    }
  },

  showGroupSelectionForm: function(mentorId) {
    jQuery('#create_wrapper_'+ mentorId).hide();
    jQuery('#select_wrapper_'+ mentorId).show();
  },

  showMoreRecos: function(){
    jQuery("#show_more_recos a").toggle();
    jQuery("#show_more_recos img").toggle();
  },

  generate_form: function(){
    jQuery(document).on("click", ".assign_match_btns", function(event){
      event.preventDefault();
      jQueryShowQtip("#"+jQuery(this).attr('id'), 540, jQuery(this).prop("href"), {}, {modal: true});
    });
  }
}

function trackingPeriod(sel){
    if (sel){
        jQuery('#auto_terminate_id').show();
    } else {
        jQuery('#auto_terminate_id').hide();
    }
}

var MentorRequestForm ={
  parseUrlParams: function() {
    jQuery(document).ready(function() {
      var id = jQueryReadUrlParam('mentor_request_id');
      jQueryScrollTo("#request_"+id, true);
    });
  },

  disable_accept_mentor_request_link: function(waitText) {
    setTimeout(function(){
      jQuery(".cjs_disable_accept_mentor_request_link").text(waitText);
      jQuery(".cjs_disable_mentor_request_link").click(function(){
        return false;
      });
    }, 1);
  },

  disable_accept_mentor_request_buttons: function(waitText) {
    setTimeout(function(){
      jQuery('.select_group').attr({'value':waitText, 'disabled':true});
    }, 1);
  },

  init_disable: function(waitText) {
    jQuery('.cjs_disable_accept_button').bind('click', function(){
      MentorRequestForm.disable_accept_mentor_request_buttons(waitText);
    });

    jQuery('.cjs_disable_accept_mentor_request_link').bind('click', function(){
      MentorRequestForm.disable_accept_mentor_request_link(waitText);
    });
  }
}

var MentoringTips = {
  DefaultBorder: "1px solid #AAAAAA",
  ErrorBorder: "2px solid #AA0000",
  DefaultFontColor: "#AAAAAA",
  WarningFontColor: "#000000",
  ErrorFontColor: "#AA0000",

  cancelEdit: function(id){
    if(id == "new"){
      jQuery('#edit_mentoring_tip_new').hide();
      jQuery('#flash_new').hide();
      jQuery('#mentoring_tip_message_new').val("");
    }
    else{
      this.removeEdit(id);
      jQuery('#edit_tip_'+ id +'_loader').hide();
      jQuery('#mentoring_tip_' + id).show();
    }
  },

  removeEdit: function(id){
    if(jQuery('#edit_mentoring_tip_'+id)){
      jQuery('#edit_mentoring_tip_'+id).remove()
    }
  },

  callNew: function(){
    jQuery('#edit_mentoring_tip_new').show();
    this.updateCount("new");
  },

  messageObserver: function(id){
    jQuery('#mentoring_tip_message_'+ id).keyup(function(){
        MentoringTips.updateCount(id);
    });
    jQuery('#mentoring_tip_message_'+ id).keydown(function(){
        MentoringTips.updateCount(id);
    });
  },

  updateCount: function(id){
    var currentCount = jQuery("#mentoring_tip_message_"+id).get(0).value.length;
    var newLimit = 350 - currentCount;

    if(newLimit > 20 ){
      jQuery('#character_limit_' + id).css('color', this.DefaultFontColor);
      jQuery("#mentoring_tip_message_"+id).css('border', this.DefaultBorder);
    } else if(newLimit <= 20 && newLimit > 5){
      jQuery('#character_limit_' + id).css('color', this.WarningFontColor);
      jQuery("#mentoring_tip_message_"+id).css('border', this.DefaultBorder);
    } else if(newLimit <= 5 && newLimit >= 0){
      jQuery('#character_limit_' + id).css('color', this.ErrorFontColor);
      jQuery("#mentoring_tip_message_"+id).css('border', this.DefaultBorder);
    } else if(newLimit < 0){
      jQuery('#character_limit_' + id).css('color', this.ErrorFontColor);
      jQuery("#mentoring_tip_message_"+id).css('border', this.ErrorBorder);
    }

    jQuery('#character_limit_' + id).html(newLimit);
  }
}

validateInstruction = {
    submitForm: function() {
      jQuery(".cjs-instruction-form").on("submit", function(){
        closeQtip();
      });
    }
}

var AbstractRequestRejectOrWithdraw = {
  //key is meeting request or mentor request
  GA_MENTOR_REQUEST_ACTIVITY_ACCEPT: "Accept Mentor Request",
  GA_MENTOR_REQUEST_ACTIVITY_LABEL_USER_PROFILE_PAGE_ID: 1,
  GA_MENTOR_REQUEST_ACTIVITY_LABEL_USER_PROFILE_PAGE: "user_profile_page",
  GA_MENTOR_REQUEST_ACTIVITY_LABEL_USER_LISTING_PAGE_ID: 2,
  GA_MENTOR_REQUEST_ACTIVITY_LABEL_USER_LISTING_PAGE: "user_listing_page",

  validateRejection: function(id, defaultText, key, reject){
    var messageElement =  jQuery("#"+key+"_response_text_"+id);
    var reasonElement = jQuery("."+key+"_rejection_type");
    var messageSelected = AbstractRequestRejectOrWithdraw.checkMessageSelected(id, defaultText, key);
    var reasonSelected = AbstractRequestRejectOrWithdraw.checkReasonSelected(id, reasonElement, reject, key)
    if(!messageSelected){
      ChronusValidator.ErrorManager.ShowFieldError(messageElement);
    }
    else{
      ChronusValidator.ErrorManager.HideFieldError(messageElement);
    }
    var isValid = messageSelected && reasonSelected;
    if(isValid) {
      AbstractRequestRejectOrWithdraw.trackRejectInGA(key, id);
    }
    return isValid;
  },

  trackRejectInGA: function(key, id){
    var sourceId = jQuery("#edit_"+key+"_"+id+" input[name='"+key+"[message]']:checked").val();
      var category = chrGoogleAnalytics.category.REQUEST_UPDATE_ACTIVITY;
      var actionType = ((key == 'meeting_request') ? chrGoogleAnalytics.action.MEETING_REQUEST_REJECT : chrGoogleAnalytics.action.MENTOR_REQUEST_REJECT);
      chrGoogleAnalytics.addEvent(category, actionType, sourceId, 0);
  },

  checkReasonSelected: function(id, reasonElement, reject, key){
    if(reject){
      var reasonSelected = false;
      if(!(!jQuery("#edit_"+key+"_"+id+" input[name='"+key+"[rejection_type]']:checked").val())){
        reasonSelected = true;
      }
      if(!reasonSelected){
        ChronusValidator.ErrorManager.ShowFieldError(reasonElement);
      }
      else{
        ChronusValidator.ErrorManager.HideFieldError(reasonElement);
      }
      return reasonSelected;
    }
    else{
      return true;
    }
  },

  checkMessageSelected: function(id, defaultText, key){
    var response_text_value = jQuery("#" + key + "_response_text_" + id).val();
    if(response_text_value == defaultText) {
      return false;
    }
    else{
      return true;
    }
  },
  //key is meeting request or mentor request
  cancel: function(id,reject,flash_id,key){
    if(reject == false){
      ChronusValidator.ErrorManager.ClearResponseFlash(flash_id);
      jQuery("#" + key + "_response_text_" + id).val('');
    }
  },

  gaGetRequestSourceId: function(source){
    var sourceId = AbstractRequestRejectOrWithdraw.GA_MENTOR_REQUEST_ACTIVITY_LABEL_USER_PROFILE_PAGE_ID;

    if(source == AbstractRequestRejectOrWithdraw.GA_MENTOR_REQUEST_ACTIVITY_LABEL_USER_LISTING_PAGE){
      sourceId =  AbstractRequestRejectOrWithdraw.GA_MENTOR_REQUEST_ACTIVITY_LABEL_USER_LISTING_PAGE_ID;
    }
    return sourceId;
  },

  gaGetEventAction: function(element){
    if (element.hasClass("cjs_accept_request") || element.hasClass("cjs_disable_accept_button")){
      return AbstractRequestRejectOrWithdraw.GA_MENTOR_REQUEST_ACTIVITY_ACCEPT;
    }

    else if (element.hasClass("cjs_reject_request")){
      return chrGoogleAnalytics.action.MENTOR_REQUEST_REJECT;
    }
  },

  gaTrackRequestActions: function(source){
    jQuery(".cjs_accept_request, .cjs_reject_request, .cjs_disable_accept_button").on("click", function(){
      var sourceId = AbstractRequestRejectOrWithdraw.gaGetRequestSourceId(source);
      var actionType = AbstractRequestRejectOrWithdraw.gaGetEventAction(jQuery(this));
      chrGoogleAnalytics.addEvent(chrGoogleAnalytics.category.MENTOR_REQUEST_ACTIVITY, actionType, source, sourceId);
    });
  }
}

var MentorOfferRejectorWithdraw = {
  onSubmit: function(id){
    if(ReasonForReject.validate("mentor_offer_response_text_" + id)){
      return true;
    } else {
      return false;
    }
  },
  onCancel: function(id){
    hideQtip();
    RequiredFields.clearError('mentor_offer_response_text_'+id);
  }
}

var EditUser = {
  validateMentoringSettings: function(options){
    calendarSlot.renameMentSlotFields();
    return validateTimesForAllSlotsAndSubmit(options.boundaries, options.slot_diff, options.errorMsg, 'mentoring_slot_flash', options.today_midnight, '#{j(DateTime.localize(Time.now.at_midnight + 1.hour, format: :short_time_small))}') && validateDateForAllSlotsAndSubmit('mentoring_slot_flash');
  },

  validateEducation: function(educations) {
    var valid = true;
    for(j = 0; j < educations.length; j++) {
      var education = jQuery(educations[j]);
      // Check whether validation is required (at least one field should be filled)
      var school_name = education.find('.school_name');
      var degree = education.find('.degree');
      var major = education.find('.major');
      var graduation_year = education.find('.graduation_year');

      if((!degree.val().blank() || !major.val().blank() || !graduation_year.val().blank()) && school_name.val().blank()) {
        ChronusValidator.ErrorManager.ShowFieldError(school_name);
        valid = false;
      } else {
        ChronusValidator.ErrorManager.HideFieldError(school_name);
      }
    }

    return valid;
  },

  validateExperience: function(experiences) {
    var valid = true;
    var flash_message = "";
    for(k = 0; k < experiences.length; k ++) {
      var experience = jQuery(experiences[k]);
      // Check whether validation is required (at least one field should be filled)
      var company = experience.find('.company');
      var job_title = experience.find('.job_title');
      var start_year = experience.find('.start_year');
      var end_year = experience.find('.end_year');
      var current_job = experience.find('.current_job').attr("checked");
      if((!job_title.val().blank() || !start_year.val().blank() || !end_year.val().blank()) && company.val().blank()) {
        valid = false;
        ChronusValidator.ErrorManager.ShowFieldError(company);
      } else if (!company.val().blank() && !start_year.val().blank() && !end_year.val().blank() && !current_job && parseInt(start_year.val()) > parseInt(end_year.val()) ) {
        valid = false;
        ChronusValidator.ErrorManager.HideFieldError(company);
        ChronusValidator.ErrorManager.ShowFieldError(start_year);
        ChronusValidator.ErrorManager.ShowFieldError(end_year);
        flash_message = jsCommonTranslations.experiencesInvalid;
      }
      else {
        ChronusValidator.ErrorManager.HideFieldError(company);
        ChronusValidator.ErrorManager.HideFieldError(start_year);
        ChronusValidator.ErrorManager.HideFieldError(end_year);
      }
    }
    return {valid:valid, flash_message:flash_message};
  },

  validatePublication: function(publications) {
    var valid = true;
    publications.each(function() {
      var publication = jQuery(this);
      var publication_blank = true;
      var title = publication.find('.title');
      var day = publication.find('.publication_day');
      var month = publication.find('.publication_month');
      var year = publication.find('.publication_year');
      var date_present = !year.val().blank() || !month.val().blank() || !day.val().blank();
      // Check whether validation is required (at least one field should be filled)
      publication.find('input, textarea, select').each(function(index){
        publication_blank = publication_blank && jQuery(this).val().blank();
      });

      // Date select validation
      if(year.val().blank() && date_present) {
        ChronusValidator.ErrorManager.ShowFieldError(year);
        valid = false;
      }
      else if(!day.val().blank() && month.val().blank()) {
        ChronusValidator.ErrorManager.ShowFieldError(month);
        ChronusValidator.ErrorManager.HideFieldError(year);
        valid = false;
      } else {
        ChronusValidator.ErrorManager.HideFieldError(month);
        ChronusValidator.ErrorManager.HideFieldError(year);
      }

      if(title.val().blank() && !publication_blank) {
        ChronusValidator.ErrorManager.ShowFieldError(title);
        valid = false;
      } else {
        ChronusValidator.ErrorManager.HideFieldError(title);
      }
    });

    return valid;
  },

  validateManager: function(managers) {
    var valid = true;
    managers.each(function() {
      manager = jQuery(this);
      var manager_blank = true;
      var email = manager.find('.email');

      // Check whether validation is required (at least one field should be filled)
      manager.find('input').each(function(){
        manager_blank = manager_blank && jQuery(this).val().blank();
      });
      if(!manager_blank) {
        manager.find('input').each(function() {
          if(jQuery(this).val().blank()) {
            valid = false;
            ChronusValidator.ErrorManager.ShowFieldError(jQuery(this));
          } else if(jQuery(this).hasClass("email") && !jQuery(email).val().blank() && !verifyEmailFormat(jQuery(email).val())) {
            valid = false;
            ChronusValidator.ErrorManager.ShowFieldError(email);
          } else {
            ChronusValidator.ErrorManager.HideFieldError(jQuery(this));
          }
        });
      }
    });
    return valid;
  },

  validateBasicInformation: function(section_id, errorMsg, skip_options) {
    var last_name_error = skip_options.skip_name_validation || RequiredFields.checkNonMultiInputCase(jQuery('#member_last_name'));
    var first_name_error = skip_options.skip_name_validation || RequiredFields.checkNonMultiInputCase(jQuery('#member_first_name'));
    var email_error = skip_options.skip_email_validation || RequiredFields.checkNonMultiInputCase(jQuery('#member_email'));
    // If admin User is editing his/others validations occur only for Education, Exp, Publn, Manager
    var answers_error = EditUser.validationsToExecute(skip_options.admin_user, skip_options.first_visit, section_id, errorMsg);
    var is_valid = last_name_error && first_name_error && email_error && answers_error;

    if(is_valid) {
      ChronusValidator.ErrorManager.ClearPageFlash();
    } else {
      ChronusValidator.ErrorManager.ShowPageFlash(false, errorMsg);
      scroll(0,0);
    }

    return is_valid;
  },

  toggleCurrentJob: function(element) {
    var element = jQuery(element);
    var is_current_job = element.is(':checked');
    var end_time_selector = element.closest('.experience').find("span.end_time_selector");
    var end_time_present = element.closest('.experience').find('span.end_time_present');
    var hidden_current_job_field_tag = element.closest('.experience').find('input[type=hidden]');
    if(is_current_job) {
      end_time_selector.hide();
      end_time_present.show();
    } else {
      end_time_present.hide();
      end_time_selector.show();
    }
    hidden_current_job_field_tag.val(is_current_job);
  },
  renameEducationExperienceFields: function() {
    searchDivs = [
    {
      divClass : '.inner_rounded_section',
      inputName :'new_education_attributes'
    },

    {
      divClass : '.inner_rounded_section',
      inputName :'new_experience_attributes'
    },

    {
      divClass : '.inner_rounded_section',
      inputName :'new_publication_attributes'
    }
    ];

    jQuery.each(searchDivs, function(allDivInd, allDivVal){
      jQuery(allDivVal.divClass).each(function(divInd, divVal){
        EditUser.educationExperienceRegexReplace(divInd, divVal, allDivVal);
      });
    });
  },
  educationExperienceRegexReplace: function(divInd, divVal, allDivVal){
    var regex = new RegExp(/^profile_answers\[(\d+)\]\[/.source + (new RegExp(allDivVal.inputName)).source + /]\[\]\[(\w+)]$/.source);
    var matchingElements = jQuery(divVal).find(':input').filter(function() {
      return (jQuery(this).attr('name') && jQuery(this).attr('name').match(regex));
    });

    matchingElements.each(function(index) {
      var nameDetails = jQuery(this).attr('name').match(regex);
      var newName = 'profile_answers[' + nameDetails[1] + '][' + allDivVal.inputName + '][][' + (divInd + 1) + '][' + nameDetails[2] + ']';
      jQuery(this).attr('name', newName);
    });
  },

  // Admin or Normal User & is First Visit: Validate ALL
  // Admin User : validate EduEXP if First Visit is NIL
  // Normal user: validate ALL

  // params : admin_user: Current User is Admin
  validationsToExecute: function(admin_user, first_visit, section_id, general_error_message){
    if(first_visit.length > 0) // First Visit validate all irrespective of Admin User
      return RequiredFields.validate(section_id, false, false, general_error_message);
    else if(admin_user == 'true') // Admin User And Not First Visit : Validate Edu Exp Sections alone
      return NewMember.validateEduExpSection();
    else
      return RequiredFields.validate(section_id, false, false, general_error_message);
  },

  tabSelect: function(thisObj){
    var tabSelector =  jQuery(thisObj).data('tab-type');
    jQuery(tabSelector).show().siblings().hide();
    jQuery(thisObj).parent('li').addClass('active').siblings().removeClass('active');
  },

  editNotifications: function(thisObj,urlName){
    var settingName = jQuery(thisObj).children('input').attr('id');
    var data = {}
    data["setting_name"] = settingName;
    data["value"] = jQuery('input[id='+settingName+']').is(':checked');
    jQuery.ajax({
      url: urlName,
      data: data,
      type: 'PATCH',
    });
  }
}

/* This function is to disable the submit button on form submission */
var BetterProgressBar = {
  shouldDisableElement: null,
  elementToDisable: null,
  elementToReenable: null,
  disableText: null,
  reenableText: null,
  originalOnclick: null,
  deactivateButton: null,

  // Mark the button whch is clicked so that it can be retrieved before unload
  markElementForDisable: function(element, disable_with_text, deactivate) {
    BetterProgressBar.reset();
    element = jQuery(element);
    BetterProgressBar.disableText = disable_with_text;
    BetterProgressBar.shouldDisableElement = true;
    BetterProgressBar.elementToDisable = element;
    BetterProgressBar.deactivateButton = deactivate;
  },

  // On page unload check if a button was marked clicked. If yes, then disable the button before page unload
  disableElement: function() {
    if (BetterProgressBar.shouldDisableElement) {
      element = BetterProgressBar.elementToDisable;
      element = jQuery(element);
      BetterProgressBar.reenableText = element.val()
      element.val(BetterProgressBar.disableText);
      element.addClass('disabled_button');

      if (BetterProgressBar.deactivateButton){
        element.attr('disabled', true);
      }

      BetterProgressBar.originalOnclick = element.getAttribute('onclick');
      element.setAttribute('onclick', 'return false');
      BetterProgressBar.elementToReenable = element;
      BetterProgressBar.shouldDisableElement = false;
    }
  },

  // On ajax response reenable buttons which are disabled
  reEnableElement: function() {
    element = BetterProgressBar.elementToReenable;

    // If the element itself is gone, just return
    if (!element) {
      BetterProgressBar.reset();
      return;
    }

    element.val(BetterProgressBar.reenableText);
    element.removeClass('disabled_button');

    if (BetterProgressBar.deactivateButton){
      element.attr('disabled', false);
      BetterProgressBar.deactivateButton = false;
    }

    element.setAttribute('onclick', BetterProgressBar.originalOnclick);
    BetterProgressBar.reset();
  },

  // Disable links with method on click
  disableLink: function(element) {
    element = jQuery(element);
    element.setAttribute('onclick', 'return false');
    element.setAttribute('href', '#');
    element.addClass('disabled_link');
  },

  // Reset BetterProgressBar
  reset: function(){
    this.shouldDisableElement = false;
    this.elementToDisable =  '';
    this.elementToReenable = '';
    this.disableText = '';
    this.reenableText = '';
    this.originalOnclick = '';
    this.deactivateButton = false;
  }
}

BetterProgressBar.reset();

var MentorFeedback = {
  toggleFeedbacks: function(viewLinkText, feedbackId) {
    VIEW_FEEDBACKS = viewLinkText;
    HIDE_FEEDBACKS = '« hide';

    if (jQuery('#view_feedbacks_' + feedbackId).html() == VIEW_FEEDBACKS) {
      jQuery('#view_feedbacks_' + feedbackId).html(HIDE_FEEDBACKS);
    } else {
      jQuery('#view_feedbacks_' + feedbackId).html(VIEW_FEEDBACKS);
    }

    jQuery('#feedbacks_' + feedbackId).toggle();
    }
}

var ConnectionFeedback = {

  toggleAdditionalFeedback: function(questionId, link){
    jQuery('#common_answers_' + questionId).val('');
    if (jQuery('#answer_' + questionId).is(':visible')) {
      jQuery(".collapse_expand_icon img").prop("src", "<%= asset_path('menu_collapsed.gif') %>")
    } else {
      jQuery(".collapse_expand_icon img").prop("src", "<%= asset_path('menu_expanded.gif') %>")
    }
    jQuery("#answer_" + questionId).toggle();
  },

  hideFeedbackForSession: function(requestUrl){
    jQuery.ajax({
      url: requestUrl
    });
  },

  bindCloseForSessionHide: function(requestUrl){
    jQuery("#connection_inactivity_feedback_form .close").on('click', function(){
      ConnectionFeedback.clearAndHideForm(requestUrl);
    });

    jQuery("#connection_inactivity_feedback_form .form-actions a.cancel").on('click', function(){
      ConnectionFeedback.clearAndHideForm(requestUrl);
    });
  },

  clearAndHideForm: function(requestUrl){
    ConnectionFeedback.hideFeedbackForSession(requestUrl);
    jQuery("#connection_inactivity_feedback_form").modal('hide');
    ChronusValidator.ErrorManager.ClearPageFlash();
  },

  initializeForm: function(){
    jQuery(document).on("click", ".cjs-feedback-form-submit-validation", function(){
      return RequiredFields.validate("feedback_answers");
    });
  }
}

var Tabs = {
  handleMouseIn: function(e) {
    jQuery(e).children(".subtabs_panel").show();
  },
  handleMouseOut: function(e) {
    jQuery(e).children(".subtabs_panel").hide();
  }
}

var AnnouncementTestmail = {
    toggleDetails: function() {
        if (jQuery("#announcement_email_notification").val() == '<%= UserConstants::DigestV2Setting::ProgramUpdates::IMMEDIATE %>') {
            jQuery('#test_email_detail').show();
        } else {
            jQuery('#test_email_detail').hide();
        }
    },

    init: function() {
      AnnouncementTestmail.toggleDetails();
      jQuery("#announcement_email_notification").on('change', function(){ AnnouncementTestmail.toggleDetails() });
    },

    beforeShowPopup: function(defaultNotificationList) {
        jQuery('#test_send_success').hide();
        ChronusValidator.ErrorManager.ApplyFieldStatus(true, jQuery('#announcement_notification_list_for_test_email'));
        AnnouncementTestmail.clearNotificationList();
    },

    clearNotificationList: function() {
        jQuery("#announcement_notification_list_for_test_email").val("");
    },

    collectDetailsAndValidateForm: function(defaultNotificationList) {
        list = jQuery('#announcement_notification_list_for_test_email').val();
        jQuery('#test_email_title').val(jQuery('#announcement_title').val());
        if (jQuery('#new_announcement_body').length)
        {
          jQuery('#test_email_body').val(CKEDITOR.instances.new_announcement_body.getData());
        }
        if (jQuery('#announcement_message_body').length){
          jQuery('#test_email_body').val(CKEDITOR.instances.announcement_message_body.getData());
        }
        jQuery('#test_email_notification_list_for_test_email').val(jQuery('#announcement_notification_list_for_test_email').val());
        if (list == "" || list == defaultNotificationList) {
            ChronusValidator.ErrorManager.ApplyFieldStatus(false, jQuery('#announcement_notification_list_for_test_email'));
            return false;
        } else {
            ChronusValidator.ErrorManager.ApplyFieldStatus(true, jQuery('#announcement_notification_list_for_test_email'));
            jQuery("#modal_show_popup_link").modal("hide");
            return true;
        }
    }
}

var newProgram = {
  showWebAddressField : function(prefix) {
    jQuery('#' + prefix + '_root_url').hide();
    jQuery('#change_' + prefix + '_root').show();
  },

  webAddressChanged : function(prefix) {
        newProgram.updateWebAddress(prefix, jQuery('#tmp_' + prefix + '_root').val());
    jQuery('#' + prefix + '_root_url').show();
    jQuery('#change_' + prefix + '_root').hide();
  },

  discardAddressChange : function(prefix) {
    jQuery(document).on('click', ".cancel_root_url_edit_" + prefix, function(){
      jQuery('#' + prefix + '_root_url').show();
      jQuery('#change_' + prefix + '_root').hide();
    })
  },

  updateWebAddress: function(prefix, newValue) {
        jQuery('#tmp_' + prefix + '_root').val(newValue);
    jQuery('#' + prefix + '_prog_root').val(newValue);
    jQuery('#preview_' + prefix + '_root_value').html(newValue);
  },

  inferRoot : function() {
    var newValue = jQuery('#program_name').val().replace(new RegExp(/\s+/, "g"), '-').toLowerCase();
    newProgram.updateWebAddress('new', newValue);
  },

  validateStepOne: function() {
    var name_error = !RequiredFields.checkNonMultiInputCase(jQuery('#program_name'));
    var flash_id = 'new_program_flash'
    if(name_error){
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, jsCommonTranslations.requiredFieldMissing);
      return false;
    }
    else
    {
      ChronusValidator.ErrorManager.ClearResponseFlash(flash_id);
      return true;
    }
  },

  validateStepTwo: function(career_based, selectEngagementErrorMessage, selectModeerrorMessage){
    isSelected = newProgram.validateEngagementType(career_based, selectEngagementErrorMessage, selectModeerrorMessage);
    if (isSelected){
      newProgram.stepThree();
    }
    else{
      return false;
    }
  },

  validateStepThree: function() {
    var prog_name_error = !RequiredFields.checkNonMultiInputCase(jQuery('#cur_prog_name'));
    var org_name_error = !RequiredFields.checkNonMultiInputCase(jQuery('#org_name'));
    var flash_id = 'new_program_flash'
    if(prog_name_error || org_name_error){
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, jsCommonTranslations.requiredFieldMissing);
      return false;
    }
    else
    {
      ChronusValidator.ErrorManager.ClearResponseFlash(flash_id);
      return true;
    }
  },

  stepOne: function() {
    jQuery("#step_3").hide();
    jQuery("#step_2").hide();
    jQuery("#step_1").show();
  },

  stepTwo: function() {
    if(this.validateStepOne()){
      jQuery("#step_1").hide();
      jQuery("#step_3").hide();
      jQuery("#step_2").show();
    }
    else{
      return false;
    }
  },

  stepThree: function() {
    if(this.validateStepOne()){
      jQuery("#step_1").hide();
      jQuery("#step_2").hide();
      jQuery("#step_3").show();
    }
  },

  validateEngagementType: function(careerBased, selectEngagementErrorMessage, selectModeerrorMessage){
    if (jQuery('#cjs_program_engagement_type').is(":visible")){
      if (jQuery('.cjs_engagement_type:checked').length == 0){
        ChronusValidator.ErrorManager.ShowResponseFlash('new_program_flash', selectEngagementErrorMessage);
        ChronusValidator.ErrorManager.ShowFieldError('#cjs_carrer_based');
        return false;
      }
      if (jQuery('.cjs_engagement_type:checked').val() == careerBased){
        if (jQuery('.cjs_select_ongoing_mentoring').is(':checked') || jQuery('.cjs_select_one_time_mentoring').is(':checked')){
          return true;
        }
        else{
          ChronusValidator.ErrorManager.ShowResponseFlash('new_program_flash', selectModeerrorMessage);
          ChronusValidator.ErrorManager.ShowFieldError('#cjs_carrer_based');
          return false;
        }
      }
      else{
        return true;
      }
    }
    else{
      return true;
    }
  },

  validateProgramCreationInputs: function(careerBased, selectEngagementErrorMessage, selectModeerrorMessage, solution_pack, manual){
    return newProgram.validateCreationWay(selectEngagementErrorMessage, solution_pack, manual) && newProgram.validateEngagementType(careerBased, selectEngagementErrorMessage, selectModeerrorMessage) && newProgram.validateFilePresent(selectEngagementErrorMessage);
  },

  validateCreationWay: function(selectEngagementErrorMessage, solution_pack, manual){
    returnValue = jQuery('#creation_way_' + solution_pack).is(":checked") || jQuery('#creation_way_' + manual).is(":checked")
    if (!returnValue){
      ChronusValidator.ErrorManager.ShowResponseFlash('new_program_flash', selectEngagementErrorMessage);
      ChronusValidator.ErrorManager.ShowFieldError('.cui_creation_way');
    }
    return returnValue;
  },

  validateOrgLevelCreationWay: function(selectEngagementErrorMessage, solution_pack, manual){
    returnValue = jQuery('#creation_way_' + solution_pack).is(":checked") || jQuery('#creation_way_' + manual).is(":checked")
    if (!returnValue){
      ChronusValidator.ErrorManager.ShowResponseFlash('new_program_flash', selectEngagementErrorMessage);
      ChronusValidator.ErrorManager.ShowFieldError('.cui_creation_way');
    }
    return returnValue && newProgram.validateFilePresent(selectEngagementErrorMessage);
  },

  validateFilePresent: function(selectEngagementErrorMessage){
    if (jQuery('#solution_pack_file_path').is(":visible")){
      if (jQuery('#program_solution_pack_file').val() == ""){
        ChronusValidator.ErrorManager.ShowResponseFlash('new_program_flash', selectEngagementErrorMessage);
        ChronusValidator.ErrorManager.ShowFieldError('#solution_pack_file_path');
        return false;
      }
      return true;
    }
    return true;
  }
}

var windowUnloadAlert = {
  showAlert: false,

  setAlert: function(element){
    element = jQuery(element);
    if(element.val().blank()){
      this.showAlert = false;
    }else{
      this.showAlert = true;
    }
  },

  clearAlert: function(){
    this.showAlert = false;
  }
}

/* This is to disable the buttons once a non-ajax form is submitted */
window.onbeforeunload = function(){
  if(windowUnloadAlert.showAlert){
    return jsCommonTranslations.youHaveUnsavedChanges;
  }
  /* This is to disable the buttons once a non-ajax form is submitted */
  BetterProgressBar.disableElement();
}

var headerProfileActions = {
  show: function() {
    jQuery('#my_profile').addClass('active');
    jQuery('.cjs-profile-actions').show();
  },

  hide: function() {
    jQuery('#my_profile').removeClass('active');
    jQuery('.cjs-profile-actions').hide();
  }
}

var switchProgram = {
  show: function() {
    jQuery('#cur_prog_name').addClass('active');
    jQuery('#my_prog_list').show();
  },

  hide: function() {
    jQuery('#cur_prog_name').removeClass('active');
    jQuery('#my_prog_list').hide();
  }
}

var MulitAutoComplete = {
  adminMessageInputAutoCompleteId: "admin_message_receivers",
  selectedNamesContainer: "selected_names",
  inputToBeSubmittedId: "",

  remove: function(element){
    element = jQuery(element);
    var parent = jQuery(element[0].parentNode);
    var idTobeRemoved = parent.attr('id').match(/child_(\d+)/)[1];
    var stringOfCurrentIds = jQuery('#' + this.inputToBeSubmittedId).val();

    var arryaOfCurrentIds = stringOfCurrentIds.split(",")
    arryaOfCurrentIds.splice(arryaOfCurrentIds.indexOf(idTobeRemoved), 1);

    jQuery('#' + this.inputToBeSubmittedId).val(arryaOfCurrentIds.join(","));
    parent.remove();
  },

  updateElement: function(element, selectedItem, inputToBeSubmittedId, selectedNamesContainer){
    element = jQuery(element);
    this.inputToBeSubmittedId = inputToBeSubmittedId
    // required when multiple multi-autocomplete box are present in same page
    if (selectedNamesContainer != undefined) {
      this.selectedNamesContainer = selectedNamesContainer
    }
    var name = selectedItem["name"];
    var selectedId = selectedItem["object_id"].toString();

    this.fillElementAndUpdateValue(name, selectedId);
    element.val("");
  },

  fillElementAndUpdateValue: function(name, selectedId){
    if(jQuery('#' + this.inputToBeSubmittedId).val().split(',').indexOf(selectedId) != -1) return;
    jQuery('#' + this.selectedNamesContainer)[0].appendChild(this.createChildNode(name, selectedId));

    var stringOfCurrentIds = jQuery('#' + this.inputToBeSubmittedId).val();
    if(stringOfCurrentIds){
      // Converting sting to array
      var arryaOfCurrentIds = stringOfCurrentIds.split(",");
      //  Push the id into the array if it does not exist
      if(arryaOfCurrentIds.indexOf(selectedId) == -1){
        arryaOfCurrentIds.push(selectedId);
      }
      //Converting it back to array and setting the value
      jQuery('#' + this.inputToBeSubmittedId).val(arryaOfCurrentIds.join(","));
    }
    else //This is the case when we set the value in the empty case
    {
      jQuery('#' + this.inputToBeSubmittedId).val(selectedId);
    }
  },

  createChildNode: function(name, selectedId){
    var selectedObject = jQuery("<div>", {'class': 'btn btn-outline btn-default btn-xs noshadow child p-l-xxs p-r-xxs m-b-xs pull-left m-r-xs', id: "child_" + selectedId})
    selectedObject[0].appendChild(jQuery("<div>", {'class': 'name col-xs-10 no-padding whitespace-nowrap truncate-with-ellipsis'}).html(name)[0]);
    var close = jQuery('<div>', {'class': 'remove col-xs-2 no-padding pull-left m-t-xxs'}).html("<i class='fa fa-times m-t-xxs text-default pull-right'></i>")
    selectedObject[0].appendChild(close[0]);

    close.click(function(){
        MulitAutoComplete.remove(close);
    });

    return selectedObject[0];
  },

  prefillGroups: function(fillName, objId, inputToBeSubmittedId){
    this.inputToBeSubmittedId = inputToBeSubmittedId;
    this.fillElementAndUpdateValue(fillName, objId);
  }
}

var enableDisableStatus = {
  statusLoading: function(elementId){
    jQuery('#' + elementId+ ' img').attr('src', "<%= asset_path('ajax-loader-small.gif') %>")
  }
}

function cantPublishMentorProfile(missingRequiredFieldsCannotPublishtext){
  alert(missingRequiredFieldsCannotPublishtext);
  if(jQuery('#edit_profile').length){
    RequiredFields.validate('mentor', true);
    ChronusEffect.ExpandSection('mentor_profile_', ['basic_information_', 'education_and_experience_', 'settings_'], false, true)
  }

}

var FeedbackWidget = {

  selectTab: function(element){
    element = jQuery(element);
    this.resetAllclasses();
    element.attr('class', "sel");
    var string = element.attr('id');
    this.setSubjectAndDefaultText(string);
  },

  isDefaultText: function(){
    var comment_value = jQuery("#feedback_comment").val();
    if((comment_value.blank()) || (comment_value == this.defaultText)){
      return true;
    }
    else{
      return false;
    }
  },

  setSubjectAndDefaultText: function(string){
    jQuery("#feedback_subject").val(string);
    var newDefaultText = FeedbackTranslations[string+ 'DefaultText'];

    if(this.isDefaultText()){
      jQuery("#feedback_comment").val(newDefaultText);
      jQuery("#feedback_comment").attr('placeholder', newDefaultText);
    }
    this.defaultText = newDefaultText;
    this.changeEventListeners();
  },

  changeEventListeners: function(){
    var element = jQuery("#feedback_comment");
    var selectedTabString = jQuery('.sel').attr('id');
    element.on("click", function() {clearDefaultText(this, FeedbackTranslations[selectedTabString + 'DefaultText'])});
    element.on("focus", function() {clearDefaultText(this, FeedbackTranslations[selectedTabString + 'DefaultText'])});
    element.on("blur", function() {setDefaultText(this, FeedbackTranslations[selectedTabString + 'DefaultText'])});
  },


  resetAllclasses: function(){
    jQuery("#suggestion").attr('class', "");
    jQuery("#problem").attr('class', "");
    jQuery("#question").attr('class', "");
    jQuery("#compliment").attr('class', "");
  },

  validate: function(){
    jQuery("#feedback_url").val(window.location.toString());
    var selectedTabString = jQuery('.sel').attr('id');
    if(this.isDefaultText()){
      jQuery('#feedback_error_message').html(FeedbackTranslations[selectedTabString + 'BlankText']);
      jQuery('#feedback_error_message').show();
      return false;
    }
  }
}

var MultiSelectAnswerSelector = {
  showSelected: function(id){
    jQuery('#' + id + ' input.multi_select_check_box[type=checkbox]').each(function(i, item) {
      if(!jQuery(item).is(':checked')) {
        jQuery(item).closest('.cjs_quicksearch_item').hide();
      }
    });
  },

  showAll: function(id){
    jQuery('#' + id + ' input.multi_select_check_box[type=checkbox]').each(function(i, checkBox) {
      jQuery(checkBox).closest('.cjs_quicksearch_item').show();
    })
  }
}

var MultiLineAnswer = {
  addAnswer: function(element, name, value, extraElementLabel, inputId){
    var my_div = jQuery('<div>');
    var inputId = inputId + Math.floor(Math.random()*1000);
    my_div.attr('class', 'input-group m-t');
    my_div.html("<input type='text' />");
    my_div.find('input').attr({'name': name, 'value': value, 'class': 'form-control has-next', 'id': inputId});
    var label = section508Common.createHiddenLabelWithText(inputId, extraElementLabel);
    my_div[0].appendChild(label[0]);
    var trash = jQuery('<span>', {'class': "input-group-addon"})
    var trash_link = jQuery('<a>',{'title': jsCommonTranslations.remove});
    trash.click(function() {
      var trashElement = this;
      if (jQuery(this).prevAll().val().blank())
        jQuery(this.parentNode).remove();
      else
        chronusConfirm(jsCommonTranslations.sureToDelete, function() {
          jQuery(trashElement.parentNode).remove();
        });
    });
    trash_link.html(jQuery('<i>', {'class':"fa fa-times text-default", 'title': jsCommonTranslations.remove}));
    trash[0].appendChild(trash_link[0]);
    my_div[0].appendChild(trash[0]);
    jQuery(element).before(my_div);
  }
}

var MeetingForm = {
  validateTitleAndDate: function(form_id, title_id, date_id, description_id, location_id, attendees_id, from_calendar, flash_id)
  {
    var meeting_form = jQuery("#" + form_id)
    var until_date_field = meeting_form.find('#meeting_repeats_end_date');
    var when_date_field = meeting_form.find('#' + date_id);
    var until_date = until_date_field.val();
    var when_date = when_date_field.val();

    ChronusValidator.ErrorManager.HideFieldError(until_date_field);
    ChronusValidator.ErrorManager.HideFieldError(when_date_field);

    var title_error = !RequiredFields.checkNonMultiInputCase(meeting_form.find('#' + title_id), meetingTranslations.topic);
    var date_error = !RequiredFields.checkNonMultiInputCase(meeting_form.find('#' + date_id), meetingTranslations.when);
    var attendees_error = false;

    if(meeting_form.find("#"+attendees_id).length > 0 && !from_calendar){
      attendees_error = !RequiredFields.checkMultiInputCase(meeting_form.find('#' + attendees_id));
    }

    var autocomplete_element = meeting_form.find('#student_name_auto_complete_for_meeting');
    var message = "";
    if(autocomplete_element.length > 0){
      ChronusValidator.ErrorManager.HideFieldError(autocomplete_element);
      var autocomplete_attendees_val = meeting_form.find('.cjs_auto_complete_meeting_attendee_ids').val();
      if (autocomplete_attendees_val.blank()){
        var autocomplete_attendees_error = true;
        ChronusValidator.ErrorManager.ShowFieldError(autocomplete_element);
        ChronusValidator.ErrorManager.ShowFieldError();
        message = meetingTranslations.invalidAttendees;
      }
    }

    var invalid_date_error = (new Date(when_date) > GroupsShow.DATE_LIMIT);
    var invalid_date_order_error = (until_date != undefined && new Date(until_date) < new Date(when_date));

    if(title_error || date_error || attendees_error || autocomplete_attendees_error) {
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, (meetingTranslations.requiredFields + message));
      return false
    }
    else if(invalid_date_error) {
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, meetingTranslations.invalidDate);
      return false
    }
    else if(invalid_date_order_error) {
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, meetingTranslations.invalidStartEndDate);
      ChronusValidator.ErrorManager.ShowFieldError(until_date_field);
      ChronusValidator.ErrorManager.ShowFieldError(when_date_field);
      return false
    }
    else {
      ChronusValidator.ErrorManager.ClearResponseFlash(flash_id);
    }

    var locationObj = meeting_form.find('#' + location_id);
    if (!from_calendar)
    {
      if(locationObj.val() == 'Location')
        locationObj.val("");
    }
    else
      {
        if (locationObj.val() == '-')
          locationObj.val("")
      }
      if (meeting_form.find('#' + description_id).val() == 'Description')
        meeting_form.find('#' + description_id).val("")

    return true;
  },
  // Takes the en_time which contains all the times at which the meeting can start and end
  // and toggles the end time to start_time + 30 min
  toggle_end_date: function(en_time, slot_diff, date_container, start_time_element, end_time_element, en_time_val)
  {
    var ele = jQuery(date_container + '.to_text');
    var en_time_array = en_time.split(',');
    var start_time_value = jQuery(date_container + 'select' + start_time_element).val();
    var end_val, end_time, ind;
    if(typeof en_time_val === 'undefined'){
      if (start_time_value == "12:00 am"){
        end_time = en_time_array[0];
      }
      else{
        ind = jQuery.inArray(start_time_value, en_time_array);
        end_time = en_time_array[ind + parseInt(slot_diff)];
      }
      end_val = end_time;
    }
    else{
      var en_time_val_array = en_time_val.split(',');
      ind = jQuery.inArray(start_time_value, en_time_val_array);
      end_time = en_time_array[ind + parseInt(slot_diff)];
      end_val = en_time_val_array[ind + parseInt(slot_diff)];
    }
    jQuery(date_container + 'input' + end_time_element).val(end_val);
    ele.text(end_time);
  },

  getHeader: function() {
    jQuery('#new_meeting').find('.pane_content').show('blind');
    jQuery('#new_meeting').find('#new_meeting_arrow_link').hide();
  },

  showEditMeetingQtip: function(meeting_selector, url, fromPopup){
    if(fromPopup){
      jQuery.ajax({
        url: url,
        success: function(content){
          replaceRemoteModalContent(content);
          CalendarAvailabilityInfo.initialize();
        }
      });
    }else{
      jQueryShowQtip("#"+meeting_selector, 540, url, "", { successCallback: function(){CalendarAvailabilityInfo.initialize()} });
    }
  },

  handleDelete: function(meetingId, destroyUrl, confirmationMsg, options){
    if(options.recurring){
      MeetingForm.showEditMeetingQtip(meetingId, options.destroyPopupUrl, options.fromPopup);
    } else {
      Meetings.hidePopup(destroyUrl, confirmationMsg);
    }
  },

  setMeetingTimePopup: function(buttonClass, meetingId, url){
    jQuery(buttonClass).on('click', function(){
      MeetingForm.showEditMeetingQtip(meetingId, url, false);
    });
  },

  setMeetingLocationPopup: function(buttonClass){
    jQuery(buttonClass).on('click', function(){
      var url = jQuery(this).data("url");
      jQueryShowQtip('#inner_content', 540, url, '', {modal: true});
    });
  },

  showEditMeetingForm:function(meeting_selector, url, fromPopup){
    jQuery(".edit_meeting_popup").on('click', function(){
      MeetingForm.showEditMeetingQtip(meeting_selector, url, fromPopup)
    });
  },

  showDelayedPopup: function(survey_answer_url){
    setTimeout(function(){
      jQueryShowQtip('#inner_content', 850, survey_answer_url,'',{modal: true});
    }, 250);
  },

  updateMeetingAreaState: function(content){
    setTimeout(function(){
      jQuery("#meeting_details").html(content);
    }, 150);
  },

  updateMeetingRepeatSection: function(start_time_field, meeting_schedule_rule){
    jQuery(start_time_field + "," + meeting_schedule_rule).on("change", function() {
      if ((jQuery("#repeats_on_week_day").is(":visible") || jQuery(this).attr("id") == 'meeting_schedule_rule') && jQuery(".cjs_meeting_repeats_on_week:checked").length == 0 && !jQuery(start_time_field).val().blank()) {
        var day_number = jQuery(start_time_field).hasClass('cjs-date-picker-added') ? jQuery(start_time_field).data("kendoDatePicker").value().getDay() : Date.parse(jQuery(start_time_field).val()).getDay();
        jQuery(".cjs_meeting_repeats_on_week[value='" + day_number + "']").prop("checked", true);
      }

      var repeat_every_help_field = jQuery(".cjs-repeat-every-help");
      switch(jQuery(this).val()) {
        case '1':
          jQuery(repeat_every_help_field).text(meetingTranslations.day);
          break;
        case '2':
          jQuery(repeat_every_help_field).text(meetingTranslations.week);
          break;
        case '3':
          jQuery(repeat_every_help_field).text(meetingTranslations.month);
          break;
      }
    })
  },

  editMeetingNote: function(id){
    jQuery("#cjs_edit_meeting_note_form" + id).on("submit", function(){
      var text = jQuery("#meeting_private_meeting_note_text_" + id);
      var textCheck = RequiredFields.checkNonMultiInputCase(text);
      return textCheck;
    });
  },

  addMeetingNote: function(){
    jQuery("#cjs_meeting_note_form").on("submit", function(){
      var text = jQuery("#private_meeting_note_text");
      var textCheck = RequiredFields.checkNonMultiInputCase(text);
      return textCheck;
    });
  },

  openRepeatSection: function(group_expiry_date){
    jQuery('.meeting_repeats').toggle();
  },

  submitMeetingForm: function(formId, modalId){
    jQuery(document).on('submit', '#' + formId, function(){
      jQuery("#remoteModal").modal('hide');
      jQuery("#" + modalId).modal('hide');
      jQuery("#loading_results").show();
    });
  },

  hideShortlistTimesHelpText: function(selector){
    jQuery(selector + " .cjs_shortlist_help_text").hide();
  },

  resetAutoUpdateTaskIdNotInitialized: true,
  resetAutoUpdateTaskId: function() {
    if(MeetingForm.resetAutoUpdateTaskIdNotInitialized) {
      jQuery(document).on("click", ".cjs_reset_auto_update_task_id", function(){
        MeetingForm.hideShortlistTimesHelpText("#cjs_past_meeting_modal");
        jQuery("#cjs_past_meeting_modal input.cjs_auto_update_task_id").val(0);
      });
      MeetingForm.resetAutoUpdateTaskIdNotInitialized = false;
    }
  }
}

var MentoringSlotForm = {
  validateDate: function(flash_id)  {
    var startDateEle = jQuery('.cjs_start_date');
    var endDateEle = jQuery('.cjs_end_date');
    return MentoringSlotForm.validateDateForGivenElements(flash_id, startDateEle, endDateEle);
  },


  validateDateForGivenElements: function(flash_id, startDateEle, endDateEle){
    var startDateVal = DateValidator.convertToEnDateFormat(startDateEle.val());
    var endDateVal = DateValidator.convertToEnDateFormat(endDateEle.val());

    var date_error = !RequiredFields.checkNonMultiInputCase(startDateEle, jsCommonTranslations.whenAsterisk);
    var invalid_date_error = (new Date(startDateVal) > GroupsShow.DATE_LIMIT);

    if(date_error || invalid_date_error) {
      ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, jsCommonTranslations.requiredFieldMissing);
      return false;
    }
    else if (endDateVal)
    {
      if ((new Date(startDateVal) == 'Invalid Date') || ((endDateVal) && (new Date(endDateVal) == 'Invalid Date')))
      {
        ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, jsCommonTranslations.enterValidDates);
        return false;
      }
      else if ((new Date(endDateVal)).getTime() < (new Date(startDateVal)).getTime())
      {
        ChronusValidator.ErrorManager.ShowResponseFlash(flash_id, jsCommonTranslations.endDateBeforeStartDate);
        return false;
      }
    }
    else
    {
      ChronusValidator.ErrorManager.ClearResponseFlash(flash_id);
    }
    return true;
  },
  toggleEndDate: function(repeats_every_selector, ancestor_class){
    var endDate = 'div#repeats_until'

    jQuery(document).on("change", repeats_every_selector, function() {
      var endDateObj = jQuery(this).closest(ancestor_class).find(endDate);
      if ((jQuery(this).val() == "") || (jQuery(this).val() == "0"))
        endDateObj.hide();
      else
        endDateObj.show();
    });
    jQuery(repeats_every_selector).change();
  },
  weeklyCheckboxModify: function(){
    jQuery('#mentoring_slot_datepicker').change(function() {
        jQuery('#repeats_on_week_day').find('input[type=checkbox]:checked').removeAttr('checked');
        var date = DateValidator.convertToEnDateFormat(this.value);
        date = new Date(date);
        var val = date.getDay();
        jQuery('.cjs_mentoring_slots_repeateds_on_week[value="'+val+'"]').prop('checked',true);
    });
  },
  toggleDayListing: function(daily_option, repeats_every_selector, ancestor_class){
    repeats_by_week_selector = 'div#repeats_on_week_day'

    jQuery(document).on("change", repeats_every_selector, function() {
      var weekSelectorObj = jQuery(this).closest(ancestor_class).find(repeats_by_week_selector);
      if (jQuery(this).val() == daily_option)
        weekSelectorObj.show();
      else
        weekSelectorObj.hide();
    });
    jQuery(repeats_every_selector).change();
  },
  toggleMonthOptions: function(monthly_option, repeats_every_selector, ancestor_class){
    repeats_by_month_selector = 'div#repeats_by_month_date'

    jQuery(document).on("change", repeats_every_selector, function() {
      var monthSelectorObj = jQuery(this).closest(ancestor_class).find(repeats_by_month_selector);
      if (jQuery(this).val() == monthly_option)
        monthSelectorObj.show();
      else
        monthSelectorObj.hide();
    });
    jQuery(repeats_every_selector).change();
  },
  getDateDetails: function(str){
    DAYS_ARRAY = ['Sun', 'Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat'];
    date = new Date(str);
    return details = {day_name : DAYS_ARRAY[date.getDay()],
      date : date.getDate(),
      day_num : date.getDay()}
  },
  toggleAdvancedDisplay: function(ele, id, ancestor_class)
  {
    jQuery(ele).closest(ancestor_class).find(id).toggle();
  }
}

var homeTableSearch = {
  searchTable: function(ele) {
    jQuery(document).ready(function() {
      jQuery(ele).dataTable({
        "oLanguage": {"sSearch": jsCommonTranslations.searchAllColumns}
      });
    } );
  }
}

var programEvent = {
  adminViewSelect: "#program_event_admin_view_id",
  hiddenAdminViewSelect: "#program_event_admin_view_hidden_id",
  initalizeActions: function(){
    jQuery(document).ready(function(){
      programEvent.handleViewChange();
      programEvent.triggerViewChange();
    });
  },
  handleViewChange: function(){
    jQuery(programEvent.adminViewSelect).change(function(){
      var selected_item = jQuery(this);
      var selected_value = selected_item.val();
      var selected_admin_view_is_deleted = selected_value == selected_item.data('deleted-admin-view-id');
      var admin_view_alert = jQuery('.cjs-admin-view-alert');
      var another_admin_view_was_selected_alert = jQuery('#another_admin_view_was_selected_alert');
      var current_admin_view_id = admin_view_alert.data('admin_view_id');

      if(selected_value=="new"){
        window.location.href = selected_item.attr("url");
      }
      else if(selected_value.blank() || selected_admin_view_is_deleted){
        jQuery(".cjs_admin_view_content").hide();
      }
      else{
        jQuery.ajax({
          url: selected_item.data("url"),
          data: {admin_view_id: selected_value}
        });
      }
      if (admin_view_alert.length > 0) {
        if (current_admin_view_id != selected_value && !selected_admin_view_is_deleted && !selected_value.blank()) {
          another_admin_view_was_selected_alert.show();
        } else {
          another_admin_view_was_selected_alert.hide();
        }
      }
    });
  },
  triggerViewChange: function(){
    jQuery(programEvent.adminViewSelect).trigger('change');
  },
  validateForm: function(flashId, timeErrorMsg, requiredFieldsMsg){
    var success = false;
    var time_error = false;
    var titleElement = jQuery("#program_event_title");
    var dateElement = jQuery("#new_program_event_form_date");
    var startTimeElement = jQuery("#program_event_start_time");
    var endTimeElement = jQuery("#program_event_end_time");
    var attendeeElement = jQuery("#program_event_admin_view_id");

    if(titleElement.length > 0 && dateElement.length > 0 && startTimeElement.length > 0 && attendeeElement.length > 0){
      var titleValue = ValidateRequiredFields.checkNonMultiInputCase(titleElement);
      var dateValue = ValidateRequiredFields.checkNonMultiInputCase(dateElement);
      var startTimeValue = ValidateRequiredFields.checkNonMultiInputCase(startTimeElement);
      var attendeeValue = ValidateRequiredFields.checkNonMultiInputCase(attendeeElement);
      var attendeeValueSelect2Box = attendeeElement.closest(".controls").find(".select2-choice");
      ChronusValidator.ErrorManager.ShowHideFieldError(attendeeValueSelect2Box, !attendeeValue);
      success = titleValue && dateValue && startTimeValue && attendeeValue;
    }
    if(startTimeElement.length > 0 && endTimeElement.length > 0 && !endTimeElement.val().blank()){
      time_error = new Date("December 17, 1995 " + startTimeElement.val()) > new Date("December 17, 1995 " + endTimeElement.val());
    }
    if(success){
      if(time_error){
        ChronusValidator.ErrorManager.ShowResponseFlash(flashId, timeErrorMsg);
        return false;
      }
      ChronusValidator.ErrorManager.ClearResponseFlash(flashId);
      return true;
    } else {
      ChronusValidator.ErrorManager.ShowResponseFlash(flashId, requiredFieldsMsg);
      return false;
    }
  },

  viewMoreEventDetails: function(){
    jQuery(".cui_program_event_description").each(function() {
      if(jQuery(this).height() == 90){
        jQuery(this).siblings().find("div#show_more_details").show();
      }
    });
  },

  initShowMoreLessInvitedDetails: function(){
    jQuery(document).on("click", ".cjs_see_more_event_details", function(){
      jQuery(this).hide();
      jQuery(this).next('.cjs_see_less_event_details').show();
      jQuery(this).parent().next('.cjs_invited_details').show();
    });

    jQuery(document).on("click", ".cjs_see_less_event_details", function(){
      jQuery(this).hide();
      jQuery(this).prev('.cjs_see_more_event_details').show();
      jQuery(this).parent().next('.cjs_invited_details').hide();
    });
  },

  setStatus: function(status) {
    jQuery('#program_event_status').val(status);
    return true;
  },

  initializeAdminViewChangeForm: function(eventId, confirmMessage){
    var formId = "#form_admin_view_change_event_" + eventId;
    jQuery(formId + " .cjs-admin_view_change_event").on("click", function(event){
      event.preventDefault();
      chronusConfirm(confirmMessage, function(){
        jQuery(formId).submit();
      });
    });
  },

  initializeSearch: function(){
    var cancelSearch = jQuery(".cancel-search");
    cancelSearch.on('click', function(event){
      event.preventDefault();
      cancelSearch.hide();
      jQuery("#search_content").val('');
      jQuery('#search_filter_form').submit();
    });
  },

  initFilterLoading: function() {
    jQuery(document).on('ajax:beforeSend', "#search_filter_form", function(){
      jQuery("#loading_results").show();
    });
  },

  timeChanged: function(){
    var fields = ["start_time", "end_time", "date", "time_zone_area", "time_zone_identifier"]
    for(var i = 0; i < fields.length; i++) {
      var field = fields[i];
      if(jQuery(".cjs_original_" + field).val() != jQuery(".cjs_selector_" + field).val()){
        return true;
      }
    }
    return false;
  },

  handleUpdation: function(status, isUpdateAction, startTimeErrorMessage, requiredFieldsErrorMessage, updateConfirmationMessage, updateAndSendInvitesMessage){
    programEvent.setStatus(status);
    if(!programEvent.validateForm('program_event_form_flash', startTimeErrorMessage, requiredFieldsErrorMessage)){
      return false;
    }
    if(isUpdateAction && programEvent.timeChanged()){
      chronusConfirm(updateConfirmationMessage, function(){
        jQuery("#new_program_event").submit();
      }, function(){ return false; }, updateAndSendInvitesMessage);
      return false;
    }
    return true;
  }
}

var ProgramEventTestmail = {
  toggleDetails: function() {
    if (jQuery('#program_event_email_notification').is(':checked')) {
      jQuery('#test_email_detail').show();
    } else {
      jQuery('#test_email_detail').hide();
    }
  },

  beforeShowPopup: function(defaultNotificationList) {
    jQuery('#test_send_success').hide();
    ChronusValidator.ErrorManager.ApplyFieldStatus(true, jQuery('#program_event_notification_list_for_test_email'));
    ProgramEventTestmail.clearNotificationList();
  },

  clearNotificationList: function() {
    jQuery("#program_event_notification_list_for_test_email").val("");
  },

  collectDetailsAndValidateForm: function(defaultNotificationList, src) {
    list = jQuery('#program_event_notification_list_for_test_email').val();
    if(src=="form"){
      jQuery('#test_email_title').val(jQuery('#program_event_title').val());
      jQuery('#test_email_location').val(jQuery('#program_event_location').val());
      jQuery('#test_email_date').val(jQuery('#new_program_event_form_date').val());
      jQuery('#test_email_start_time').val(jQuery('#program_event_start_time').val());
      jQuery('#test_email_end_time').val(jQuery('#program_event_end_time').val());
      jQuery('#test_email_time_zone').val(jQuery('#program_event_time_zone').val());
      jQuery('#test_email_description').val(CKEDITOR.instances.new_program_event_details.getData());
    }
    jQuery('#test_email_notification_list_for_test_email').val(jQuery('#program_event_notification_list_for_test_email').val());

    if (list == "" || list == defaultNotificationList) {
      ChronusValidator.ErrorManager.ApplyFieldStatus(false, jQuery('#program_event_notification_list_for_test_email'));
      return false;
    } else {
      ChronusValidator.ErrorManager.ApplyFieldStatus(true, jQuery('#program_event_notification_list_for_test_email'));
      jQuery("#modal_show_popup_link").modal('hide');
      return true;
    }
  }
}

var CalendarSettingForm = {
  raiseMissingFieldError: function(flashId, fillRequiredMsg)
  {
    ChronusValidator.ErrorManager.ShowResponseFlash(flashId, fillRequiredMsg, false);
  },

  raiseInvalidInputError: function(flashId, element, enterValidValue)
  {
    ChronusValidator.ErrorManager.ShowFieldError(element);
    ChronusValidator.ErrorManager.ShowResponseFlash(flashId, enterValidValue, false);
  },

  validateTextInput: function(flashId, elementSelector, fillRequiredMsg, enterValidValue, includeZero){
    var element = jQuery(elementSelector);
    if(!RequiredFields.checkNonMultiInputCase(element)){
      CalendarSettingForm.raiseMissingFieldError(flashId, fillRequiredMsg);
      return false;
    }
    else if(!ValidateRequiredFields.checkForIntegerInTextBox(element, true, includeZero)){
      CalendarSettingForm.raiseInvalidInputError(flashId, element, enterValidValue);
      return false;
    }
    else{
      ChronusValidator.ErrorManager.ClearResponseFlash(flashId);
      return true;
    }
  },

  validateCalendarSettingForm: function(flashId, fillRequiredMsg, enterValidValue){
    jQuery("form#cjs_connection_limit_form").submit(function(){
      var validFormInput = CalendarSettingForm.validateTextInput(flashId, "#calendar_setting_feedback_survey_delay_not_time_bound", fillRequiredMsg, enterValidValue, false);

      return validFormInput;
    });
  },

  validateMatchingCalendarSettingForm: function(flashId, fillRequiredMsg, enterValidValue){
    jQuery("form#cjs_connection_limit_form").submit(function(){
      if (jQuery('.cjs_one_time_matching_setting_details').is(':visible')){
        return CalendarSettingForm.validateTextInput(flashId, "#program_calendar_setting_advance_booking_time", fillRequiredMsg, enterValidValue, true);
      }
      else{
        return true;
      }
    });
  }
}

var CustomTerm = {
  validateForm: function() {
    var errCount = 0;
    jQuery("#custom_terms_form input[type=text]").each(function (i, e) {
      Obj = jQuery(e);
      if(Obj.val().blank()){
        ChronusValidator.ErrorManager.ShowFieldError(Obj);
        errCount++;
      }
    });
    if (errCount > 0){
      return false;
    }
  }
}

var MembershipRequestForm = {
  validate: function(invalidProfileAnswers) {
    for(var i = 0; i < invalidProfileAnswers.length; i++){
      ChronusValidator.ErrorManager.ShowFieldError(invalidProfileAnswers[i][0]);
      jQuery(invalidProfileAnswers[i][0]).after(invalidProfileAnswers[i][1]);
    }
  },

  highlightInvalidPassword: function(){
    if(jQuery("#membership_request_password").length > 0){
      ChronusValidator.ErrorManager.ShowFieldError(jQuery("#membership_request_password"));
      ChronusValidator.ErrorManager.ShowFieldError(jQuery("#membership_request_password_confirm"));
    }
  }
}

var OverViewPage = {
  updatePlayStoreLink: function(playStoreUrl){
    jQuery("a#cjs_android_play_store_link").attr("href", playStoreUrl);
  }
}

var GroupActivity = {
  showActivityDetails: function(content, group_id){
    var scope = "#group_activity_details_" + group_id;
    var tbody = scope + " tbody";
    jQuery(tbody).html(content + jQuery(tbody).html());
    jQuery(scope).find(".cjs_see_more_tr_link").hide();
    jQuery(scope).find(".cjs_see_less_tr_link").show();
    jQuery(scope).find(".follow_ajax_loader").hide();
  }
}

var DropdownFilter = {
  setPageHeight: function(){
    if(jQuery("#dropdown_filter_dummy_element").length == 0){
      jQuery("#inner_content").after("<div id='dropdown_filter_dummy_element'></div>");
    }
    var dummy_height = jQuery("#dropdown_filter_dummy_element").height();
    var inner_content_height = jQuery("#inner_content").height();
    var inner_content_top_offset = jQuery("#inner_content").offset().top;
    var filter_button_offset = jQuery(".dropdown_button_container").offset().top;
    var filter_button_height = jQuery(".dropdown_button_container").height();
    var filter_dropdown_height = jQuery("ul.dropdown-menu.dropdown-filter").height();
    var already_gone = (filter_button_offset+filter_button_height) - inner_content_top_offset;
    if (((already_gone + filter_dropdown_height) - inner_content_height) > 0){
      jQuery("#dropdown_filter_dummy_element").height((already_gone + filter_dropdown_height)-inner_content_height);
    }
  }
}

var ProgramInvite = {
  handleIncludeExpiredInvitations: function(cssSelector, checkedPath, uncheckedPath) {
    jQuery(document).on("click", cssSelector, function() {
      if(jQuery(this).is(":checked")) {
        window.location.replace(checkedPath);
      } else {
        window.location.replace(uncheckedPath);
      }
    });
  }
}

function isProtocolHTTPS () {
  return window.location.protocol == "https:"
}

var showHideElement = {
  initialize: function (parentSelector, dependentSelector) {
    jQuery(parentSelector).on('click', function() {
      if(jQuery(this).find('input:checkbox').is(':checked')){
        jQuery(this).next(dependentSelector).show();
      }
      else{
        jQuery(this).next(dependentSelector).hide();
      }
    });
  }
}

var clonePopup = {
  validateAndResetPopup: function (surveyName) {
    jQuery(document).on('click', '#survey_name_submit', function(){
      var isValid = ValidateRequiredFields.checkNonMultiInputCase(jQuery('#clone_survey_name'));
      if(isValid){
        SurveysGoogleAnalytics.handleCopySurvey()
      }
      return isValid
    });
    jQuery(document).on('click', '.close_image_link a', function(){
      jQuery('#clone_survey_name').css('border','none');
      jQuery('#clone_survey_name').val(surveyName);
    });
  }
}

var exportPopup = {
  validateTextInput: function () {
    return ValidateRequiredFields.checkNonMultiInputCase(jQuery('#solution_pack_created_by')) && ValidateRequiredFields.checkNonMultiInputCase(jQuery('#solution_pack_description'));
  }
}

// returns profile filter form data in correct format
var getProfileFilterFormData = function(){
  var formData = jQuery('#search_filter_form').serializeArray();
  var finalData = {}
  jQuery.each(formData, function(index, value){
    var dataName = formData[index].name;
    var dataValue = formData[index].value;
    if (!dataValue.blank()) {
      if(dataName.match(/\[\]$/)){
        finalData[dataName] = finalData[dataName] || [];
        finalData[dataName].push(dataValue);
      }else{
        finalData[dataName] = dataValue;
      }
    }
  });
  return finalData;
};

var adminViewInitSelect2 = {
  initializeCreateAdminViewLink: function (id, link) {
    jQuery(id).on("select2-open", function () {
      var resultsElement = jQuery('#select2-drop');
      if(0 == resultsElement.find('.create-admin-view').length) {
        resultsElement.append(jQuery(JST["templates/admin_views/create_new_admin_view_link"]({link: link})));
        jQuery(".cjs_create_admin_view_link").on("click", function () {
          window.location.href = jQuery(this).attr("href");
        });
      }
      return true;
    });
  },

  bindAccessibilityAttributes: function(id){
    jQuery("#s2id_" + id.substring(1) +".select2-container").each(function(){
      var container = jQuery(this);
      var bubbleInput = container.find("ul input.select2-input");
      var regularDropDownSearch = container.find("div.select2-search input.select2-input");
      var controlLabel = container.closest(".control-group").find("label.control-label");
      var select2Id;
      if(bubbleInput.length > 0){
        select2Id = bubbleInput.attr("id");
        controlLabel.attr("for", select2Id);
      }
      else if(regularDropDownSearch.length > 0){
        select2Id = container.find(".select2-focusser.select2-offscreen").attr("id");
        controlLabel.attr("for", select2Id);
        var select2SearchId  = "chronus-select2-dropdown-input-search-custom-" + Math.floor(Math.random()*100000);
        regularDropDownSearch.attr("id", select2SearchId);
        container.append(jQuery("<label>", {
          "for": select2SearchId,
          "html": jsCommonTranslations.searchUsers,
          "class": "sr-only"
        }));
      }
    });
  },

  addFalseLabel: function(id){
    var label = jQuery("<label>").attr("for", id.substring(1));
    label.html("False Label");
    label.addClass("sr-only");
    label.appendTo('body');
  },

  initialize: function (admin_view_result, id, link, addlabel) {
    jQuery(id).select2({
      data: { results: admin_view_result, text: 'title' },
      placeholder: preJsTranslations.baseAppJQuery.selectViewPlaceholder,
      formatResult: function(data){
        return jQuery(JST["templates/admin_views/admin_view_listing"]({
          data: data
        }));
      },

      formatSelection: function(data){
        if(data.icon !== undefined)
          return jQuery(JST["templates/admin_views/selected_admin_view"]({
            data: data
          }));
        return data.title;
      }
    });
    val = jQuery(id).data('selected');
    if(val !== undefined)
      jQuery(id).select2("val", val);
    adminViewInitSelect2.initializeCreateAdminViewLink(id, link);
    adminViewInitSelect2.bindAccessibilityAttributes(id);
    if(addlabel == true)
      adminViewInitSelect2.addFalseLabel(id);
  }
};

var ForgotPassword = {

  validateForgotPasswordForm: function(submitText, pleaseWaitText){
    jQuery(document).on("click", ".new_member_email .cjs_submit_btn", function(event){
      event.preventDefault();
      var resetPasswordEmail = jQuery(this).closest("form").find("input[id='member_email_email']");
      disableOrResetSubmitButton(".new_member_email", submitText, pleaseWaitText, true);

      var isEmailPresent = RequiredFields.checkNonMultiInputCase("#member_email_email");
      var isCaptchaPresent = RequiredFields.checkNonMultiInputCase("#captcha");
      var requiredFieldsPresent = isEmailPresent && isCaptchaPresent;
      var isEmailFormatValid = verifyEmailFormat(resetPasswordEmail.val());
      var isValid = requiredFieldsPresent && isEmailFormatValid;

      if(!isEmailFormatValid){
        ChronusValidator.ErrorManager.ShowFieldError(resetPasswordEmail);
      }
      if(!isValid){
        disableOrResetSubmitButton(".new_member_email", submitText, pleaseWaitText, false);
      } else {
        jQuery(this).closest("form").submit();
      }
    });
  }
};

var DateRangePicker = {
  wrapper: ".cjs_daterange_picker",
  startInput: "input.cjs_daterange_picker_start",
  endInput: "input.cjs_daterange_picker_end",
  presetSelect: ".cjs_daterange_picker_presets",
  hiddenField: ".cjs_daterange_picker_value",
  dateRangePickerForProfileQuestion: "<%= ProfileQuestionsHelper::DATE_RANGE_PICKER_FOR_PROFILE_QUESTION %>",

  updateDatePickerStart: function(endDatePicker){
    var endInput = endDatePicker.element;
    var startInput = jQuery(endInput).closest(DateRangePicker.wrapper).find(DateRangePicker.startInput);
    var start = jQuery(startInput).data("kendoDatePicker");
    var end = endDatePicker;
    var startDate = start.value();
    var endDate = end.value();

    if(endDate){
      endDate = new Date(endDate);
      endDate.setDate(endDate.getDate());
      start.max(endDate);
    }else if(startDate){
      end.min(new Date(startDate));
      start.max(end.max());
    }else{
      start.max(end.max());
    }
  },

  updateDatePickerEnd: function(startDatePicker){
    var startInput = startDatePicker.element;
    var endInput = jQuery(startInput).closest(DateRangePicker.wrapper).find(DateRangePicker.endInput);
    var start = startDatePicker;
    var end = jQuery(endInput).data("kendoDatePicker");
    var startDate = start.value();
    var endDate = end.value();

    if(startDate){
      startDate = new Date(startDate);
      startDate.setDate(startDate.getDate());
      end.min(startDate);
    }else if(endDate){
      start.max(new Date(endDate));
      end.min(start.min());
    }else{
      end.min(start.min());
    }
  },

  setStartAndEndDate: function(selectedPreset, wrapper, programStartDate, currentDate){
    var startInput = jQuery(wrapper).find(DateRangePicker.startInput);
    var endInput = jQuery(wrapper).find(DateRangePicker.endInput);
    var start = jQuery(startInput).data("kendoDatePicker");
    var end = jQuery(endInput).data("kendoDatePicker");

    var month = Date.parse("today").toString("MM");
    var year = Date.parse("today").toString("yyyy");
    var quarter = (Math.floor((month - 1) / 3)) + 1;
    var lastQuarter = (quarter > 1) ? quarter - 1 : lastQuarter = 4;
    var quarterYear = (lastQuarter < 4) ? year : Date.parse("today").add(-1).years().toString("yyyy");
    var lastQuarterStartDate = (lastQuarter < 4) ? "0"+(((lastQuarter - 1) * 3) + 1)+ "/01/" + quarterYear : (((lastQuarter - 1) * 3 ) + 1) + "/01/" + quarterYear;
    var quarterMonth = (Math.floor((month - 1) / 3) * 3) + 1;
    var quarterStartDate = (quarterMonth < 10) ? "0" + quarterMonth + "/01/" + year : quarterMonth + "/01/" + year;
    var dateStart = null;
    var dateEnd = null;

    if(selectedPreset == "today"){
      dateStart = Date.parse(currentDate);
      dateEnd = Date.parse(currentDate);
    }
    else if(selectedPreset == "last_7_days"){
      dateStart = Date.parse(currentDate).add(-7).days();
      dateEnd = Date.parse(currentDate);
    }
    else if(selectedPreset == "month_to_date"){
      dateStart = Date.parse("today").moveToFirstDayOfMonth();
      dateEnd = Date.parse(currentDate);
    }
    else if(selectedPreset == "year_to_date"){
      var x = Date.parse("today"); x.setMonth(0); x.setDate(1);
      dateStart = x;
      dateEnd = Date.parse(currentDate);
    }
    else if(selectedPreset =="last_month"){
      dateStart = Date.parse(currentDate).add(-1).months().moveToFirstDayOfMonth();
      dateEnd = Date.parse(currentDate).add(-1).months().moveToLastDayOfMonth();
    }
    else if(selectedPreset == "program_to_date"){
      dateStart = Date.parse(programStartDate);
      dateEnd = Date.parse(currentDate);
    }
    else if(selectedPreset == "quarter_to_date"){
      dateStart = Date.parse(quarterStartDate);
      dateEnd = Date.parse(currentDate);
    }
    else if(selectedPreset == "last_quarter"){
      dateStart = Date.parse(lastQuarterStartDate);
      dateEnd = Date.parse(lastQuarterStartDate).add(2).months().moveToLastDayOfMonth();
    }
    else if(selectedPreset == "last_year"){
      dateStart = Date.parse("01/01/" + Date.parse(currentDate).add(-1).years().toString("yyyy"));
      dateEnd = Date.parse("12/31/" + Date.parse(currentDate).add(-1).years().toString("yyyy"));
    }
    else if(selectedPreset == "last_30_days"){
      dateStart = Date.parse(currentDate).add(-30).days();
      dateEnd = Date.parse(currentDate);
    }
    else if(selectedPreset == "next_7_days"){
      dateStart = Date.parse(currentDate);
      dateEnd = Date.parse(currentDate).add(7).days();
    }
    else if(selectedPreset == "next_15_days"){
      dateStart = Date.parse(currentDate);
      dateEnd = Date.parse(currentDate).add(15).days();
    }
    else if(selectedPreset == "next_30_days"){
      dateStart = Date.parse(currentDate);
      dateEnd = Date.parse(currentDate).add(30).days();
    }

    // Updating limits before setting the value
    if(start.min() > dateStart)
      dateStart = start.min();
    if(end.max() < dateEnd)
      dateEnd = end.max();
    if(dateStart > dateEnd)
      dateEnd = dateStart;
    start.max(dateEnd);
    end.min(dateStart);
    DateRangePicker.setValueAndTriggerChange(start, dateStart);
    DateRangePicker.setValueAndTriggerChange(end, dateEnd);
  },

  updateHiddenField: function(kendoDatePicker, options){
    options = getDefaultVal(options, {});
    var element = kendoDatePicker.element;
    var wrapper = DateRangePicker.getDateRangePickerWrapper(element);
    var hiddenField = wrapper.find(DateRangePicker.hiddenField);
    var dateRangePickerValues = DateRangePicker.getDateRangePickerValues(wrapper, hiddenField);
    var concatenatedValue = "";

    if(dateRangePickerValues.startValue || dateRangePickerValues.endValue || options.forceSet){
      if(hiddenField.hasClass(DateRangePicker.dateRangePickerForProfileQuestion)){
        concatenatedValue = DateRangePicker.getDateRangePickerValueForProfileQuestion(dateRangePickerValues);
      }
      else {
        concatenatedValue += (dateRangePickerValues.startValue || dateRangePickerValues.endValue);
        concatenatedValue += datePickerTranslations.dateRangeSeparator;
        concatenatedValue += (dateRangePickerValues.endValue || dateRangePickerValues.startValue);
      }
    }
    hiddenField.val(concatenatedValue);
  },

  getDateRangePickerWrapper: function(dateRangeElement){
    return dateRangeElement.closest(DateRangePicker.wrapper);
  },

  getDateRangePickerValues: function(wrapper, hiddenField){
    var hiddenFieldFormat = hiddenField.data("date-format");
    var startDatePicker = wrapper.find(DateRangePicker.startInput).data("kendoDatePicker");
    var endDatePicker = wrapper.find(DateRangePicker.endInput).data("kendoDatePicker");
    values = {
      startDatePicker: startDatePicker,
      endDatePicker: endDatePicker,
      startValue: kendo.toString(startDatePicker.value() || "", hiddenFieldFormat),
      endValue: kendo.toString(endDatePicker.value() || "", hiddenFieldFormat),
      presetValue: wrapper.find(DateRangePicker.presetSelect).val()
    }
    return values;
  },

  getDateRangePickerValueForProfileQuestion: function(dateRangePickerValues){
    return [dateRangePickerValues.startValue, dateRangePickerValues.endValue, dateRangePickerValues.presetValue].join(datePickerTranslations.dateRangeSeparator);
  },

  setDateRangePickerForProfileQuestion: function(hiddenElement, value){
    var wrapper = DateRangePicker.getDateRangePickerWrapper(hiddenElement);
    var startDatePicker = wrapper.find(DateRangePicker.startInput).data("kendoDatePicker");
    var endDatePicker = wrapper.find(DateRangePicker.endInput).data("kendoDatePicker");
    var presetBox = wrapper.find(DateRangePicker.presetSelect);
    var values = value.split(datePickerTranslations.dateRangeSeparator);
    DateRangePicker.setValueAndTriggerChange(startDatePicker, Date.parse(values[0]));
    DateRangePicker.setValueAndTriggerChange(endDatePicker, Date.parse(values[1]));
    presetBox.val(getDefaultVal(values[2], "custom")).trigger('change');
  },

  clearInputs: function(hiddenElement){
    var wrapper = jQuery(hiddenElement).closest(DateRangePicker.wrapper);
    var presetSelect = wrapper.find(DateRangePicker.presetSelect);
    var start = wrapper.find(DateRangePicker.startInput).data("kendoDatePicker");
    var end = wrapper.find(DateRangePicker.endInput).data("kendoDatePicker");

    DateRangePicker.setValueAndTriggerChange(start, "");
    DateRangePicker.setValueAndTriggerChange(end, "");
    start.enable();
    end.enable();
    presetSelect.val("custom").trigger('change');
  },

  setValueAndTriggerChange: function(datePicker, value){
    datePicker.value(value);
    // updating the values programatically will not trigger the 'change' event binded to the date-picker
    // so, triggering it explicitly.
    datePicker.trigger('change');
  },

  showErrors: function(hiddenElement){
    var wrapper = jQuery(hiddenElement).closest(DateRangePicker.wrapper);
    ChronusValidator.ErrorManager.ShowFieldError(wrapper.find(DateRangePicker.startInput));
    ChronusValidator.ErrorManager.ShowFieldError(wrapper.find(DateRangePicker.endInput));
  },

  hideErrors: function(hiddenElement){
    var wrapper = jQuery(hiddenElement).closest(DateRangePicker.wrapper);
    ChronusValidator.ErrorManager.HideFieldError(wrapper.find(DateRangePicker.startInput));
    ChronusValidator.ErrorManager.HideFieldError(wrapper.find(DateRangePicker.endInput));
  },

  makeWCAGChangesForDateRangePicker: function(dateRangePicker){
    var presetElement = dateRangePicker.find(".cjs_daterange_picker_presets");
    var presetComponent = {element: presetElement, label: presetElement.closest(".form-group").find("label"), idPrefix: "cjs_daterange_picker_presets_"};
    var startRangeElement = dateRangePicker.find(".cjs_daterange_picker_start");
    var startRangeComponent = {element: startRangeElement, label: startRangeElement.closest(".input-group").find("label"), idPrefix: "cjs_daterange_picker_start_", setRandId: true};
    var endRangeElement = dateRangePicker.find(".cjs_daterange_picker_end");
    var endRangeComponent = {element: endRangeElement, label: endRangeElement.closest(".input-group").find("label"), idPrefix: "cjs_daterange_picker_end_", setRandId: true};

    var newRandId = generateRandomIdForDatepicker();
    [presetComponent, startRangeComponent, endRangeComponent].forEach(function(component){
      var newId = component.idPrefix + newRandId;
      component.element.attr("id", newId);
      component.label.attr("for", newId);
      if(component.setRandId) {
        component.element.attr("data-rand-id", "datepicker-" + generateRandomIdForDatepicker());
        component.element.data("min-date", "");
        component.element.data("max-date", "");
      }
    }); 
  }
};

function showSweetAlert(options, okMethod, cancelMethod){
  var defaultOptions = {
    closeOnConfirm: true,
    animation: false,
    confirmButtonColor: null,
    html: true,
    confirmButtonText: jsCommonTranslations.popup.ok
  };
  var settings = jQuery.extend({}, defaultOptions, options);

  swal(settings, function(isConfirm){
    if(isConfirm && okMethod !== undefined)
      okMethod();
    else if(!isConfirm && cancelMethod !== undefined)
      cancelMethod();
  });
  // SweetAlert adds a fieldset irrespective of its type, which is causing ADA compliance error
  // so, hiding it - because removing it causes error
  if(!settings.type || settings.type !== "input"){
    jQuery(".sweet-alert").find("fieldset input").attr("type", "hidden");
  }
  // WCAG 2.0 Compliance: https://dequeuniversity.com/rules/axe/2.1/tabindex
  jQuery(".sweet-alert").find("input, button").removeAttr("tabindex");
}

var Comment = {

  commentFormInitialized: false,

  selectors: {
    commentsContainer: ".cjs_comments_container",
    commentForm: ".cjs_comment_form",
    commentFormSubmit: ".cjs_comment_button",
    commentFormIdPrefix: "#cjs_comment_form_",
    commentInput: ".cjs_comment_body",
    commentActions: ".cjs_comment_actions",
    commentCancel: ".cjs_comment_cancel",
    commentCheckBox: ".cjs_comment_form_checkbox",
    allCommentsContainer: ".cjs_all_comments",
    lessCommentsContainer: ".cjs_less_comments",
    viewAllLink: ".cjs_view_all_comments_link",
    viewAllLabel: ".cjs_view_all_comments_label",
    viewLessLink: ".cjs_view_less_comments_link",
    individualComment: ".cjs_individual_comment"
  },

  initializeForm: function(errorMessage, rows) {
    if(!Comment.commentFormInitialized){
      Comment.initializeCommentForm(rows);
      Comment.handleCancelButton();
      Comment.validateForm(errorMessage);
      Comment.handleViewAllLink();
      Comment.handleViewLessLink();
      Comment.commentFormInitialized = true
    }
  },

  initializeCommentButton: function() {
    jQuery(".cjs_comment_action_button").on("click", function() {
      var commentFormId = Comment.selectors.commentFormIdPrefix + jQuery(this).data("comment-form-suffix");

      jQueryScrollTo(commentFormId);
      jQuery(commentFormId).find(Comment.selectors.commentInput).trigger('focus');
    });
  },

  initializeCommentForm: function(rows) {
    if(rows == undefined) {
      rows = 3;
    }

    jQuery(document).on("focus", Comment.selectors.commentInput, function() {
      var commentForm = jQuery(this).closest(Comment.selectors.commentForm);

      jQuery(this).attr("rows", rows);
      commentForm.find(Comment.selectors.commentActions).show();
      commentForm.find(Comment.selectors.commentCheckBox).show();
    });
  },

  handleCancelButton: function(){
    jQuery(document).on("click", Comment.selectors.commentCancel, function() {
      var commentForm = jQuery(this).closest(Comment.selectors.commentForm);
      var commentInput = commentForm.find(Comment.selectors.commentInput);
      var commentActions = commentForm.find(Comment.selectors.commentActions);
      var fileInput = commentForm.find(".quick_file");

      commentInput.attr("rows", "1");
      commentInput.val("");
      commentActions.hide();
      commentForm.find(Comment.selectors.commentCheckBox).hide();
      if(fileInput.length != 0 && fileInput.val() != "")
        commentActions.find(".cjs_remove_comment_attachment").click();
    });
  },

  validateForm: function(errorMessage){
    jQuery(document).on("click", Comment.selectors.commentFormSubmit, function(event) {
      event.preventDefault();
      var commentForm = jQuery(this).closest(Comment.selectors.commentForm);

      if(!RequiredFields.checkNonMultiInputCase(jQuery(commentForm).find(Comment.selectors.commentInput))) {
        ChronusValidator.ErrorManager.ShowResponseFlash("", errorMessage);
      } else {
        toastr.clear();
        commentForm.submit();
      }
    });
  },

  handleViewAllLink: function() {
    jQuery(document).on("click", Comment.selectors.viewAllLink, function() {
      var commentsContainer = jQuery(this).closest(Comment.selectors.commentsContainer);
      var lessCommentsContainer = commentsContainer.find(Comment.selectors.lessCommentsContainer);

      jQuery.ajax({
        url: jQuery(this).data("url"),
        dataType: "json",
        beforeSend: function() {
          jQuery("#loading_results").show();
        },
        success: function(data) {
          jQuery("#loading_results").hide();
          commentsContainer.find(Comment.selectors.allCommentsContainer).remove();
          jQuery(Comment.selectors.viewAllLabel).html(data.view_all_comments_label);
          jQuery(data.content).insertAfter(lessCommentsContainer);
          Comment.showAllComments(commentsContainer);
        }
      });
    });
  },

  handleViewLessLink: function() {
    jQuery(document).on("click", Comment.selectors.viewLessLink, function() {
      var commentsContainer = jQuery(this).closest(Comment.selectors.commentsContainer);

      Comment.hideAllComments(commentsContainer);
    });
  },

  showAllComments: function(commentsContainer) {
    commentsContainer.find(Comment.selectors.lessCommentsContainer).hide();
    commentsContainer.find(Comment.selectors.viewAllLink).hide();
    commentsContainer.find(Comment.selectors.allCommentsContainer).show();
    commentsContainer.find(Comment.selectors.viewLessLink).show();
  },

  hideAllComments: function(commentsContainer) {
    lessCommentsContainer = commentsContainer.find(Comment.selectors.lessCommentsContainer);
    allCommentsContainer = commentsContainer.find(Comment.selectors.allCommentsContainer);

    lessCommentsContainer.html("");
    recentComments = allCommentsContainer.children(Comment.selectors.individualComment).slice(<%= -CommentsHelper::DISPLAY_LIMIT %>);
    jQuery.each(recentComments, function(index, recentComment) {
      lessCommentsContainer.append(recentComment);
    });

    commentsContainer.find(Comment.selectors.allCommentsContainer).hide();
    lessCommentsContainer.show();
    commentsContainer.find(Comment.selectors.viewLessLink).hide();
    commentsContainer.find(Comment.selectors.viewAllLink).show();
  }
};

function replaceRemoteModalContent(replaceContent){
  jQuery("#remoteModal .modal-content").html(replaceContent);
}

function addAccessibilityContentToEmptyLinks(element, content) {
  jQuery(element).append("<span class='sr-only'>" + content + "</span>");
}

function addAccessibilityLabelForInputs(element, inputId, content) {
  jQuery(element).after("<label class='sr-only' for='" + inputId + "'>" + content + "</label>");
}

function resetClassesForProgramNameHeader() {
  jQuery("#org_or_program_header_name li:visible").removeClass("inline pull-left cui-programs-listing-header-full-max-width");
  jQuery("#org_or_program_header_name .my_programs_listing_link big").removeClass("inline vertical-align-top cui-programs-listing-header-medium-max-width");
}

function handleProgramNameHeaderWidth() {
  // Code for handling very long program names in the nav-bar header
  if(jQuery("#org_or_program_header_name .my_programs_listing_link").width() + jQuery("#org_or_program_header_name i.fa-caret-down").width() >= jQuery("#org_or_program_header_name").width()){
    jQuery("#org_or_program_header_name li:visible").addClass("inline pull-left cui-programs-listing-header-full-max-width");
    jQuery("#org_or_program_header_name .my_programs_listing_link big").addClass("inline vertical-align-top cui-programs-listing-header-medium-max-width");
  }
  if(jQuery("#org_or_program_header_name .my_programs_listing_link i.fa-caret-down:hidden").hasClass("cjs-show-dropdown")){
    jQuery("#org_or_program_header_name .my_programs_listing_link i.fa-caret-down").show();
  }
}

var progressBar = {
  pollForData: false,
  onCompletionFunction: '',
  pollUrl: '',

  updateProgress: function(data, elementId){
    var percentage = data.percentage
    var element = jQuery('#'+elementId);
    var progressBarWidth = percentage * element.width() / 100;
    element.find('div').animate({ width: progressBarWidth }, 500);
    if(data.completed){
      progressBar.endProgressBar(elementId)
    }
  },

  initializeProgressBar: function(pollUrl, elementId, onCompletionFunction){
    progressBar.pollUrl = pollUrl;
    progressBar.showProgressBar(elementId);
    progressBar.initializePolling(pollUrl, elementId);
    if (typeof onCompletionFunction !== 'undefined'){
      progressBar.onCompletionFunction = onCompletionFunction
    }
    else{
      progressBar.onCompletionFunction = progressBar.defaultonCompletionFunction
    }
  },

  showProgressBar: function(elementId){
    var element = jQuery('#'+elementId)
    jQuery('#progress_bar_container').modal({
      keyboard: false,
      show: true,
      backdrop: 'static'
    });
    // pulsate.startPulse();
  },

  initializePolling: function(pollUrl, elementId){
    progressBar.pollForData = true;
    progressBar.pollServer(elementId)
  },

  endProgressBar: function(elementId){
    // pulsate.stopPulse();
    progressBar.stopPolling(elementId)
    // Clear or Change UI upon completion
    progressBar.onCompletionFunction(elementId);
  },

  stopPolling: function(elementId){
    progressBar.pollForData = false;
  },

  pollServer: function(elementId){
    jQuery.ajax({
      url: progressBar.pollUrl,
      success: function(data){
        if(data[0].success){
          progressBar.updateProgress(data[0], elementId);
        }
        if(progressBar.pollForData){
          setTimeout(progressBar.pollServer, 5000, elementId);
        }
      }
    });
  },

  defaultonCompletionFunction: function(elementId){
    var element = jQuery('#'+elementId)
    jQuery('#progress_bar_container').modal('hide');
  }
};

var MobilePrompt = {
  gaCategory: "mobile prompt",
  gaTrackMobilePrompt: function(eventLabel, eventValue){
    jQuery(".prompt_ga_track").on('click', function(){
      var element = jQuery(this);
      var promptAction = element.data('event');
      if(element.hasClass("mobile_prompt_selection")){
        jQuery.cookie('<%= MobileV2Constants::MOBILE_APP_PROMPT %>', false, { expires: <%= MobileV2Constants::MOBILE_PROMPT_COOKIE_EXPIRY %>, path: '/' });
      }
      chrGoogleAnalytics.addEvent(MobilePrompt.gaCategory, promptAction, eventLabel, parseInt(eventValue));
    });
  },
  showAndroidOpenAppFlash: function(message){
    jQuery(".open_app").on('click', function(){
      setTimeout(function () {
        toastr.remove();
        toastr.success(message);
      }, 500);
    });
  },
  openLinkInApp: function(url){
    var appUrl = "chronustd://?previous_url=" + url;
    window.location = appUrl;
    setTimeout(function () { 
      jQuery(".mobile_prompt").show();
      jQuery(".open_app").click();
    }, 2000);
  }
};

var Mobile = {
  initializeMobileMenu: function(){
    jQuery('.cjs_mobile_more_tab').click(function () {
      jQuery('.mobile_footer').toggleClass('hide');
    });
    jQuery("#content_wrapper").on("click", function(event) { 
      if(isMobileOrTablet() && jQuery("#content_wrapper").hasClass("cjs_hide_on_outside_click") && jQuery("body.body-small").hasClass("mini-navbar")){
        if(!jQuery(event.target).closest('#sidebarLeft').length && !jQuery(event.target).is('#sidebarLeft')) {
          if(jQuery('#sidebarLeft').is(":visible")) {
            if(window.location.hash.indexOf(jQuery('#sidebarLeft').attr('id')) != -1)
              window.history.back();
            jQuery('.mobile_footer').toggleClass('hide');
          }
        }
      }
    });
  },

  initializeMobileSearchActions: function(){
    jQuery('#top-search-mobile').on("focus", function() {
      jQueryScrollTo('#content_wrapper', false, 50);
    });
  },

  fixMobileLastElementVisibility: function(){
    if(jQuery('.listing .list-group .list-group-item').size() > 0) {
      jQuery('.listing .list-group .list-group-item:last-child .btn-group.visible-xs').addClass('dropup');
      jQuery('.listing .list-group .list-group-item:last-child .visible-xs .btn-group').addClass('dropup');
    }
    else if(jQuery('#groups').size() > 0) {
      jQuery("#groups .ibox:last-child .ibox-content .btn-group.visible-xs").addClass('dropup');
    }
    else if(jQuery('#cjs_project_requests_listing').size() > 0) {
      jQuery('#cjs_project_requests_listing .list-group-item:last .visible-xs .btn-group').addClass("dropup");
    }
    else if(jQuery('#find_new_projects_results_pane').size() > 0){
      jQuery('#find_new_projects_results_pane .ibox:last .ibox-content .btn-group.visible-xs').addClass("dropup");
    }
  },

  hideModalOnBackButtonClick: function(){
    var backButtonClicked;
    jQuery(document).on('shown.bs.modal', function() {
      backButtonClicked = false;
      mobileModalId = jQuery('.modal:visible').attr('id');
        window.location.hash += mobileModalId;
    });
    jQuery(document).on('hidden.bs.modal', function() {
      if(!backButtonClicked){
        window.history.back();
      }
    });
    window.onhashchange = function() {
      if (window.location.hash.indexOf(mobileModalId) == -1){
        backButtonClicked = true;
        if(jQuery('.cjs_slick_modal_close_link').is(':visible')){
          jQuery("#" + mobileModalId + " .slick-active .cjs_slick_modal_close_link").click();
        }
        else{
          jQuery("#" + mobileModalId).modal('hide');
        }
      }

      if(jQuery('#sidebarLeft').is(":visible") && window.location.hash.indexOf(jQuery('#sidebarLeft').attr('id')) == -1){
        jQuery("#content_wrapper").trigger('click');
      }

      if (sidePaneOpened && window.location.hash.indexOf(jQuery('#SidebarRightHomeContent').attr('id')) == -1){
        if(jQuery('[data-toggle=offcanvasright] i#cjs-chevron-header').hasClass('fa-chevron-left')){
          GroupTabs.mobileToggleToMainContent();
        } 
        sidePaneOpened = false;
      }
    }
  }

};

// Based on https://gist.github.com/olimortimer/6775681
// Fastclick and select2 do not go well together causing touch events not getting triggered in mobile
// The following work-around will help us overcome this issue
function removeFastClickForSelect2(container){
  container.addClass("needsclick");
}

function updateCurPageInfo(count){
  var curPageBlock = jQuery(".cur_page_info");
  var updatedCount = parseInt(count);
  if(updatedCount === 0){
    curPageBlock.hide();
  }else{
    var range = curPageBlock.find("b").first().text().split(" - ");
    var currentCount = curPageBlock.find("b").last().text();
    var delta = parseInt(currentCount) - updatedCount;

    range[1] = parseInt(range[1]) - delta;
    if(range[1] < parseInt(range[0])){
      curPageBlock.hide();
    }else{
      curPageBlock.find("b").first().text(range.join(" - "));
      curPageBlock.find("b").last().text(updatedCount);
      curPageBlock.show();
    }
  }
}

var jQueryAutoCompleter = function(field_id, options){
  var inputObj = jQuery(field_id);
  var updateElement = field_id +"_auto_complete";
  var loader = jQuery("#"+ options['indicator']);

  var highlightText = function(text, regEx){
    return text.replace(regEx, "<strong class='highlight'>$1</strong>");
  },

  processLabel = function(term, label){
    var regEx = new RegExp("(" + term + ")", "gi");
    var start = "<%= AUTOCOMPLETE_EMAIL_BEGINNING %>";
    var end = "<%= AUTOCOMPLETE_EMAIL_END %>";
    var name_email= label.match("(.*)" + start + "(.*)" + end);
    if(name_email != null && name_email.length > 2){
      var name = highlightText(name_email[1], regEx);
      var email = highlightText(name_email[2], regEx);
      return name + start.escapeHTML() + email + end.escapeHTML();
    }
    else{
      return highlightText(label, regEx);
    }
  };

  inputObj.autocomplete({
    minLength: options['min_chars'],
    appendTo: updateElement,
    delay: 150,
    autoFocus: true,
    search: function(){
      if(loader.length > 0){
        loader.show();
      }
    },
    open: function() {
      var width = "";
      // To set the width of the autocomplete results menu
      // In form text areas will autosize so rely on the input container for width
      if(inputObj.closest(".controls").length > 0){
        width = inputObj.closest(".controls").width();
      }else{
        width = inputObj.outerWidth() + loader.outerWidth();
      }
      var styles = {
        'position': 'absolute',
        'width':  width + 'px'
      };
      jQuery(updateElement +" ul").css(styles);
      jQuery(updateElement).css(styles);
    },
    focus: function() {
      jQuery(updateElement +" li:has(a.ui-state-focus)").addClass('selected');
      jQuery(updateElement +" li.selected:not(:has(a.ui-state-focus))").removeClass('selected');
    },
    select: function(event, ui ) {
      var currentItem = ui.item;
      // To prevent autocomplete plugin to set the selected value as input value
      if(options.hasOwnProperty('clear_text')){
        inputObj.val("");
      }else if(currentItem.hasOwnProperty('value') && (currentItem.value != null || currentItem.value.length > 0)){
        inputObj.val(ui.item.value.unescapeHTML());
      }
      return false;
    },
    source: function(request, response){
      var dataObj = {};
      dataObj[options['param_name']] = request.term;
      jQuery.ajax({
        url: options['url'],
        dataType: "json",
        data: dataObj,
        success: response,
        complete: function(){
          if(loader.length > 0){
            loader.hide();
          }
        }
      });
    }
  }).data('ui-autocomplete')._renderItem = function(ul, item){
      var value = "";
      if(item.hasOwnProperty('render_html') && (item.render_html != null || item.render_html.length > 0)){
        // Special case to render the rich html in autocomplete menu
        value = item.render_html;
      }else if(item.hasOwnProperty('label') && (item.label != null || item.label.length > 0)){
        value = item.label.escapeHTML();
        if(options.hasOwnProperty('highlight')){
          var term = this.term;
          if(term != null && term.length > 0){
            value = processLabel(term, item.label);
          }
        }
      }
      jQuery(ul).addClass("list-group white-bg table-bordered");
      return jQuery( "<li class='list-group-item p-l-xs word_break'></li>" )
        .data("item.ui-autocomplete", item)
        .append("<a class='no-padding'>" + value + "</a>")
        .appendTo(ul);
    };
    jQuery(document).on("mouseleave", updateElement + " ul", function(){
      jQuery(updateElement +" li.selected a.ui-state-focus").removeClass('ui-state-focus');
      jQuery(updateElement +" li.selected").removeClass("selected");
    });
    jQuery(document).on("keyup", field_id, function(){
      jQuery(updateElement +" li.selected:not(:has(a.ui-state-focus))").removeClass('selected');
    });
    jQuery(document).on("keydown", field_id, function(){
      jQuery(updateElement +" li.selected:not(:has(a.ui-state-focus))").removeClass('selected');
    });
};

var carousel = {
  slickCarousel: function(className, options){
    var defaultOptions = {
      centerMode: false,
      infinite: false,
      draggable: false
    };
    var carouselOptions = jQuery.extend({}, defaultOptions, options);
    jQuery(className).slick(carouselOptions);
  },

  addCarousel: function(className, options){
    carousel.slickCarousel(className, options);
    jQuery(className + ' .slick-list').removeClass("draggable");
    jQuery(window).resize(function() {
      setTimeout(function(){jQuery(className + ' .slick-list').removeClass("draggable");}, 750);
    });

    //Below code is added to prevent WCAG errors
    jQuery('.slick_box').each(function () {
      var slide = jQuery(this).parent();    
      if (slide.attr('aria-describedby') != undefined) {
          jQuery(this).attr('id', slide.attr('aria-describedby'));
      }
    });
  },

  // In some cases, we need to calculate the height of an element which is not visible because of timeout. 
  // https://stackoverflow.com/questions/9117738/jquery-getting-a-hidden-elements-height
  calculateHeight: function(slideSelector){
    slickHeight = 0;
    if(slideSelector.is(":visible"))
      slickHeight = slideSelector.height();
    else {
      id = "slideSelectorClone"
      jQuery(slideSelector)
      .clone().appendTo('body')
      .attr('id', id)
      .css({
        'display': 'block',
        'position': 'absolute',
        'left': '-10000px'
      });
      slickHeight = jQuery("#slideSelectorClone").height();
      jQuery("#slideSelectorClone").remove();
    }
    return slickHeight;
  }, 

  showAdaptiveHeight: function(slickClass, slideSelector, timeout){
    setTimeout(function(){
      var slideHeight = carousel.calculateHeight(slideSelector);
      jQuery(slickClass).css('height', slideHeight + 'px');
    }, timeout);
  },

  showHiddenAnnouncements: function(slickBox, ModalFooter, timeout){
    setTimeout(function(){
      jQuery(slickBox).show();
      jQuery(ModalFooter).show();
    }, timeout);
  }
};

var orgListingPage = {
  inlineEditAccountName: function(){
    jQuery('#orgs').Tabledit({
      url: '/inline_edit_organizations',
      editButton: false,
      deleteButton: false,
      hideIdentifier: true,
      warningClass: '',
      columns: {
          identifier: [0, 'id'],
          editable: [[1, 'account_name']]
      }
    });
  }
};

var GlobalReport = {
  performDateRangeFilter: function(targetPath, targetData) {
    jQuery.ajax({
      url: targetPath,
      data: targetData,
      beforeSend: function() { jQuery(commonReportFilters.lastClickedSubmitButton).closest(".dropdown-with-datepicker.open").removeClass("open"); jQuery('#loading_results').show(); },
      complete: function() { jQuery('#loading_results').hide(); }
    });
  }
};

var DiversityReports = {
  updateTimeRange: function() {
    var dataContainer = jQuery(commonReportFilters.lastClickedSubmitButton).closest(".cjs-container-diversity-report");
    GlobalReport.performDateRangeFilter(dataContainer.data('path'), {date_range: (jQuery("#report_time_filter_form_diversity_report_time_range_" + dataContainer.data('id') + " .cjs_daterange_picker_value").val())});
  },

  getHighChartDataLabel: function(labelsArray, arrayIndex){
    return ((labelsArray[arrayIndex] > 0) ? labelsArray[arrayIndex] : "");
  }
};

var OverallImpact = {
  updateTimeRange: function(submitUrl) {
    GlobalReport.performDateRangeFilter(submitUrl, commonReportFilters.defaultFilterData({dateRangePickerSelector: "#report_time_filter_form_global_reports_overall_impact .cjs_daterange_picker_value"}));
  },

  makeRequest: function(requestUrl, loaderContainerSelector, loader){
    jQuery.ajax({
      url: requestUrl,
      beforeSend: function(){
        jQuery(loaderContainerSelector).html(loader);
      }
    });
  }
};


var commonReportFilters = {
  GA_CATEGORY: "Report",
  GA_ACTION_DATE_FILTER: "Date Filter",
  GA_ACTION_OTHER_FILTERS: "Other Filters",
  GA_ACTION_EXPORT: "Export",
  GA_ACTION_CLOSE_FILTER: "Close Other Filters",
  kendoClickInsideDropdown: false,
  dataUrl: "",
  dataParams: "",
  gaLabel: "",
  gaLabelId: "",
  submitFunction: "",
  resetFunction: "",
  preFilterFunction: "",
  initialized: false,
  lastClickedSubmitButton: null,

  initializeTimeFilter: function(){
    if(!commonReportFilters.initialized) {
      commonReportFilters.initialized = true;
      jQuery(document).on('click', '.k-animation-container, td[role="gridcell"]', function(){
        if(jQuery(document).find(".dropdown.dropdown-with-datepicker").length > 0){
          commonReportFilters.kendoClickInsideDropdown = true;
        }
      });

      jQuery(document).on("hide.bs.dropdown", '.dropdown.dropdown-with-datepicker', function() {
        if(commonReportFilters.kendoClickInsideDropdown){
          commonReportFilters.kendoClickInsideDropdown = false;
          return false;
        }
        else{
          return true;
        }
      });

      jQuery(document).on('click', '.cjs-report-time-filter-submit', function(){
        chrGoogleAnalytics.addEvent(commonReportFilters.GA_CATEGORY, commonReportFilters.GA_ACTION_DATE_FILTER, commonReportFilters.gaLabel, commonReportFilters.gaLabelId);
        eval(commonReportFilters.preFilterFunction);
        commonReportFilters.lastClickedSubmitButton = jQuery(this);
        commonReportFilters.submitData();
      });
    }
  },

  initializeOtherFilters: function(){
    jQuery(".report-actions").on("click", ".cjs_filter_report_link", function(){
      jQuery("#cjs_filter_report").modal('show');
      jQuery(".cjs_add_one_more_filter").find('.waves-ripple').remove();
    });

    jQuery('#other_report_filters_footer').on('click', '.cjs-report-other-filters-submit', function(){
      chrGoogleAnalytics.addEvent(commonReportFilters.GA_CATEGORY, commonReportFilters.GA_ACTION_OTHER_FILTERS, commonReportFilters.gaLabel, commonReportFilters.gaLabelId);
      eval(commonReportFilters.preFilterFunction);
      commonReportFilters.submitData();
    });

    jQuery("#other_report_filters_footer").on("click", ".cjs_other_filters_reset", function(){
      eval(commonReportFilters.resetFunction)
    });

    jQuery("#cjs_filter_report").on("click", ".cjs-web-modal-cancel, .cjs_other_filters_cancel", function(){
      chrGoogleAnalytics.addEvent(commonReportFilters.GA_CATEGORY, commonReportFilters.GA_ACTION_CLOSE_FILTER, commonReportFilters.gaLabel, commonReportFilters.gaLabelId);
    });
  },

  initializeExport: function(){
    jQuery(document).on('click', '.cjs-reports-export-options', function(){
      chrGoogleAnalytics.addEvent(commonReportFilters.GA_CATEGORY, commonReportFilters.GA_ACTION_EXPORT, commonReportFilters.gaLabel, commonReportFilters.gaLabelId);
    });
    commonReportFilters.initializeAjaxExport();
  },

  initializeAjaxExport: function(){
    jQuery(".report-actions").on("click", ".cjs-common-reports-export-ajax.cjs-reports-export-options", function(event){
      event.preventDefault();
      jQuery.ajax({
        url: jQuery(this).attr("href"),
        type: 'POST',
        beforeSend: function(){
          jQuery('#loading_results').show();
        },
        complete: function(){
          jQuery('#loading_results').hide();
        }
      });
    });
  },

  resetOtherFilters: function(){
    jQueryResetForm('#other_report_filters');
    eval(commonReportFilters.preFilterFunction);
    commonReportFilters.submitData();
  },

  getFiltersData: function(options){
    options = getDefaultVal(options, {});
    var dateRangePickerSelector = getDefaultVal(options.dateRangePickerSelector, "#report_time_filter_form .cjs_daterange_picker_value");
    var data = {};
    jQuery.each(jQuery("#other_report_filters").serializeArray(), function(index, field) {
      // Handling fields with multiple values
      if(field.name.match(/date_picker_outcomes_report/) && !field.value.blank()){
        var field_name = field.name.substr(0, field.name.match(/date_picker_outcomes_report/).index);
        data[field_name + "operator"] = "date_type";
        data[field_name + "value"] = field.value;
      }
      else if (data.hasOwnProperty(field.name)){
        data[field.name] = jQuery.makeArray(data[field.name]);
        data[field.name].push(field.value);
      }
      else{
        data[field.name] = field.value;
      }
    });
    data['date_range'] = jQuery(dateRangePickerSelector).val();
    delete data['authenticity_token'];
    return data;
  },

  defaultFilterData: function(options){
    options = getDefaultVal(options, {});
    return {filters: commonReportFilters.getFiltersData(options)};
  },

  submitData: function(){
    var submitFunction = getDefaultVal(jQuery(commonReportFilters.lastClickedSubmitButton).data('submit-js'), commonReportFilters.submitFunction);
    eval(submitFunction);
  },

  commonSubmitFunction: function(){
    jQuery.ajax({
      url: commonReportFilters.dataUrl,
      data: eval(commonReportFilters.dataParams),
      type: 'POST',
      beforeSend: function(){
        jQuery('#loading_results').show();
      },
      complete: function(){
        commonReportFilters.updateExportUrls();
      }
    });
  },

  updateExportUrls: function(){
    var params = jQuery.param(eval(commonReportFilters.dataParams));
    jQuery("a.cjs-reports-export-options").each(function (index, value){
      var url = jQuery(this).data('url')
      url += (url.indexOf('?') === -1 ? '?' : '&') + params;
      jQuery(this).attr('href', url);
    });
  },

  initializeSwitchTab: function(){
    jQuery(document).on("click", '.cjs_common_report_tab', function(){
      var element = jQuery(this).find("a");
      var options = JSON.parse(jQuery('#switch_tabs_options').val() || "{}");
      var settings = commonReportFilters.getTabOptions(options);
      jQuery("#filter_tab").val(element.data(settings["data_attribute"]));
      if(settings["apply_preFilter"]){
        eval(commonReportFilters.preFilterFunction);
      }
      commonReportFilters.submitData();
    });
  },

  getTabOptions: function(options){
    var defaultOptions = {
      data_attribute: "tab",
      apply_preFilter: true
    };
    return jQuery.extend({}, defaultOptions, options);
  },

  changeView: function(view){
    jQuery("#filter_view_field").val(view);
    commonReportFilters.submitData();
  },

  changeSortOptions: function(value){
    var values = value.split(",");
    jQuery('#filter_sort_field').val(values[0]);
    jQuery('#filter_sort_order').val(values[1]);
    commonReportFilters.submitData();
  },

  changePerPage: function(value){
    jQuery('#filter_items_per_page').val(value);
    commonReportFilters.submitData();
  }
};

var commonUserProfileFilter = {

  displayStringAnd: "",

  toggleOperatorDropdown: function(equal, notEqual, doesNotContain, filled, contain){
    jQuery(document).on("change", ".cjs_question_selector", function(){
      var closestFormGroup = jQuery(this).closest(".cjs_user_profile_row");
      var operatorDropdown = closestFormGroup.find(".cjs_operator_field");
      if(jQuery(this).val() != ""){
        var selectedOptionClass = jQuery(this).find("option:selected").attr("class");
        commonUserProfileFilter.addContainsDropOption(operatorDropdown, filled, equal, contain);
        if((selectedOptionClass == "cjs_text_question") || (selectedOptionClass == "cjs_file_question")){
          operatorDropdown.find("option.cjs_choice_based_operator").remove();
          if(selectedOptionClass == "cjs_file_question"){
            operatorDropdown.find("option[value='" + equal + "']").remove();
          }
        }
        else{
          commonUserProfileFilter.addNotContainsDropOption(operatorDropdown, equal, notEqual, doesNotContain);
        }
        var options = {parentContainer: ".cjs_user_profile_row", otherInputFields: ".cjs_operator_field, .cjs_input_hidden"};
        ReportFilters.handleDateTypeQuestion(closestFormGroup, options);
        operatorDropdown.val("");
        if(selectedOptionClass != "cjs_date_question") operatorDropdown.closest(".input-group").show();
      }
      else{
        operatorDropdown.val("");
        operatorDropdown.closest(".input-group").hide();
        closestFormGroup.find(".cjs_add_one_more_filter").hide();
        closestFormGroup.find(".cjs_date_range_picker_container").hide();
      }
      closestFormGroup.find(".cjs_choices_hidden").val("");
      closestFormGroup.find(".cjs_input_hidden").val("");
      closestFormGroup.find(".cjs_choices_hidden").closest(".input-group").hide();
    });
  },

  addNotContainsDropOption: function(selector, equal, notEqual, doesNotContain){
    if(selector.find("option[value='" + notEqual + "']").length == 0){
      selector.find("option[value='" + equal + "']").after("<option value='" + notEqual + "' class='cjs_additional_text_box cjs_choice_based_operator'>" + doesNotContain + "</option>");
    }
  },

  addContainsDropOption: function(selector, filled, equal, contain){
    if(selector.find("option[value='" + equal + "']").length == 0){
      selector.find("option[value='']").after("<option value='" + equal + "' class='cjs_additional_text_box'>" + contain + "</option>");
    }
  },

  showInputField: function(questionChoicesIds, questionChoicesTexts, separator){
    jQuery(document).on("change", "select.cjs_operator_field", function(){
      jQuery(this).closest(".cjs_user_profile_row").find(".cjs_choices_hidden").val("");
      jQuery(this).closest(".cjs_user_profile_row").find(".cjs_input_hidden").val("");
      jQuery(this).closest(".cjs_user_profile_row").find(".cjs_choices_hidden").hide();
      jQuery(this).closest(".cjs_user_profile_row").find(".cjs_input_hidden").hide();
      jQuery(this).closest(".cjs_user_profile_row").find(".cjs_choices_hidden").closest(".input-group").hide();
      jQuery(this).closest(".cjs_user_profile_row").find("div.cjs_choices_hidden").remove();
      if (jQuery(this).val()!=''){
        if(commonUserProfileFilter.customSelectBoxHasClass(jQuery(this), "cjs_additional_text_box")){
          commonUserProfileFilter.toggleAdditionalInputBox(jQuery(this), questionChoicesIds, questionChoicesTexts, separator);
        }
        jQuery(this).closest(".cjs_user_profile_row").find(".cjs_add_one_more_filter").show();
      }
      else{
        jQuery(this).closest(".cjs_user_profile_row").find(".cjs_add_one_more_filter").hide();
      }
    });
  },

  toggleAdditionalInputBox: function(selectBoxObj, questionChoicesIds, questionChoicesTexts, separator){
    var additionalBoxObj = commonUserProfileFilter.getAdditionalBox(selectBoxObj, questionChoicesIds, questionChoicesTexts, separator);
    additionalBoxObj.show();
    additionalBoxObj.closest("div.input-group").find("div.cjs_choices_hidden").show();
    additionalBoxObj.closest(".input-group").show();
  },

  customSelectBoxHasClass: function(selectBoxObj, selectorClass){
    return (selectBoxObj.find("option[value='" + selectBoxObj.val() + "']").hasClass(selectorClass));
  },

  getAdditionalBox: function(selectBoxObj, questionChoicesIds, questionChoicesTexts, separator){
    var selectedQuestion = selectBoxObj.closest("div.cjs_user_profile_row").find(".cjs_question_selector option:selected");
    var inputBox = selectBoxObj.closest("div.cjs_user_profile_row").find(".cjs_input_hidden");
    if(selectedQuestion.attr("class") == "cjs_choice_based_question"){
      inputBox = selectBoxObj.closest("div.cjs_user_profile_row").find(".cjs_choices_hidden");
      commonUserProfileFilter.showSelect2QuestionChoices(selectBoxObj, questionChoicesIds, questionChoicesTexts, separator);
    }
    return inputBox;
  },

  showSelect2QuestionChoices: function(selector, questionChoicesIds, questionChoicesTexts, separator){
    var selectedQuestionValue = selector.closest("div.cjs_user_profile_row").find(".cjs_question_selector").val();
    var select2BoxId = selector.closest("div.cjs_user_profile_row").find(".cjs_choices_hidden").attr("id");
    commonUserProfileFilter.displaySelect2Choices(selector, questionChoicesIds[selectedQuestionValue], questionChoicesTexts[selectedQuestionValue], separator, select2BoxId);
  },

  displaySelect2Choices: function(selector, choicesIdsString, choicesTextsString, separator, elementId){
    var choicesIds = choicesIdsString.split(separator);
    var choicesTexts = choicesTextsString.split(separator);
    var choicesArray = [];
    var length = choicesIds.length;
    for(var i = 0; i < length; i++) {
      choicesArray.push({id: choicesIds[i], text: choicesTexts[i]});
    }
    var ansDiv = selector.closest("div.cjs_user_profile_row").find("#" + elementId);
    ansDiv.select2({
      allowClear: true,
      placeholder: ansDiv.data('placeholder'),
      multiple: true,
      tags: choicesArray,
      createSearchChoice: false,
      formatResult: function(result, container, query, escapeMarkup){
        removeFastClickForSelect2(container);
        return result.text;
      }
    });
    ansDiv.parent().find(".select2-input.select2-default").attr("title", ansDiv.attr("title"))
  },

  removeQuestion: function(){
    jQuery(document).on("click", ".cjs_delete_question", function(){
      jQuery(this).closest("div.cjs_user_profile_row").remove();
    });
  },

  customUserProfileFilterCloner: function(){
    var clone = jQuery(".cjs_dummy_for_clone").clone();
    var rand_id = Math.floor(Math.random()*100000);
    clone.removeClass("cjs_dummy_for_clone");
    clone.removeClass("hide");
    clone.find(".cjs_question_selector").attr("name", "report[profile_questions][" + rand_id + "][field]");
    clone.find(".cjs_operator_field").attr("name", "report[profile_questions][" + rand_id + "][operator]");
    clone.find(".cjs_input_hidden").attr("name", "report[profile_questions][" + rand_id + "][value]");
    clone.find(".cjs_choices_hidden").attr("name", "report[profile_questions][" + rand_id + "][choice]");
    clone.find(".cjs_date_picker_outcomes_report").attr("name", "report[profile_questions][" + rand_id + "][date_picker_outcomes_report]");
    clone.find(".cjs_question_selector").attr("id", "report_profile_questions_" + rand_id + "_field");
    clone.find(".cjs_operator_field").attr("id", "report_profile_questions_" + rand_id + "_operator");
    clone.find(".cjs_input_hidden").attr("id", "report_profile_questions_" + rand_id + "_value");
    clone.find(".cjs_choices_hidden").attr("id", "report_profile_questions_" + rand_id + "_choice");
    clone.find(".cjs_date_picker_outcomes_report").attr("id", "report_profile_questions_" + rand_id + "date_picker_outcomes_report");
    clone.find(".cjs_question_selector_label").attr("for", "report_profile_questions_" + rand_id + "_field");
    clone.find(".cjs_operator_field_label").attr("for", "report_profile_questions_" + rand_id + "_operator");
    clone.find(".cjs_input_hidden_label").attr("for", "report_profile_questions_" + rand_id + "_value");
    clone.find(".cjs_choices_hidden_label").attr("for", "report_profile_questions_" + rand_id + "_choice");
    clone.addClass("cjs_user_profile_row");
    var prependElement = jQuery(".cjs_user_profile_prepend_element");
    prependElement.before(clone);
    initialize.reInitializeDateRangePicker(clone);
  },

  changeAddAdditionalButtonToEnd: function(element){
    var parentContainer = element.closest('.cjs_user_profile_row');
    var isDateQuestion = parentContainer.find('.cjs_question_selector option:selected').hasClass('cjs_date_question');
    element.closest(".cjs_add_one_more_filter").closest(".cjs-add-delete-buttons-container").addClass("m-t-md");
    element.closest(".cjs_add_one_more_filter").replaceWith("<div class='m-b-sm cjs_delete_question_container'><strong>"+commonUserProfileFilter.displayStringAnd+"</strong><i class='fa fa-trash fa-fw m-l-xs cjs_delete_question'></i></div>");
    parentContainer.find('.cjs_delete_question_container').toggleClass('m-t-md', isDateQuestion);
  },

  addAdditionalCustomUserProfileFilterSelector: function(andText){
    jQuery(document).on("click", ".cjs_add_one_more_filter", function(){
      commonUserProfileFilter.displayStringAnd = andText;
      commonUserProfileFilter.changeAddAdditionalButtonToEnd(jQuery(this));
      commonUserProfileFilter.customUserProfileFilterCloner();
    });
  },

  resetFilter: function(){
    jQuery(".cjs_user_profile_row").remove();
    commonUserProfileFilter.customUserProfileFilterCloner();
  }
};

var EngagementIndex = {
  trackActivity: function(url){
    jQuery(document).on("click", ".cjs_track_js_ei_activity", function(){
      activity = jQuery(this).data("activity");
      trackEngagementIndexActivity(activity, url);
    });
  }
};

var OrganizationHomePageDashboard = {
  initialize: function() {
    jQuery(window).resize(function() { OrganizationHomePageDashboard.applyBorders(); });
    OrganizationHomePageDashboard.applyBorders();
    OrganizationHomePageDashboard.fixImageHeights();
  },

  applyBorders: function() {
    jQuery.each(jQuery(".cjs-program-info-box-numbers-container"), function(idx, element) {
      var innerPartitions = jQuery(element).find("div.col-xs-4");
      var i, maxHeight = 0, numberOfPartitions = innerPartitions.length;
      for(i=0; i<numberOfPartitions; i++) innerPartitions.eq(i).height('auto');
      for(i=0; i<numberOfPartitions; i++) maxHeight = Math.max(maxHeight, innerPartitions.eq(i).height());
      for(i=0; i<numberOfPartitions; i++) innerPartitions.eq(i).height(maxHeight);
      for(i=0; i<numberOfPartitions-1; i++) innerPartitions.eq(i).addClass('b-r');
    })
  },

  fixImageHeights: function() {
    var fixedHeight = "75px";
    jQuery(".cjs-program-info-box-logo-container").width("100%").height(fixedHeight);
    jQuery(".cjs-program-info-box-logo-container img").css({"max-height": fixedHeight});
  },

  fillProgramStats: function(programId) {
    var container = jQuery(".cjs-program-info-box-numbers-ajax-container.cjs-program-id-" + programId);
    jQuery.ajax({url: container.data('url')});
  }
}

var NewAdminSignUp = {
  validate: function(){
    var isFirstNamePresent = RequiredFields.checkNonMultiInputCase("#member_first_name");
    var isLastNamePresent = RequiredFields.checkNonMultiInputCase("#member_last_name");
    var isPasswordPresent = RequiredFields.checkNonMultiInputCase("#member_password");
    var isPasswordConfirmationPresent = RequiredFields.checkNonMultiInputCase("#member_password_confirmation");
    var isEmailPresent = RequiredFields.checkNonMultiInputCase("#member_email");
    var isSignUpTermsPresent = RequiredFields.checkMultiInputCase("#signup_terms_container");
    var requiredFieldsPresent = isEmailPresent && isFirstNamePresent && isLastNamePresent && isPasswordPresent && isPasswordConfirmationPresent && isSignUpTermsPresent;
    var isValid = true;

    var isEmailFormatValid = verifyEmailFormat(jQuery("#member_email").val());

    if(requiredFieldsPresent) {
      isValid = ChangePasswordSettings.validateConfirmPassword();
      
      if( isValid && !isEmailFormatValid){
        ChronusValidator.ErrorManager.ShowFieldError(jQuery("#member_email"));
        ChronusValidator.ErrorManager.ShowPageFlash(false, jsCommonTranslations.invalidEmailFormatError);
        isValid = false;
      }
    }
    else {
      ChronusValidator.ErrorManager.ShowPageFlash(false, jsCommonTranslations.fillAppropriateValues);
      isValid = false
    }

    if(isValid) {
      ChronusValidator.ErrorManager.ClearPageFlash();
    }
    return isValid;
  }
};

var AddRoleAutoApproval = {
  track_add_role_auto_approval: function(){
    chrGoogleAnalytics.addEvent(chrGoogleAnalytics.category.ADD_ROLE_AUTO_APPROVAL, chrGoogleAnalytics.action.GA_ADD_ROLE_AUTO_APPROVAL_CONFIRMED);
  }
};

function trackEngagementIndexActivity(activity, path, options){
  if (typeof options === "undefined")
    options = {};

  if (typeof path === "undefined")
    path = "/engagement_index/track_activity"

  jQuery.ajax({
    url: path,
    type: "POST",
    data: {activity: activity, src: options.src, description: options.description}
  });
}

function generateRandomIdForDatepicker(){
  return Math.random().toString(36).substr(2, 5);
}

function setLabelForCKEditorImagePreviewLink() {
  jQuery("a[id$='previewLink']").attr("aria-label", '<%= "js_translations.htmlContentEmbedder.preview".translate %>');
}