module ProfileQuestionExtension
  include ProfileQuestion::Type

  #old => [current, curent...]
  DESTROY_ANSWERS_IF_CHANGED_TO = {
    STRING                => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    TEXT                  => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    SINGLE_CHOICE         => [MULTI_EXPERIENCE, MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE,
                              PUBLICATION, MANAGER, DATE],

    MULTI_CHOICE          => [SINGLE_CHOICE, ORDERED_OPTIONS, MULTI_EXPERIENCE, MULTI_EDUCATION, MULTI_PUBLICATION,
                              EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    RATING_SCALE          => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, MULTI_EXPERIENCE, MULTI_EDUCATION, 
                              MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    FILE                  => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    MULTI_STRING          => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    LOCATION              => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    EXPERIENCE            => [SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, STRING, TEXT,
                              FILE, MULTI_STRING, LOCATION, EDUCATION, MULTI_EDUCATION, EMAIL, SKYPE_ID, 
                              ORDERED_OPTIONS, NAME, PUBLICATION, MULTI_PUBLICATION, MANAGER, DATE],

    MULTI_EXPERIENCE      => [SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, STRING, TEXT,
                              FILE, MULTI_STRING, LOCATION, EDUCATION, MULTI_EDUCATION, EMAIL, SKYPE_ID, 
                              ORDERED_OPTIONS, NAME, PUBLICATION, MULTI_PUBLICATION, MANAGER, DATE],

    EDUCATION             => [SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, STRING, TEXT,
                              FILE, MULTI_STRING, LOCATION, EXPERIENCE, MULTI_EXPERIENCE, EMAIL, SKYPE_ID, 
                              ORDERED_OPTIONS, NAME, PUBLICATION, MULTI_PUBLICATION, MANAGER, DATE],

    MULTI_EDUCATION       => [SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, STRING, TEXT,
                              FILE, MULTI_STRING, LOCATION, EXPERIENCE, MULTI_EXPERIENCE, EMAIL, SKYPE_ID, 
                              ORDERED_OPTIONS, NAME, PUBLICATION, MULTI_PUBLICATION, MANAGER, DATE],

    EMAIL                 => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    SKYPE_ID              => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    ORDERED_OPTIONS       => [MULTI_EXPERIENCE, MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION,
                              MANAGER, DATE],

    NAME                  => [SINGLE_CHOICE, MULTI_CHOICE, ORDERED_OPTIONS, RATING_SCALE, MULTI_EXPERIENCE, 
                              MULTI_EDUCATION, MULTI_PUBLICATION, EDUCATION, EXPERIENCE, PUBLICATION, MANAGER, DATE],

    PUBLICATION           => [SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, STRING, TEXT,
                              FILE, MULTI_STRING, LOCATION, EDUCATION, MULTI_EDUCATION, EMAIL, SKYPE_ID, 
                              ORDERED_OPTIONS, NAME, EXPERIENCE, MULTI_EXPERIENCE, MANAGER, DATE],

    MULTI_PUBLICATION     => [SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, STRING, TEXT,
                              FILE, MULTI_STRING, LOCATION, EDUCATION, MULTI_EDUCATION, EMAIL, SKYPE_ID, 
                              ORDERED_OPTIONS, NAME, EXPERIENCE, MULTI_EXPERIENCE, MANAGER, DATE],

    MANAGER               => [SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, STRING, TEXT,
                              FILE, MULTI_STRING, LOCATION, EDUCATION, MULTI_EDUCATION, EMAIL, SKYPE_ID, 
                              ORDERED_OPTIONS, NAME, PUBLICATION, MULTI_PUBLICATION, PUBLICATION, MULTI_PUBLICATION, DATE],

    DATE                  => [STRING, TEXT, SINGLE_CHOICE, MULTI_CHOICE, RATING_SCALE, FILE, MULTI_STRING, LOCATION, EXPERIENCE, MULTI_EXPERIENCE, EDUCATION, MULTI_EDUCATION, EMAIL, SKYPE_ID, ORDERED_OPTIONS, NAME, PUBLICATION, MULTI_PUBLICATION, MANAGER]
  }

  COMPACT_ORDERED_ANSWERS_IF_CHANGED_TO = {
    ORDERED_OPTIONS      => [SINGLE_CHOICE, MULTI_CHOICE]
  }

  KEEP_FIRST_ANSWER_IF_CHANGED_TO = {
    MULTI_EDUCATION     => [EDUCATION],
    MULTI_EXPERIENCE    => [EXPERIENCE],
    MULTI_PUBLICATION   => [PUBLICATION]
  }

  COMPACT_ANSWERS_IF_CHANGED_TO = {
    SINGLE_CHOICE      => [MULTI_CHOICE]
  }


  def self.destroy_all_answers?(old_type, current_type)
    DESTROY_ANSWERS_IF_CHANGED_TO[old_type].present? && DESTROY_ANSWERS_IF_CHANGED_TO[old_type].include?(current_type)
  end

  def self.compact_ordered_answers?(old_type, current_type)
    COMPACT_ORDERED_ANSWERS_IF_CHANGED_TO[old_type].present? && COMPACT_ORDERED_ANSWERS_IF_CHANGED_TO[old_type].include?(current_type)
  end

  def self.keep_first_answer?(old_type, current_type)
    KEEP_FIRST_ANSWER_IF_CHANGED_TO[old_type].present? && KEEP_FIRST_ANSWER_IF_CHANGED_TO[old_type].include?(current_type)
  end

  def self.compact_answers?(old_type, current_type)
    COMPACT_ANSWERS_IF_CHANGED_TO[old_type].present? && COMPACT_ANSWERS_IF_CHANGED_TO[old_type].include?(current_type)
  end

  def self.choice_based_to_non_choice_based?(old_type, current_type)
    old_type.in?(ProfileQuestion::Type.choice_based_types) && current_type.in?(ProfileQuestion::Type.all - ProfileQuestion::Type.choice_based_types)
  end

end